<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Endpoint;

class DeleteCoreV1NamespacedService extends \Flownative\Kubernetes\Api\Runtime\Client\BaseEndpoint implements \Flownative\Kubernetes\Api\Runtime\Client\Endpoint
{
    use \Flownative\Kubernetes\Api\Runtime\Client\EndpointTrait;
    protected $name;
    protected $namespace;

    /**
     * delete a Service.
     *
     * @param string $name            name of the Service
     * @param string $namespace       object name and auth scope, such as for teams and projects
     * @param array  $queryParameters {
     *
     * @var string $pretty If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @var string $dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @var int    $gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @var bool   $ignoreStoreReadErrorWithClusterBreakingPotential if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it
     * @var bool   $orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @var string $propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
     *             }
     */
    public function __construct(string $name, string $namespace, \stdClass $body, array $queryParameters = [])
    {
        $this->name = $name;
        $this->namespace = $namespace;
        $this->body = $body;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'DELETE';
    }

    public function getUri(): string
    {
        return str_replace(['{name}', '{namespace}'], [$this->name, $this->namespace], '/api/v1/namespaces/{namespace}/services/{name}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['pretty', 'dryRun', 'gracePeriodSeconds', 'ignoreStoreReadErrorWithClusterBreakingPotential', 'orphanDependents', 'propagationPolicy']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('pretty', ['string']);
        $optionsResolver->addAllowedTypes('dryRun', ['string']);
        $optionsResolver->addAllowedTypes('gracePeriodSeconds', ['int']);
        $optionsResolver->addAllowedTypes('ignoreStoreReadErrorWithClusterBreakingPotential', ['bool']);
        $optionsResolver->addAllowedTypes('orphanDependents', ['bool']);
        $optionsResolver->addAllowedTypes('propagationPolicy', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Service
     *
     * @throws \Flownative\Kubernetes\Api\Exception\DeleteCoreV1NamespacedServiceUnauthorizedException
     * @throws \Flownative\Kubernetes\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return $serializer->deserialize($body, 'Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Service', 'json');
        }
        if (202 === $status) {
            return $serializer->deserialize($body, 'Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Service', 'json');
        }
        if (401 === $status) {
            throw new \Flownative\Kubernetes\Api\Exception\DeleteCoreV1NamespacedServiceUnauthorizedException($response);
        }
        throw new \Flownative\Kubernetes\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerToken'];
    }
}
