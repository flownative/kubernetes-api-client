<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Endpoint;

class ReadAppsV1NamespacedDeployment extends \Flownative\Kubernetes\Api\Runtime\Client\BaseEndpoint implements \Flownative\Kubernetes\Api\Runtime\Client\Endpoint
{
    use \Flownative\Kubernetes\Api\Runtime\Client\EndpointTrait;
    protected $name;
    protected $namespace;

    /**
     * read the specified Deployment.
     *
     * @param string $name            name of the Deployment
     * @param string $namespace       object name and auth scope, such as for teams and projects
     * @param array  $queryParameters {
     *
     * @var string $pretty If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     *             }
     */
    public function __construct(string $name, string $namespace, array $queryParameters = [])
    {
        $this->name = $name;
        $this->namespace = $namespace;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{name}', '{namespace}'], [$this->name, $this->namespace], '/apis/apps/v1/namespaces/{namespace}/deployments/{name}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['pretty']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('pretty', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1Deployment
     *
     * @throws \Flownative\Kubernetes\Api\Exception\ReadAppsV1NamespacedDeploymentUnauthorizedException
     * @throws \Flownative\Kubernetes\Api\Exception\UnexpectedStatusCodeException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
            return $serializer->deserialize($body, 'Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1Deployment', 'json');
        }
        if (401 === $status) {
            throw new \Flownative\Kubernetes\Api\Exception\ReadAppsV1NamespacedDeploymentUnauthorizedException($response);
        }
        throw new \Flownative\Kubernetes\Api\Exception\UnexpectedStatusCodeException($status, $body);
    }

    public function getAuthenticationScopes(): array
    {
        return ['BearerToken'];
    }
}
