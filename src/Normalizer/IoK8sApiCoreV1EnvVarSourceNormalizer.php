<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1EnvVarSourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvVarSource::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvVarSource::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvVarSource();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('configMapKeyRef', $data) && $data['configMapKeyRef'] !== null) {
            $object->setConfigMapKeyRef($this->denormalizer->denormalize($data['configMapKeyRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMapKeySelector::class, 'json', $context));
        } elseif (\array_key_exists('configMapKeyRef', $data) && $data['configMapKeyRef'] === null) {
            $object->setConfigMapKeyRef(null);
        }
        if (\array_key_exists('fieldRef', $data) && $data['fieldRef'] !== null) {
            $object->setFieldRef($this->denormalizer->denormalize($data['fieldRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ObjectFieldSelector::class, 'json', $context));
        } elseif (\array_key_exists('fieldRef', $data) && $data['fieldRef'] === null) {
            $object->setFieldRef(null);
        }
        if (\array_key_exists('resourceFieldRef', $data) && $data['resourceFieldRef'] !== null) {
            $object->setResourceFieldRef($this->denormalizer->denormalize($data['resourceFieldRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ResourceFieldSelector::class, 'json', $context));
        } elseif (\array_key_exists('resourceFieldRef', $data) && $data['resourceFieldRef'] === null) {
            $object->setResourceFieldRef(null);
        }
        if (\array_key_exists('secretKeyRef', $data) && $data['secretKeyRef'] !== null) {
            $object->setSecretKeyRef($this->denormalizer->denormalize($data['secretKeyRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SecretKeySelector::class, 'json', $context));
        } elseif (\array_key_exists('secretKeyRef', $data) && $data['secretKeyRef'] === null) {
            $object->setSecretKeyRef(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('configMapKeyRef') && null !== $data->getConfigMapKeyRef()) {
            $dataArray['configMapKeyRef'] = $this->normalizer->normalize($data->getConfigMapKeyRef(), 'json', $context);
        }
        if ($data->isInitialized('fieldRef') && null !== $data->getFieldRef()) {
            $dataArray['fieldRef'] = $this->normalizer->normalize($data->getFieldRef(), 'json', $context);
        }
        if ($data->isInitialized('resourceFieldRef') && null !== $data->getResourceFieldRef()) {
            $dataArray['resourceFieldRef'] = $this->normalizer->normalize($data->getResourceFieldRef(), 'json', $context);
        }
        if ($data->isInitialized('secretKeyRef') && null !== $data->getSecretKeyRef()) {
            $dataArray['secretKeyRef'] = $this->normalizer->normalize($data->getSecretKeyRef(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvVarSource::class => false];
    }
}
