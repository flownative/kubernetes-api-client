<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PersistentVolumeClaimSpecNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PersistentVolumeClaimSpec::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PersistentVolumeClaimSpec::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PersistentVolumeClaimSpec();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('accessModes', $data) && $data['accessModes'] !== null) {
            $values = [];
            foreach ($data['accessModes'] as $value) {
                $values[] = $value;
            }
            $object->setAccessModes($values);
        } elseif (\array_key_exists('accessModes', $data) && $data['accessModes'] === null) {
            $object->setAccessModes(null);
        }
        if (\array_key_exists('dataSource', $data) && $data['dataSource'] !== null) {
            $object->setDataSource($this->denormalizer->denormalize($data['dataSource'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TypedLocalObjectReference::class, 'json', $context));
        } elseif (\array_key_exists('dataSource', $data) && $data['dataSource'] === null) {
            $object->setDataSource(null);
        }
        if (\array_key_exists('dataSourceRef', $data) && $data['dataSourceRef'] !== null) {
            $object->setDataSourceRef($this->denormalizer->denormalize($data['dataSourceRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TypedObjectReference::class, 'json', $context));
        } elseif (\array_key_exists('dataSourceRef', $data) && $data['dataSourceRef'] === null) {
            $object->setDataSourceRef(null);
        }
        if (\array_key_exists('resources', $data) && $data['resources'] !== null) {
            $object->setResources($this->denormalizer->denormalize($data['resources'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeResourceRequirements::class, 'json', $context));
        } elseif (\array_key_exists('resources', $data) && $data['resources'] === null) {
            $object->setResources(null);
        }
        if (\array_key_exists('selector', $data) && $data['selector'] !== null) {
            $object->setSelector($this->denormalizer->denormalize($data['selector'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1LabelSelector::class, 'json', $context));
        } elseif (\array_key_exists('selector', $data) && $data['selector'] === null) {
            $object->setSelector(null);
        }
        if (\array_key_exists('storageClassName', $data) && $data['storageClassName'] !== null) {
            $object->setStorageClassName($data['storageClassName']);
        } elseif (\array_key_exists('storageClassName', $data) && $data['storageClassName'] === null) {
            $object->setStorageClassName(null);
        }
        if (\array_key_exists('volumeAttributesClassName', $data) && $data['volumeAttributesClassName'] !== null) {
            $object->setVolumeAttributesClassName($data['volumeAttributesClassName']);
        } elseif (\array_key_exists('volumeAttributesClassName', $data) && $data['volumeAttributesClassName'] === null) {
            $object->setVolumeAttributesClassName(null);
        }
        if (\array_key_exists('volumeMode', $data) && $data['volumeMode'] !== null) {
            $object->setVolumeMode($data['volumeMode']);
        } elseif (\array_key_exists('volumeMode', $data) && $data['volumeMode'] === null) {
            $object->setVolumeMode(null);
        }
        if (\array_key_exists('volumeName', $data) && $data['volumeName'] !== null) {
            $object->setVolumeName($data['volumeName']);
        } elseif (\array_key_exists('volumeName', $data) && $data['volumeName'] === null) {
            $object->setVolumeName(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('accessModes') && null !== $data->getAccessModes()) {
            $values = [];
            foreach ($data->getAccessModes() as $value) {
                $values[] = $value;
            }
            $dataArray['accessModes'] = $values;
        }
        if ($data->isInitialized('dataSource') && null !== $data->getDataSource()) {
            $dataArray['dataSource'] = $this->normalizer->normalize($data->getDataSource(), 'json', $context);
        }
        if ($data->isInitialized('dataSourceRef') && null !== $data->getDataSourceRef()) {
            $dataArray['dataSourceRef'] = $this->normalizer->normalize($data->getDataSourceRef(), 'json', $context);
        }
        if ($data->isInitialized('resources') && null !== $data->getResources()) {
            $dataArray['resources'] = $this->normalizer->normalize($data->getResources(), 'json', $context);
        }
        if ($data->isInitialized('selector') && null !== $data->getSelector()) {
            $dataArray['selector'] = $this->normalizer->normalize($data->getSelector(), 'json', $context);
        }
        if ($data->isInitialized('storageClassName') && null !== $data->getStorageClassName()) {
            $dataArray['storageClassName'] = $data->getStorageClassName();
        }
        if ($data->isInitialized('volumeAttributesClassName') && null !== $data->getVolumeAttributesClassName()) {
            $dataArray['volumeAttributesClassName'] = $data->getVolumeAttributesClassName();
        }
        if ($data->isInitialized('volumeMode') && null !== $data->getVolumeMode()) {
            $dataArray['volumeMode'] = $data->getVolumeMode();
        }
        if ($data->isInitialized('volumeName') && null !== $data->getVolumeName()) {
            $dataArray['volumeName'] = $data->getVolumeName();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PersistentVolumeClaimSpec::class => false];
    }
}
