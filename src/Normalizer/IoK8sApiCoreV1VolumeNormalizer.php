<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1VolumeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Volume::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Volume::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Volume();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('awsElasticBlockStore', $data) && $data['awsElasticBlockStore'] !== null) {
            $object->setAwsElasticBlockStore($this->denormalizer->denormalize($data['awsElasticBlockStore'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1AWSElasticBlockStoreVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('awsElasticBlockStore', $data) && $data['awsElasticBlockStore'] === null) {
            $object->setAwsElasticBlockStore(null);
        }
        if (\array_key_exists('azureDisk', $data) && $data['azureDisk'] !== null) {
            $object->setAzureDisk($this->denormalizer->denormalize($data['azureDisk'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1AzureDiskVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('azureDisk', $data) && $data['azureDisk'] === null) {
            $object->setAzureDisk(null);
        }
        if (\array_key_exists('azureFile', $data) && $data['azureFile'] !== null) {
            $object->setAzureFile($this->denormalizer->denormalize($data['azureFile'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1AzureFileVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('azureFile', $data) && $data['azureFile'] === null) {
            $object->setAzureFile(null);
        }
        if (\array_key_exists('cephfs', $data) && $data['cephfs'] !== null) {
            $object->setCephfs($this->denormalizer->denormalize($data['cephfs'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1CephFSVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('cephfs', $data) && $data['cephfs'] === null) {
            $object->setCephfs(null);
        }
        if (\array_key_exists('cinder', $data) && $data['cinder'] !== null) {
            $object->setCinder($this->denormalizer->denormalize($data['cinder'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1CinderVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('cinder', $data) && $data['cinder'] === null) {
            $object->setCinder(null);
        }
        if (\array_key_exists('configMap', $data) && $data['configMap'] !== null) {
            $object->setConfigMap($this->denormalizer->denormalize($data['configMap'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMapVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('configMap', $data) && $data['configMap'] === null) {
            $object->setConfigMap(null);
        }
        if (\array_key_exists('csi', $data) && $data['csi'] !== null) {
            $object->setCsi($this->denormalizer->denormalize($data['csi'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1CSIVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('csi', $data) && $data['csi'] === null) {
            $object->setCsi(null);
        }
        if (\array_key_exists('downwardAPI', $data) && $data['downwardAPI'] !== null) {
            $object->setDownwardAPI($this->denormalizer->denormalize($data['downwardAPI'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1DownwardAPIVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('downwardAPI', $data) && $data['downwardAPI'] === null) {
            $object->setDownwardAPI(null);
        }
        if (\array_key_exists('emptyDir', $data) && $data['emptyDir'] !== null) {
            $object->setEmptyDir($this->denormalizer->denormalize($data['emptyDir'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EmptyDirVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('emptyDir', $data) && $data['emptyDir'] === null) {
            $object->setEmptyDir(null);
        }
        if (\array_key_exists('ephemeral', $data) && $data['ephemeral'] !== null) {
            $object->setEphemeral($this->denormalizer->denormalize($data['ephemeral'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EphemeralVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('ephemeral', $data) && $data['ephemeral'] === null) {
            $object->setEphemeral(null);
        }
        if (\array_key_exists('fc', $data) && $data['fc'] !== null) {
            $object->setFc($this->denormalizer->denormalize($data['fc'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1FCVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('fc', $data) && $data['fc'] === null) {
            $object->setFc(null);
        }
        if (\array_key_exists('flexVolume', $data) && $data['flexVolume'] !== null) {
            $object->setFlexVolume($this->denormalizer->denormalize($data['flexVolume'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1FlexVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('flexVolume', $data) && $data['flexVolume'] === null) {
            $object->setFlexVolume(null);
        }
        if (\array_key_exists('flocker', $data) && $data['flocker'] !== null) {
            $object->setFlocker($this->denormalizer->denormalize($data['flocker'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1FlockerVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('flocker', $data) && $data['flocker'] === null) {
            $object->setFlocker(null);
        }
        if (\array_key_exists('gcePersistentDisk', $data) && $data['gcePersistentDisk'] !== null) {
            $object->setGcePersistentDisk($this->denormalizer->denormalize($data['gcePersistentDisk'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1GCEPersistentDiskVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('gcePersistentDisk', $data) && $data['gcePersistentDisk'] === null) {
            $object->setGcePersistentDisk(null);
        }
        if (\array_key_exists('gitRepo', $data) && $data['gitRepo'] !== null) {
            $object->setGitRepo($this->denormalizer->denormalize($data['gitRepo'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1GitRepoVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('gitRepo', $data) && $data['gitRepo'] === null) {
            $object->setGitRepo(null);
        }
        if (\array_key_exists('glusterfs', $data) && $data['glusterfs'] !== null) {
            $object->setGlusterfs($this->denormalizer->denormalize($data['glusterfs'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1GlusterfsVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('glusterfs', $data) && $data['glusterfs'] === null) {
            $object->setGlusterfs(null);
        }
        if (\array_key_exists('hostPath', $data) && $data['hostPath'] !== null) {
            $object->setHostPath($this->denormalizer->denormalize($data['hostPath'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HostPathVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('hostPath', $data) && $data['hostPath'] === null) {
            $object->setHostPath(null);
        }
        if (\array_key_exists('image', $data) && $data['image'] !== null) {
            $object->setImage($this->denormalizer->denormalize($data['image'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ImageVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('image', $data) && $data['image'] === null) {
            $object->setImage(null);
        }
        if (\array_key_exists('iscsi', $data) && $data['iscsi'] !== null) {
            $object->setIscsi($this->denormalizer->denormalize($data['iscsi'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ISCSIVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('iscsi', $data) && $data['iscsi'] === null) {
            $object->setIscsi(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('nfs', $data) && $data['nfs'] !== null) {
            $object->setNfs($this->denormalizer->denormalize($data['nfs'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NFSVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('nfs', $data) && $data['nfs'] === null) {
            $object->setNfs(null);
        }
        if (\array_key_exists('persistentVolumeClaim', $data) && $data['persistentVolumeClaim'] !== null) {
            $object->setPersistentVolumeClaim($this->denormalizer->denormalize($data['persistentVolumeClaim'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PersistentVolumeClaimVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('persistentVolumeClaim', $data) && $data['persistentVolumeClaim'] === null) {
            $object->setPersistentVolumeClaim(null);
        }
        if (\array_key_exists('photonPersistentDisk', $data) && $data['photonPersistentDisk'] !== null) {
            $object->setPhotonPersistentDisk($this->denormalizer->denormalize($data['photonPersistentDisk'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PhotonPersistentDiskVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('photonPersistentDisk', $data) && $data['photonPersistentDisk'] === null) {
            $object->setPhotonPersistentDisk(null);
        }
        if (\array_key_exists('portworxVolume', $data) && $data['portworxVolume'] !== null) {
            $object->setPortworxVolume($this->denormalizer->denormalize($data['portworxVolume'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PortworxVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('portworxVolume', $data) && $data['portworxVolume'] === null) {
            $object->setPortworxVolume(null);
        }
        if (\array_key_exists('projected', $data) && $data['projected'] !== null) {
            $object->setProjected($this->denormalizer->denormalize($data['projected'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ProjectedVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('projected', $data) && $data['projected'] === null) {
            $object->setProjected(null);
        }
        if (\array_key_exists('quobyte', $data) && $data['quobyte'] !== null) {
            $object->setQuobyte($this->denormalizer->denormalize($data['quobyte'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1QuobyteVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('quobyte', $data) && $data['quobyte'] === null) {
            $object->setQuobyte(null);
        }
        if (\array_key_exists('rbd', $data) && $data['rbd'] !== null) {
            $object->setRbd($this->denormalizer->denormalize($data['rbd'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1RBDVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('rbd', $data) && $data['rbd'] === null) {
            $object->setRbd(null);
        }
        if (\array_key_exists('scaleIO', $data) && $data['scaleIO'] !== null) {
            $object->setScaleIO($this->denormalizer->denormalize($data['scaleIO'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ScaleIOVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('scaleIO', $data) && $data['scaleIO'] === null) {
            $object->setScaleIO(null);
        }
        if (\array_key_exists('secret', $data) && $data['secret'] !== null) {
            $object->setSecret($this->denormalizer->denormalize($data['secret'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SecretVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('secret', $data) && $data['secret'] === null) {
            $object->setSecret(null);
        }
        if (\array_key_exists('storageos', $data) && $data['storageos'] !== null) {
            $object->setStorageos($this->denormalizer->denormalize($data['storageos'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1StorageOSVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('storageos', $data) && $data['storageos'] === null) {
            $object->setStorageos(null);
        }
        if (\array_key_exists('vsphereVolume', $data) && $data['vsphereVolume'] !== null) {
            $object->setVsphereVolume($this->denormalizer->denormalize($data['vsphereVolume'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VsphereVirtualDiskVolumeSource::class, 'json', $context));
        } elseif (\array_key_exists('vsphereVolume', $data) && $data['vsphereVolume'] === null) {
            $object->setVsphereVolume(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('awsElasticBlockStore') && null !== $data->getAwsElasticBlockStore()) {
            $dataArray['awsElasticBlockStore'] = $this->normalizer->normalize($data->getAwsElasticBlockStore(), 'json', $context);
        }
        if ($data->isInitialized('azureDisk') && null !== $data->getAzureDisk()) {
            $dataArray['azureDisk'] = $this->normalizer->normalize($data->getAzureDisk(), 'json', $context);
        }
        if ($data->isInitialized('azureFile') && null !== $data->getAzureFile()) {
            $dataArray['azureFile'] = $this->normalizer->normalize($data->getAzureFile(), 'json', $context);
        }
        if ($data->isInitialized('cephfs') && null !== $data->getCephfs()) {
            $dataArray['cephfs'] = $this->normalizer->normalize($data->getCephfs(), 'json', $context);
        }
        if ($data->isInitialized('cinder') && null !== $data->getCinder()) {
            $dataArray['cinder'] = $this->normalizer->normalize($data->getCinder(), 'json', $context);
        }
        if ($data->isInitialized('configMap') && null !== $data->getConfigMap()) {
            $dataArray['configMap'] = $this->normalizer->normalize($data->getConfigMap(), 'json', $context);
        }
        if ($data->isInitialized('csi') && null !== $data->getCsi()) {
            $dataArray['csi'] = $this->normalizer->normalize($data->getCsi(), 'json', $context);
        }
        if ($data->isInitialized('downwardAPI') && null !== $data->getDownwardAPI()) {
            $dataArray['downwardAPI'] = $this->normalizer->normalize($data->getDownwardAPI(), 'json', $context);
        }
        if ($data->isInitialized('emptyDir') && null !== $data->getEmptyDir()) {
            $dataArray['emptyDir'] = $this->normalizer->normalize($data->getEmptyDir(), 'json', $context);
        }
        if ($data->isInitialized('ephemeral') && null !== $data->getEphemeral()) {
            $dataArray['ephemeral'] = $this->normalizer->normalize($data->getEphemeral(), 'json', $context);
        }
        if ($data->isInitialized('fc') && null !== $data->getFc()) {
            $dataArray['fc'] = $this->normalizer->normalize($data->getFc(), 'json', $context);
        }
        if ($data->isInitialized('flexVolume') && null !== $data->getFlexVolume()) {
            $dataArray['flexVolume'] = $this->normalizer->normalize($data->getFlexVolume(), 'json', $context);
        }
        if ($data->isInitialized('flocker') && null !== $data->getFlocker()) {
            $dataArray['flocker'] = $this->normalizer->normalize($data->getFlocker(), 'json', $context);
        }
        if ($data->isInitialized('gcePersistentDisk') && null !== $data->getGcePersistentDisk()) {
            $dataArray['gcePersistentDisk'] = $this->normalizer->normalize($data->getGcePersistentDisk(), 'json', $context);
        }
        if ($data->isInitialized('gitRepo') && null !== $data->getGitRepo()) {
            $dataArray['gitRepo'] = $this->normalizer->normalize($data->getGitRepo(), 'json', $context);
        }
        if ($data->isInitialized('glusterfs') && null !== $data->getGlusterfs()) {
            $dataArray['glusterfs'] = $this->normalizer->normalize($data->getGlusterfs(), 'json', $context);
        }
        if ($data->isInitialized('hostPath') && null !== $data->getHostPath()) {
            $dataArray['hostPath'] = $this->normalizer->normalize($data->getHostPath(), 'json', $context);
        }
        if ($data->isInitialized('image') && null !== $data->getImage()) {
            $dataArray['image'] = $this->normalizer->normalize($data->getImage(), 'json', $context);
        }
        if ($data->isInitialized('iscsi') && null !== $data->getIscsi()) {
            $dataArray['iscsi'] = $this->normalizer->normalize($data->getIscsi(), 'json', $context);
        }
        $dataArray['name'] = $data->getName();
        if ($data->isInitialized('nfs') && null !== $data->getNfs()) {
            $dataArray['nfs'] = $this->normalizer->normalize($data->getNfs(), 'json', $context);
        }
        if ($data->isInitialized('persistentVolumeClaim') && null !== $data->getPersistentVolumeClaim()) {
            $dataArray['persistentVolumeClaim'] = $this->normalizer->normalize($data->getPersistentVolumeClaim(), 'json', $context);
        }
        if ($data->isInitialized('photonPersistentDisk') && null !== $data->getPhotonPersistentDisk()) {
            $dataArray['photonPersistentDisk'] = $this->normalizer->normalize($data->getPhotonPersistentDisk(), 'json', $context);
        }
        if ($data->isInitialized('portworxVolume') && null !== $data->getPortworxVolume()) {
            $dataArray['portworxVolume'] = $this->normalizer->normalize($data->getPortworxVolume(), 'json', $context);
        }
        if ($data->isInitialized('projected') && null !== $data->getProjected()) {
            $dataArray['projected'] = $this->normalizer->normalize($data->getProjected(), 'json', $context);
        }
        if ($data->isInitialized('quobyte') && null !== $data->getQuobyte()) {
            $dataArray['quobyte'] = $this->normalizer->normalize($data->getQuobyte(), 'json', $context);
        }
        if ($data->isInitialized('rbd') && null !== $data->getRbd()) {
            $dataArray['rbd'] = $this->normalizer->normalize($data->getRbd(), 'json', $context);
        }
        if ($data->isInitialized('scaleIO') && null !== $data->getScaleIO()) {
            $dataArray['scaleIO'] = $this->normalizer->normalize($data->getScaleIO(), 'json', $context);
        }
        if ($data->isInitialized('secret') && null !== $data->getSecret()) {
            $dataArray['secret'] = $this->normalizer->normalize($data->getSecret(), 'json', $context);
        }
        if ($data->isInitialized('storageos') && null !== $data->getStorageos()) {
            $dataArray['storageos'] = $this->normalizer->normalize($data->getStorageos(), 'json', $context);
        }
        if ($data->isInitialized('vsphereVolume') && null !== $data->getVsphereVolume()) {
            $dataArray['vsphereVolume'] = $this->normalizer->normalize($data->getVsphereVolume(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Volume::class => false];
    }
}
