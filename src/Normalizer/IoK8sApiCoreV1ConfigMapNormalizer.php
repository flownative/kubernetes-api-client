<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ConfigMapNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMap::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMap::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMap();
        if (\array_key_exists('immutable', $data) && \is_int($data['immutable'])) {
            $data['immutable'] = (bool) $data['immutable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('apiVersion', $data) && $data['apiVersion'] !== null) {
            $object->setApiVersion($data['apiVersion']);
        } elseif (\array_key_exists('apiVersion', $data) && $data['apiVersion'] === null) {
            $object->setApiVersion(null);
        }
        if (\array_key_exists('binaryData', $data) && $data['binaryData'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['binaryData'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setBinaryData($values);
        } elseif (\array_key_exists('binaryData', $data) && $data['binaryData'] === null) {
            $object->setBinaryData(null);
        }
        if (\array_key_exists('data', $data) && $data['data'] !== null) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['data'] as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $object->setData($values_1);
        } elseif (\array_key_exists('data', $data) && $data['data'] === null) {
            $object->setData(null);
        }
        if (\array_key_exists('immutable', $data) && $data['immutable'] !== null) {
            $object->setImmutable($data['immutable']);
        } elseif (\array_key_exists('immutable', $data) && $data['immutable'] === null) {
            $object->setImmutable(null);
        }
        if (\array_key_exists('kind', $data) && $data['kind'] !== null) {
            $object->setKind($data['kind']);
        } elseif (\array_key_exists('kind', $data) && $data['kind'] === null) {
            $object->setKind(null);
        }
        if (\array_key_exists('metadata', $data) && $data['metadata'] !== null) {
            $object->setMetadata($this->denormalizer->denormalize($data['metadata'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ObjectMeta::class, 'json', $context));
        } elseif (\array_key_exists('metadata', $data) && $data['metadata'] === null) {
            $object->setMetadata(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('apiVersion') && null !== $data->getApiVersion()) {
            $dataArray['apiVersion'] = $data->getApiVersion();
        }
        if ($data->isInitialized('binaryData') && null !== $data->getBinaryData()) {
            $values = [];
            foreach ($data->getBinaryData() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['binaryData'] = $values;
        }
        if ($data->isInitialized('data') && null !== $data->getData()) {
            $values_1 = [];
            foreach ($data->getData() as $key_1 => $value_1) {
                $values_1[$key_1] = $value_1;
            }
            $dataArray['data'] = $values_1;
        }
        if ($data->isInitialized('immutable') && null !== $data->getImmutable()) {
            $dataArray['immutable'] = $data->getImmutable();
        }
        if ($data->isInitialized('kind') && null !== $data->getKind()) {
            $dataArray['kind'] = $data->getKind();
        }
        if ($data->isInitialized('metadata') && null !== $data->getMetadata()) {
            $dataArray['metadata'] = $this->normalizer->normalize($data->getMetadata(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMap::class => false];
    }
}
