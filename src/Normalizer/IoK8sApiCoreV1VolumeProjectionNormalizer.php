<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1VolumeProjectionNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeProjection::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeProjection::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeProjection();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('clusterTrustBundle', $data) && $data['clusterTrustBundle'] !== null) {
            $object->setClusterTrustBundle($this->denormalizer->denormalize($data['clusterTrustBundle'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ClusterTrustBundleProjection::class, 'json', $context));
        } elseif (\array_key_exists('clusterTrustBundle', $data) && $data['clusterTrustBundle'] === null) {
            $object->setClusterTrustBundle(null);
        }
        if (\array_key_exists('configMap', $data) && $data['configMap'] !== null) {
            $object->setConfigMap($this->denormalizer->denormalize($data['configMap'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ConfigMapProjection::class, 'json', $context));
        } elseif (\array_key_exists('configMap', $data) && $data['configMap'] === null) {
            $object->setConfigMap(null);
        }
        if (\array_key_exists('downwardAPI', $data) && $data['downwardAPI'] !== null) {
            $object->setDownwardAPI($this->denormalizer->denormalize($data['downwardAPI'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1DownwardAPIProjection::class, 'json', $context));
        } elseif (\array_key_exists('downwardAPI', $data) && $data['downwardAPI'] === null) {
            $object->setDownwardAPI(null);
        }
        if (\array_key_exists('secret', $data) && $data['secret'] !== null) {
            $object->setSecret($this->denormalizer->denormalize($data['secret'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SecretProjection::class, 'json', $context));
        } elseif (\array_key_exists('secret', $data) && $data['secret'] === null) {
            $object->setSecret(null);
        }
        if (\array_key_exists('serviceAccountToken', $data) && $data['serviceAccountToken'] !== null) {
            $object->setServiceAccountToken($this->denormalizer->denormalize($data['serviceAccountToken'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServiceAccountTokenProjection::class, 'json', $context));
        } elseif (\array_key_exists('serviceAccountToken', $data) && $data['serviceAccountToken'] === null) {
            $object->setServiceAccountToken(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('clusterTrustBundle') && null !== $data->getClusterTrustBundle()) {
            $dataArray['clusterTrustBundle'] = $this->normalizer->normalize($data->getClusterTrustBundle(), 'json', $context);
        }
        if ($data->isInitialized('configMap') && null !== $data->getConfigMap()) {
            $dataArray['configMap'] = $this->normalizer->normalize($data->getConfigMap(), 'json', $context);
        }
        if ($data->isInitialized('downwardAPI') && null !== $data->getDownwardAPI()) {
            $dataArray['downwardAPI'] = $this->normalizer->normalize($data->getDownwardAPI(), 'json', $context);
        }
        if ($data->isInitialized('secret') && null !== $data->getSecret()) {
            $dataArray['secret'] = $this->normalizer->normalize($data->getSecret(), 'json', $context);
        }
        if ($data->isInitialized('serviceAccountToken') && null !== $data->getServiceAccountToken()) {
            $dataArray['serviceAccountToken'] = $this->normalizer->normalize($data->getServiceAccountToken(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeProjection::class => false];
    }
}
