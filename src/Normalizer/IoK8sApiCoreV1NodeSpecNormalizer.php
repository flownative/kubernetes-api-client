<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1NodeSpecNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSpec::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSpec::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSpec();
        if (\array_key_exists('unschedulable', $data) && \is_int($data['unschedulable'])) {
            $data['unschedulable'] = (bool) $data['unschedulable'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('configSource', $data) && $data['configSource'] !== null) {
            $object->setConfigSource($this->denormalizer->denormalize($data['configSource'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeConfigSource::class, 'json', $context));
        } elseif (\array_key_exists('configSource', $data) && $data['configSource'] === null) {
            $object->setConfigSource(null);
        }
        if (\array_key_exists('externalID', $data) && $data['externalID'] !== null) {
            $object->setExternalID($data['externalID']);
        } elseif (\array_key_exists('externalID', $data) && $data['externalID'] === null) {
            $object->setExternalID(null);
        }
        if (\array_key_exists('podCIDR', $data) && $data['podCIDR'] !== null) {
            $object->setPodCIDR($data['podCIDR']);
        } elseif (\array_key_exists('podCIDR', $data) && $data['podCIDR'] === null) {
            $object->setPodCIDR(null);
        }
        if (\array_key_exists('podCIDRs', $data) && $data['podCIDRs'] !== null) {
            $values = [];
            foreach ($data['podCIDRs'] as $value) {
                $values[] = $value;
            }
            $object->setPodCIDRs($values);
        } elseif (\array_key_exists('podCIDRs', $data) && $data['podCIDRs'] === null) {
            $object->setPodCIDRs(null);
        }
        if (\array_key_exists('providerID', $data) && $data['providerID'] !== null) {
            $object->setProviderID($data['providerID']);
        } elseif (\array_key_exists('providerID', $data) && $data['providerID'] === null) {
            $object->setProviderID(null);
        }
        if (\array_key_exists('taints', $data) && $data['taints'] !== null) {
            $values_1 = [];
            foreach ($data['taints'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Taint::class, 'json', $context);
            }
            $object->setTaints($values_1);
        } elseif (\array_key_exists('taints', $data) && $data['taints'] === null) {
            $object->setTaints(null);
        }
        if (\array_key_exists('unschedulable', $data) && $data['unschedulable'] !== null) {
            $object->setUnschedulable($data['unschedulable']);
        } elseif (\array_key_exists('unschedulable', $data) && $data['unschedulable'] === null) {
            $object->setUnschedulable(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('configSource') && null !== $data->getConfigSource()) {
            $dataArray['configSource'] = $this->normalizer->normalize($data->getConfigSource(), 'json', $context);
        }
        if ($data->isInitialized('externalID') && null !== $data->getExternalID()) {
            $dataArray['externalID'] = $data->getExternalID();
        }
        if ($data->isInitialized('podCIDR') && null !== $data->getPodCIDR()) {
            $dataArray['podCIDR'] = $data->getPodCIDR();
        }
        if ($data->isInitialized('podCIDRs') && null !== $data->getPodCIDRs()) {
            $values = [];
            foreach ($data->getPodCIDRs() as $value) {
                $values[] = $value;
            }
            $dataArray['podCIDRs'] = $values;
        }
        if ($data->isInitialized('providerID') && null !== $data->getProviderID()) {
            $dataArray['providerID'] = $data->getProviderID();
        }
        if ($data->isInitialized('taints') && null !== $data->getTaints()) {
            $values_1 = [];
            foreach ($data->getTaints() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['taints'] = $values_1;
        }
        if ($data->isInitialized('unschedulable') && null !== $data->getUnschedulable()) {
            $dataArray['unschedulable'] = $data->getUnschedulable();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSpec::class => false];
    }
}
