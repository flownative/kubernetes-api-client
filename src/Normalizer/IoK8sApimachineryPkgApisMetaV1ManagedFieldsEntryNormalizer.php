<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('apiVersion', $data) && $data['apiVersion'] !== null) {
            $object->setApiVersion($data['apiVersion']);
        } elseif (\array_key_exists('apiVersion', $data) && $data['apiVersion'] === null) {
            $object->setApiVersion(null);
        }
        if (\array_key_exists('fieldsType', $data) && $data['fieldsType'] !== null) {
            $object->setFieldsType($data['fieldsType']);
        } elseif (\array_key_exists('fieldsType', $data) && $data['fieldsType'] === null) {
            $object->setFieldsType(null);
        }
        if (\array_key_exists('fieldsV1', $data) && $data['fieldsV1'] !== null) {
            $object->setFieldsV1($data['fieldsV1']);
        } elseif (\array_key_exists('fieldsV1', $data) && $data['fieldsV1'] === null) {
            $object->setFieldsV1(null);
        }
        if (\array_key_exists('manager', $data) && $data['manager'] !== null) {
            $object->setManager($data['manager']);
        } elseif (\array_key_exists('manager', $data) && $data['manager'] === null) {
            $object->setManager(null);
        }
        if (\array_key_exists('operation', $data) && $data['operation'] !== null) {
            $object->setOperation($data['operation']);
        } elseif (\array_key_exists('operation', $data) && $data['operation'] === null) {
            $object->setOperation(null);
        }
        if (\array_key_exists('subresource', $data) && $data['subresource'] !== null) {
            $object->setSubresource($data['subresource']);
        } elseif (\array_key_exists('subresource', $data) && $data['subresource'] === null) {
            $object->setSubresource(null);
        }
        if (\array_key_exists('time', $data) && $data['time'] !== null) {
            $object->setTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['time']));
        } elseif (\array_key_exists('time', $data) && $data['time'] === null) {
            $object->setTime(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('apiVersion') && null !== $data->getApiVersion()) {
            $dataArray['apiVersion'] = $data->getApiVersion();
        }
        if ($data->isInitialized('fieldsType') && null !== $data->getFieldsType()) {
            $dataArray['fieldsType'] = $data->getFieldsType();
        }
        if ($data->isInitialized('fieldsV1') && null !== $data->getFieldsV1()) {
            $dataArray['fieldsV1'] = $data->getFieldsV1();
        }
        if ($data->isInitialized('manager') && null !== $data->getManager()) {
            $dataArray['manager'] = $data->getManager();
        }
        if ($data->isInitialized('operation') && null !== $data->getOperation()) {
            $dataArray['operation'] = $data->getOperation();
        }
        if ($data->isInitialized('subresource') && null !== $data->getSubresource()) {
            $dataArray['subresource'] = $data->getSubresource();
        }
        if ($data->isInitialized('time') && null !== $data->getTime()) {
            $dataArray['time'] = $data->getTime()->format('Y-m-d\TH:i:s.vP');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry::class => false];
    }
}
