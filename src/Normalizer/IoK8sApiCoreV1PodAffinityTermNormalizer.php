<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PodAffinityTermNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodAffinityTerm::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodAffinityTerm::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodAffinityTerm();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('labelSelector', $data) && $data['labelSelector'] !== null) {
            $object->setLabelSelector($this->denormalizer->denormalize($data['labelSelector'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1LabelSelector::class, 'json', $context));
        } elseif (\array_key_exists('labelSelector', $data) && $data['labelSelector'] === null) {
            $object->setLabelSelector(null);
        }
        if (\array_key_exists('matchLabelKeys', $data) && $data['matchLabelKeys'] !== null) {
            $values = [];
            foreach ($data['matchLabelKeys'] as $value) {
                $values[] = $value;
            }
            $object->setMatchLabelKeys($values);
        } elseif (\array_key_exists('matchLabelKeys', $data) && $data['matchLabelKeys'] === null) {
            $object->setMatchLabelKeys(null);
        }
        if (\array_key_exists('mismatchLabelKeys', $data) && $data['mismatchLabelKeys'] !== null) {
            $values_1 = [];
            foreach ($data['mismatchLabelKeys'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setMismatchLabelKeys($values_1);
        } elseif (\array_key_exists('mismatchLabelKeys', $data) && $data['mismatchLabelKeys'] === null) {
            $object->setMismatchLabelKeys(null);
        }
        if (\array_key_exists('namespaceSelector', $data) && $data['namespaceSelector'] !== null) {
            $object->setNamespaceSelector($this->denormalizer->denormalize($data['namespaceSelector'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1LabelSelector::class, 'json', $context));
        } elseif (\array_key_exists('namespaceSelector', $data) && $data['namespaceSelector'] === null) {
            $object->setNamespaceSelector(null);
        }
        if (\array_key_exists('namespaces', $data) && $data['namespaces'] !== null) {
            $values_2 = [];
            foreach ($data['namespaces'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setNamespaces($values_2);
        } elseif (\array_key_exists('namespaces', $data) && $data['namespaces'] === null) {
            $object->setNamespaces(null);
        }
        if (\array_key_exists('topologyKey', $data) && $data['topologyKey'] !== null) {
            $object->setTopologyKey($data['topologyKey']);
        } elseif (\array_key_exists('topologyKey', $data) && $data['topologyKey'] === null) {
            $object->setTopologyKey(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('labelSelector') && null !== $data->getLabelSelector()) {
            $dataArray['labelSelector'] = $this->normalizer->normalize($data->getLabelSelector(), 'json', $context);
        }
        if ($data->isInitialized('matchLabelKeys') && null !== $data->getMatchLabelKeys()) {
            $values = [];
            foreach ($data->getMatchLabelKeys() as $value) {
                $values[] = $value;
            }
            $dataArray['matchLabelKeys'] = $values;
        }
        if ($data->isInitialized('mismatchLabelKeys') && null !== $data->getMismatchLabelKeys()) {
            $values_1 = [];
            foreach ($data->getMismatchLabelKeys() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['mismatchLabelKeys'] = $values_1;
        }
        if ($data->isInitialized('namespaceSelector') && null !== $data->getNamespaceSelector()) {
            $dataArray['namespaceSelector'] = $this->normalizer->normalize($data->getNamespaceSelector(), 'json', $context);
        }
        if ($data->isInitialized('namespaces') && null !== $data->getNamespaces()) {
            $values_2 = [];
            foreach ($data->getNamespaces() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['namespaces'] = $values_2;
        }
        $dataArray['topologyKey'] = $data->getTopologyKey();

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodAffinityTerm::class => false];
    }
}
