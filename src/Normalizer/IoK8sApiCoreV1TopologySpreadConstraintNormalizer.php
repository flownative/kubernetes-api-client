<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1TopologySpreadConstraintNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TopologySpreadConstraint::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TopologySpreadConstraint::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TopologySpreadConstraint();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('labelSelector', $data) && $data['labelSelector'] !== null) {
            $object->setLabelSelector($this->denormalizer->denormalize($data['labelSelector'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1LabelSelector::class, 'json', $context));
        } elseif (\array_key_exists('labelSelector', $data) && $data['labelSelector'] === null) {
            $object->setLabelSelector(null);
        }
        if (\array_key_exists('matchLabelKeys', $data) && $data['matchLabelKeys'] !== null) {
            $values = [];
            foreach ($data['matchLabelKeys'] as $value) {
                $values[] = $value;
            }
            $object->setMatchLabelKeys($values);
        } elseif (\array_key_exists('matchLabelKeys', $data) && $data['matchLabelKeys'] === null) {
            $object->setMatchLabelKeys(null);
        }
        if (\array_key_exists('maxSkew', $data) && $data['maxSkew'] !== null) {
            $object->setMaxSkew($data['maxSkew']);
        } elseif (\array_key_exists('maxSkew', $data) && $data['maxSkew'] === null) {
            $object->setMaxSkew(null);
        }
        if (\array_key_exists('minDomains', $data) && $data['minDomains'] !== null) {
            $object->setMinDomains($data['minDomains']);
        } elseif (\array_key_exists('minDomains', $data) && $data['minDomains'] === null) {
            $object->setMinDomains(null);
        }
        if (\array_key_exists('nodeAffinityPolicy', $data) && $data['nodeAffinityPolicy'] !== null) {
            $object->setNodeAffinityPolicy($data['nodeAffinityPolicy']);
        } elseif (\array_key_exists('nodeAffinityPolicy', $data) && $data['nodeAffinityPolicy'] === null) {
            $object->setNodeAffinityPolicy(null);
        }
        if (\array_key_exists('nodeTaintsPolicy', $data) && $data['nodeTaintsPolicy'] !== null) {
            $object->setNodeTaintsPolicy($data['nodeTaintsPolicy']);
        } elseif (\array_key_exists('nodeTaintsPolicy', $data) && $data['nodeTaintsPolicy'] === null) {
            $object->setNodeTaintsPolicy(null);
        }
        if (\array_key_exists('topologyKey', $data) && $data['topologyKey'] !== null) {
            $object->setTopologyKey($data['topologyKey']);
        } elseif (\array_key_exists('topologyKey', $data) && $data['topologyKey'] === null) {
            $object->setTopologyKey(null);
        }
        if (\array_key_exists('whenUnsatisfiable', $data) && $data['whenUnsatisfiable'] !== null) {
            $object->setWhenUnsatisfiable($data['whenUnsatisfiable']);
        } elseif (\array_key_exists('whenUnsatisfiable', $data) && $data['whenUnsatisfiable'] === null) {
            $object->setWhenUnsatisfiable(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('labelSelector') && null !== $data->getLabelSelector()) {
            $dataArray['labelSelector'] = $this->normalizer->normalize($data->getLabelSelector(), 'json', $context);
        }
        if ($data->isInitialized('matchLabelKeys') && null !== $data->getMatchLabelKeys()) {
            $values = [];
            foreach ($data->getMatchLabelKeys() as $value) {
                $values[] = $value;
            }
            $dataArray['matchLabelKeys'] = $values;
        }
        $dataArray['maxSkew'] = $data->getMaxSkew();
        if ($data->isInitialized('minDomains') && null !== $data->getMinDomains()) {
            $dataArray['minDomains'] = $data->getMinDomains();
        }
        if ($data->isInitialized('nodeAffinityPolicy') && null !== $data->getNodeAffinityPolicy()) {
            $dataArray['nodeAffinityPolicy'] = $data->getNodeAffinityPolicy();
        }
        if ($data->isInitialized('nodeTaintsPolicy') && null !== $data->getNodeTaintsPolicy()) {
            $dataArray['nodeTaintsPolicy'] = $data->getNodeTaintsPolicy();
        }
        $dataArray['topologyKey'] = $data->getTopologyKey();
        $dataArray['whenUnsatisfiable'] = $data->getWhenUnsatisfiable();

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TopologySpreadConstraint::class => false];
    }
}
