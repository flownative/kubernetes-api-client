<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiAppsV1DeploymentSpecNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentSpec::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentSpec::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentSpec();
        if (\array_key_exists('paused', $data) && \is_int($data['paused'])) {
            $data['paused'] = (bool) $data['paused'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('minReadySeconds', $data) && $data['minReadySeconds'] !== null) {
            $object->setMinReadySeconds($data['minReadySeconds']);
        } elseif (\array_key_exists('minReadySeconds', $data) && $data['minReadySeconds'] === null) {
            $object->setMinReadySeconds(null);
        }
        if (\array_key_exists('paused', $data) && $data['paused'] !== null) {
            $object->setPaused($data['paused']);
        } elseif (\array_key_exists('paused', $data) && $data['paused'] === null) {
            $object->setPaused(null);
        }
        if (\array_key_exists('progressDeadlineSeconds', $data) && $data['progressDeadlineSeconds'] !== null) {
            $object->setProgressDeadlineSeconds($data['progressDeadlineSeconds']);
        } elseif (\array_key_exists('progressDeadlineSeconds', $data) && $data['progressDeadlineSeconds'] === null) {
            $object->setProgressDeadlineSeconds(null);
        }
        if (\array_key_exists('replicas', $data) && $data['replicas'] !== null) {
            $object->setReplicas($data['replicas']);
        } elseif (\array_key_exists('replicas', $data) && $data['replicas'] === null) {
            $object->setReplicas(null);
        }
        if (\array_key_exists('revisionHistoryLimit', $data) && $data['revisionHistoryLimit'] !== null) {
            $object->setRevisionHistoryLimit($data['revisionHistoryLimit']);
        } elseif (\array_key_exists('revisionHistoryLimit', $data) && $data['revisionHistoryLimit'] === null) {
            $object->setRevisionHistoryLimit(null);
        }
        if (\array_key_exists('selector', $data) && $data['selector'] !== null) {
            $object->setSelector($this->denormalizer->denormalize($data['selector'], \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1LabelSelector::class, 'json', $context));
        } elseif (\array_key_exists('selector', $data) && $data['selector'] === null) {
            $object->setSelector(null);
        }
        if (\array_key_exists('strategy', $data) && $data['strategy'] !== null) {
            $object->setStrategy($this->denormalizer->denormalize($data['strategy'], \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentStrategy::class, 'json', $context));
        } elseif (\array_key_exists('strategy', $data) && $data['strategy'] === null) {
            $object->setStrategy(null);
        }
        if (\array_key_exists('template', $data) && $data['template'] !== null) {
            $object->setTemplate($this->denormalizer->denormalize($data['template'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodTemplateSpec::class, 'json', $context));
        } elseif (\array_key_exists('template', $data) && $data['template'] === null) {
            $object->setTemplate(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('minReadySeconds') && null !== $data->getMinReadySeconds()) {
            $dataArray['minReadySeconds'] = $data->getMinReadySeconds();
        }
        if ($data->isInitialized('paused') && null !== $data->getPaused()) {
            $dataArray['paused'] = $data->getPaused();
        }
        if ($data->isInitialized('progressDeadlineSeconds') && null !== $data->getProgressDeadlineSeconds()) {
            $dataArray['progressDeadlineSeconds'] = $data->getProgressDeadlineSeconds();
        }
        if ($data->isInitialized('replicas') && null !== $data->getReplicas()) {
            $dataArray['replicas'] = $data->getReplicas();
        }
        if ($data->isInitialized('revisionHistoryLimit') && null !== $data->getRevisionHistoryLimit()) {
            $dataArray['revisionHistoryLimit'] = $data->getRevisionHistoryLimit();
        }
        $dataArray['selector'] = $this->normalizer->normalize($data->getSelector(), 'json', $context);
        if ($data->isInitialized('strategy') && null !== $data->getStrategy()) {
            $dataArray['strategy'] = $this->normalizer->normalize($data->getStrategy(), 'json', $context);
        }
        $dataArray['template'] = $this->normalizer->normalize($data->getTemplate(), 'json', $context);

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentSpec::class => false];
    }
}
