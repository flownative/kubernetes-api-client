<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApimachineryPkgApisMetaV1ListMetaNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ListMeta::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ListMeta::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ListMeta();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('continue', $data) && $data['continue'] !== null) {
            $object->setContinue($data['continue']);
        } elseif (\array_key_exists('continue', $data) && $data['continue'] === null) {
            $object->setContinue(null);
        }
        if (\array_key_exists('remainingItemCount', $data) && $data['remainingItemCount'] !== null) {
            $object->setRemainingItemCount($data['remainingItemCount']);
        } elseif (\array_key_exists('remainingItemCount', $data) && $data['remainingItemCount'] === null) {
            $object->setRemainingItemCount(null);
        }
        if (\array_key_exists('resourceVersion', $data) && $data['resourceVersion'] !== null) {
            $object->setResourceVersion($data['resourceVersion']);
        } elseif (\array_key_exists('resourceVersion', $data) && $data['resourceVersion'] === null) {
            $object->setResourceVersion(null);
        }
        if (\array_key_exists('selfLink', $data) && $data['selfLink'] !== null) {
            $object->setSelfLink($data['selfLink']);
        } elseif (\array_key_exists('selfLink', $data) && $data['selfLink'] === null) {
            $object->setSelfLink(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('continue') && null !== $data->getContinue()) {
            $dataArray['continue'] = $data->getContinue();
        }
        if ($data->isInitialized('remainingItemCount') && null !== $data->getRemainingItemCount()) {
            $dataArray['remainingItemCount'] = $data->getRemainingItemCount();
        }
        if ($data->isInitialized('resourceVersion') && null !== $data->getResourceVersion()) {
            $dataArray['resourceVersion'] = $data->getResourceVersion();
        }
        if ($data->isInitialized('selfLink') && null !== $data->getSelfLink()) {
            $dataArray['selfLink'] = $data->getSelfLink();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ListMeta::class => false];
    }
}
