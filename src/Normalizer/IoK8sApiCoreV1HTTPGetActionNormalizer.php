<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1HTTPGetActionNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPGetAction::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPGetAction::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPGetAction();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('host', $data) && $data['host'] !== null) {
            $object->setHost($data['host']);
        } elseif (\array_key_exists('host', $data) && $data['host'] === null) {
            $object->setHost(null);
        }
        if (\array_key_exists('httpHeaders', $data) && $data['httpHeaders'] !== null) {
            $values = [];
            foreach ($data['httpHeaders'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPHeader::class, 'json', $context);
            }
            $object->setHttpHeaders($values);
        } elseif (\array_key_exists('httpHeaders', $data) && $data['httpHeaders'] === null) {
            $object->setHttpHeaders(null);
        }
        if (\array_key_exists('path', $data) && $data['path'] !== null) {
            $object->setPath($data['path']);
        } elseif (\array_key_exists('path', $data) && $data['path'] === null) {
            $object->setPath(null);
        }
        if (\array_key_exists('port', $data) && $data['port'] !== null) {
            $object->setPort($data['port']);
        } elseif (\array_key_exists('port', $data) && $data['port'] === null) {
            $object->setPort(null);
        }
        if (\array_key_exists('scheme', $data) && $data['scheme'] !== null) {
            $object->setScheme($data['scheme']);
        } elseif (\array_key_exists('scheme', $data) && $data['scheme'] === null) {
            $object->setScheme(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('host') && null !== $data->getHost()) {
            $dataArray['host'] = $data->getHost();
        }
        if ($data->isInitialized('httpHeaders') && null !== $data->getHttpHeaders()) {
            $values = [];
            foreach ($data->getHttpHeaders() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['httpHeaders'] = $values;
        }
        if ($data->isInitialized('path') && null !== $data->getPath()) {
            $dataArray['path'] = $data->getPath();
        }
        $dataArray['port'] = $data->getPort();
        if ($data->isInitialized('scheme') && null !== $data->getScheme()) {
            $dataArray['scheme'] = $data->getScheme();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPGetAction::class => false];
    }
}
