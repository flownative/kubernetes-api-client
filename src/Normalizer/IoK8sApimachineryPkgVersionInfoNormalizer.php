<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApimachineryPkgVersionInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgVersionInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgVersionInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgVersionInfo();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('buildDate', $data) && $data['buildDate'] !== null) {
            $object->setBuildDate($data['buildDate']);
        } elseif (\array_key_exists('buildDate', $data) && $data['buildDate'] === null) {
            $object->setBuildDate(null);
        }
        if (\array_key_exists('compiler', $data) && $data['compiler'] !== null) {
            $object->setCompiler($data['compiler']);
        } elseif (\array_key_exists('compiler', $data) && $data['compiler'] === null) {
            $object->setCompiler(null);
        }
        if (\array_key_exists('emulationMajor', $data) && $data['emulationMajor'] !== null) {
            $object->setEmulationMajor($data['emulationMajor']);
        } elseif (\array_key_exists('emulationMajor', $data) && $data['emulationMajor'] === null) {
            $object->setEmulationMajor(null);
        }
        if (\array_key_exists('emulationMinor', $data) && $data['emulationMinor'] !== null) {
            $object->setEmulationMinor($data['emulationMinor']);
        } elseif (\array_key_exists('emulationMinor', $data) && $data['emulationMinor'] === null) {
            $object->setEmulationMinor(null);
        }
        if (\array_key_exists('gitCommit', $data) && $data['gitCommit'] !== null) {
            $object->setGitCommit($data['gitCommit']);
        } elseif (\array_key_exists('gitCommit', $data) && $data['gitCommit'] === null) {
            $object->setGitCommit(null);
        }
        if (\array_key_exists('gitTreeState', $data) && $data['gitTreeState'] !== null) {
            $object->setGitTreeState($data['gitTreeState']);
        } elseif (\array_key_exists('gitTreeState', $data) && $data['gitTreeState'] === null) {
            $object->setGitTreeState(null);
        }
        if (\array_key_exists('gitVersion', $data) && $data['gitVersion'] !== null) {
            $object->setGitVersion($data['gitVersion']);
        } elseif (\array_key_exists('gitVersion', $data) && $data['gitVersion'] === null) {
            $object->setGitVersion(null);
        }
        if (\array_key_exists('goVersion', $data) && $data['goVersion'] !== null) {
            $object->setGoVersion($data['goVersion']);
        } elseif (\array_key_exists('goVersion', $data) && $data['goVersion'] === null) {
            $object->setGoVersion(null);
        }
        if (\array_key_exists('major', $data) && $data['major'] !== null) {
            $object->setMajor($data['major']);
        } elseif (\array_key_exists('major', $data) && $data['major'] === null) {
            $object->setMajor(null);
        }
        if (\array_key_exists('minCompatibilityMajor', $data) && $data['minCompatibilityMajor'] !== null) {
            $object->setMinCompatibilityMajor($data['minCompatibilityMajor']);
        } elseif (\array_key_exists('minCompatibilityMajor', $data) && $data['minCompatibilityMajor'] === null) {
            $object->setMinCompatibilityMajor(null);
        }
        if (\array_key_exists('minCompatibilityMinor', $data) && $data['minCompatibilityMinor'] !== null) {
            $object->setMinCompatibilityMinor($data['minCompatibilityMinor']);
        } elseif (\array_key_exists('minCompatibilityMinor', $data) && $data['minCompatibilityMinor'] === null) {
            $object->setMinCompatibilityMinor(null);
        }
        if (\array_key_exists('minor', $data) && $data['minor'] !== null) {
            $object->setMinor($data['minor']);
        } elseif (\array_key_exists('minor', $data) && $data['minor'] === null) {
            $object->setMinor(null);
        }
        if (\array_key_exists('platform', $data) && $data['platform'] !== null) {
            $object->setPlatform($data['platform']);
        } elseif (\array_key_exists('platform', $data) && $data['platform'] === null) {
            $object->setPlatform(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['buildDate'] = $data->getBuildDate();
        $dataArray['compiler'] = $data->getCompiler();
        if ($data->isInitialized('emulationMajor') && null !== $data->getEmulationMajor()) {
            $dataArray['emulationMajor'] = $data->getEmulationMajor();
        }
        if ($data->isInitialized('emulationMinor') && null !== $data->getEmulationMinor()) {
            $dataArray['emulationMinor'] = $data->getEmulationMinor();
        }
        $dataArray['gitCommit'] = $data->getGitCommit();
        $dataArray['gitTreeState'] = $data->getGitTreeState();
        $dataArray['gitVersion'] = $data->getGitVersion();
        $dataArray['goVersion'] = $data->getGoVersion();
        $dataArray['major'] = $data->getMajor();
        if ($data->isInitialized('minCompatibilityMajor') && null !== $data->getMinCompatibilityMajor()) {
            $dataArray['minCompatibilityMajor'] = $data->getMinCompatibilityMajor();
        }
        if ($data->isInitialized('minCompatibilityMinor') && null !== $data->getMinCompatibilityMinor()) {
            $dataArray['minCompatibilityMinor'] = $data->getMinCompatibilityMinor();
        }
        $dataArray['minor'] = $data->getMinor();
        $dataArray['platform'] = $data->getPlatform();

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgVersionInfo::class => false];
    }
}
