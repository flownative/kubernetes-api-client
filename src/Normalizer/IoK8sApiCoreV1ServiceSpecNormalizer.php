<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ServiceSpecNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServiceSpec::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServiceSpec::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServiceSpec();
        if (\array_key_exists('allocateLoadBalancerNodePorts', $data) && \is_int($data['allocateLoadBalancerNodePorts'])) {
            $data['allocateLoadBalancerNodePorts'] = (bool) $data['allocateLoadBalancerNodePorts'];
        }
        if (\array_key_exists('publishNotReadyAddresses', $data) && \is_int($data['publishNotReadyAddresses'])) {
            $data['publishNotReadyAddresses'] = (bool) $data['publishNotReadyAddresses'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('allocateLoadBalancerNodePorts', $data) && $data['allocateLoadBalancerNodePorts'] !== null) {
            $object->setAllocateLoadBalancerNodePorts($data['allocateLoadBalancerNodePorts']);
        } elseif (\array_key_exists('allocateLoadBalancerNodePorts', $data) && $data['allocateLoadBalancerNodePorts'] === null) {
            $object->setAllocateLoadBalancerNodePorts(null);
        }
        if (\array_key_exists('clusterIP', $data) && $data['clusterIP'] !== null) {
            $object->setClusterIP($data['clusterIP']);
        } elseif (\array_key_exists('clusterIP', $data) && $data['clusterIP'] === null) {
            $object->setClusterIP(null);
        }
        if (\array_key_exists('clusterIPs', $data) && $data['clusterIPs'] !== null) {
            $values = [];
            foreach ($data['clusterIPs'] as $value) {
                $values[] = $value;
            }
            $object->setClusterIPs($values);
        } elseif (\array_key_exists('clusterIPs', $data) && $data['clusterIPs'] === null) {
            $object->setClusterIPs(null);
        }
        if (\array_key_exists('externalIPs', $data) && $data['externalIPs'] !== null) {
            $values_1 = [];
            foreach ($data['externalIPs'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setExternalIPs($values_1);
        } elseif (\array_key_exists('externalIPs', $data) && $data['externalIPs'] === null) {
            $object->setExternalIPs(null);
        }
        if (\array_key_exists('externalName', $data) && $data['externalName'] !== null) {
            $object->setExternalName($data['externalName']);
        } elseif (\array_key_exists('externalName', $data) && $data['externalName'] === null) {
            $object->setExternalName(null);
        }
        if (\array_key_exists('externalTrafficPolicy', $data) && $data['externalTrafficPolicy'] !== null) {
            $object->setExternalTrafficPolicy($data['externalTrafficPolicy']);
        } elseif (\array_key_exists('externalTrafficPolicy', $data) && $data['externalTrafficPolicy'] === null) {
            $object->setExternalTrafficPolicy(null);
        }
        if (\array_key_exists('healthCheckNodePort', $data) && $data['healthCheckNodePort'] !== null) {
            $object->setHealthCheckNodePort($data['healthCheckNodePort']);
        } elseif (\array_key_exists('healthCheckNodePort', $data) && $data['healthCheckNodePort'] === null) {
            $object->setHealthCheckNodePort(null);
        }
        if (\array_key_exists('internalTrafficPolicy', $data) && $data['internalTrafficPolicy'] !== null) {
            $object->setInternalTrafficPolicy($data['internalTrafficPolicy']);
        } elseif (\array_key_exists('internalTrafficPolicy', $data) && $data['internalTrafficPolicy'] === null) {
            $object->setInternalTrafficPolicy(null);
        }
        if (\array_key_exists('ipFamilies', $data) && $data['ipFamilies'] !== null) {
            $values_2 = [];
            foreach ($data['ipFamilies'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setIpFamilies($values_2);
        } elseif (\array_key_exists('ipFamilies', $data) && $data['ipFamilies'] === null) {
            $object->setIpFamilies(null);
        }
        if (\array_key_exists('ipFamilyPolicy', $data) && $data['ipFamilyPolicy'] !== null) {
            $object->setIpFamilyPolicy($data['ipFamilyPolicy']);
        } elseif (\array_key_exists('ipFamilyPolicy', $data) && $data['ipFamilyPolicy'] === null) {
            $object->setIpFamilyPolicy(null);
        }
        if (\array_key_exists('loadBalancerClass', $data) && $data['loadBalancerClass'] !== null) {
            $object->setLoadBalancerClass($data['loadBalancerClass']);
        } elseif (\array_key_exists('loadBalancerClass', $data) && $data['loadBalancerClass'] === null) {
            $object->setLoadBalancerClass(null);
        }
        if (\array_key_exists('loadBalancerIP', $data) && $data['loadBalancerIP'] !== null) {
            $object->setLoadBalancerIP($data['loadBalancerIP']);
        } elseif (\array_key_exists('loadBalancerIP', $data) && $data['loadBalancerIP'] === null) {
            $object->setLoadBalancerIP(null);
        }
        if (\array_key_exists('loadBalancerSourceRanges', $data) && $data['loadBalancerSourceRanges'] !== null) {
            $values_3 = [];
            foreach ($data['loadBalancerSourceRanges'] as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setLoadBalancerSourceRanges($values_3);
        } elseif (\array_key_exists('loadBalancerSourceRanges', $data) && $data['loadBalancerSourceRanges'] === null) {
            $object->setLoadBalancerSourceRanges(null);
        }
        if (\array_key_exists('ports', $data) && $data['ports'] !== null) {
            $values_4 = [];
            foreach ($data['ports'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServicePort::class, 'json', $context);
            }
            $object->setPorts($values_4);
        } elseif (\array_key_exists('ports', $data) && $data['ports'] === null) {
            $object->setPorts(null);
        }
        if (\array_key_exists('publishNotReadyAddresses', $data) && $data['publishNotReadyAddresses'] !== null) {
            $object->setPublishNotReadyAddresses($data['publishNotReadyAddresses']);
        } elseif (\array_key_exists('publishNotReadyAddresses', $data) && $data['publishNotReadyAddresses'] === null) {
            $object->setPublishNotReadyAddresses(null);
        }
        if (\array_key_exists('selector', $data) && $data['selector'] !== null) {
            $values_5 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['selector'] as $key => $value_5) {
                $values_5[$key] = $value_5;
            }
            $object->setSelector($values_5);
        } elseif (\array_key_exists('selector', $data) && $data['selector'] === null) {
            $object->setSelector(null);
        }
        if (\array_key_exists('sessionAffinity', $data) && $data['sessionAffinity'] !== null) {
            $object->setSessionAffinity($data['sessionAffinity']);
        } elseif (\array_key_exists('sessionAffinity', $data) && $data['sessionAffinity'] === null) {
            $object->setSessionAffinity(null);
        }
        if (\array_key_exists('sessionAffinityConfig', $data) && $data['sessionAffinityConfig'] !== null) {
            $object->setSessionAffinityConfig($this->denormalizer->denormalize($data['sessionAffinityConfig'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SessionAffinityConfig::class, 'json', $context));
        } elseif (\array_key_exists('sessionAffinityConfig', $data) && $data['sessionAffinityConfig'] === null) {
            $object->setSessionAffinityConfig(null);
        }
        if (\array_key_exists('trafficDistribution', $data) && $data['trafficDistribution'] !== null) {
            $object->setTrafficDistribution($data['trafficDistribution']);
        } elseif (\array_key_exists('trafficDistribution', $data) && $data['trafficDistribution'] === null) {
            $object->setTrafficDistribution(null);
        }
        if (\array_key_exists('type', $data) && $data['type'] !== null) {
            $object->setType($data['type']);
        } elseif (\array_key_exists('type', $data) && $data['type'] === null) {
            $object->setType(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('allocateLoadBalancerNodePorts') && null !== $data->getAllocateLoadBalancerNodePorts()) {
            $dataArray['allocateLoadBalancerNodePorts'] = $data->getAllocateLoadBalancerNodePorts();
        }
        if ($data->isInitialized('clusterIP') && null !== $data->getClusterIP()) {
            $dataArray['clusterIP'] = $data->getClusterIP();
        }
        if ($data->isInitialized('clusterIPs') && null !== $data->getClusterIPs()) {
            $values = [];
            foreach ($data->getClusterIPs() as $value) {
                $values[] = $value;
            }
            $dataArray['clusterIPs'] = $values;
        }
        if ($data->isInitialized('externalIPs') && null !== $data->getExternalIPs()) {
            $values_1 = [];
            foreach ($data->getExternalIPs() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['externalIPs'] = $values_1;
        }
        if ($data->isInitialized('externalName') && null !== $data->getExternalName()) {
            $dataArray['externalName'] = $data->getExternalName();
        }
        if ($data->isInitialized('externalTrafficPolicy') && null !== $data->getExternalTrafficPolicy()) {
            $dataArray['externalTrafficPolicy'] = $data->getExternalTrafficPolicy();
        }
        if ($data->isInitialized('healthCheckNodePort') && null !== $data->getHealthCheckNodePort()) {
            $dataArray['healthCheckNodePort'] = $data->getHealthCheckNodePort();
        }
        if ($data->isInitialized('internalTrafficPolicy') && null !== $data->getInternalTrafficPolicy()) {
            $dataArray['internalTrafficPolicy'] = $data->getInternalTrafficPolicy();
        }
        if ($data->isInitialized('ipFamilies') && null !== $data->getIpFamilies()) {
            $values_2 = [];
            foreach ($data->getIpFamilies() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['ipFamilies'] = $values_2;
        }
        if ($data->isInitialized('ipFamilyPolicy') && null !== $data->getIpFamilyPolicy()) {
            $dataArray['ipFamilyPolicy'] = $data->getIpFamilyPolicy();
        }
        if ($data->isInitialized('loadBalancerClass') && null !== $data->getLoadBalancerClass()) {
            $dataArray['loadBalancerClass'] = $data->getLoadBalancerClass();
        }
        if ($data->isInitialized('loadBalancerIP') && null !== $data->getLoadBalancerIP()) {
            $dataArray['loadBalancerIP'] = $data->getLoadBalancerIP();
        }
        if ($data->isInitialized('loadBalancerSourceRanges') && null !== $data->getLoadBalancerSourceRanges()) {
            $values_3 = [];
            foreach ($data->getLoadBalancerSourceRanges() as $value_3) {
                $values_3[] = $value_3;
            }
            $dataArray['loadBalancerSourceRanges'] = $values_3;
        }
        if ($data->isInitialized('ports') && null !== $data->getPorts()) {
            $values_4 = [];
            foreach ($data->getPorts() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['ports'] = $values_4;
        }
        if ($data->isInitialized('publishNotReadyAddresses') && null !== $data->getPublishNotReadyAddresses()) {
            $dataArray['publishNotReadyAddresses'] = $data->getPublishNotReadyAddresses();
        }
        if ($data->isInitialized('selector') && null !== $data->getSelector()) {
            $values_5 = [];
            foreach ($data->getSelector() as $key => $value_5) {
                $values_5[$key] = $value_5;
            }
            $dataArray['selector'] = $values_5;
        }
        if ($data->isInitialized('sessionAffinity') && null !== $data->getSessionAffinity()) {
            $dataArray['sessionAffinity'] = $data->getSessionAffinity();
        }
        if ($data->isInitialized('sessionAffinityConfig') && null !== $data->getSessionAffinityConfig()) {
            $dataArray['sessionAffinityConfig'] = $this->normalizer->normalize($data->getSessionAffinityConfig(), 'json', $context);
        }
        if ($data->isInitialized('trafficDistribution') && null !== $data->getTrafficDistribution()) {
            $dataArray['trafficDistribution'] = $data->getTrafficDistribution();
        }
        if ($data->isInitialized('type') && null !== $data->getType()) {
            $dataArray['type'] = $data->getType();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ServiceSpec::class => false];
    }
}
