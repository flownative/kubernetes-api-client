<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PodSecurityContextNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSecurityContext::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSecurityContext::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSecurityContext();
        if (\array_key_exists('runAsNonRoot', $data) && \is_int($data['runAsNonRoot'])) {
            $data['runAsNonRoot'] = (bool) $data['runAsNonRoot'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('appArmorProfile', $data) && $data['appArmorProfile'] !== null) {
            $object->setAppArmorProfile($this->denormalizer->denormalize($data['appArmorProfile'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1AppArmorProfile::class, 'json', $context));
        } elseif (\array_key_exists('appArmorProfile', $data) && $data['appArmorProfile'] === null) {
            $object->setAppArmorProfile(null);
        }
        if (\array_key_exists('fsGroup', $data) && $data['fsGroup'] !== null) {
            $object->setFsGroup($data['fsGroup']);
        } elseif (\array_key_exists('fsGroup', $data) && $data['fsGroup'] === null) {
            $object->setFsGroup(null);
        }
        if (\array_key_exists('fsGroupChangePolicy', $data) && $data['fsGroupChangePolicy'] !== null) {
            $object->setFsGroupChangePolicy($data['fsGroupChangePolicy']);
        } elseif (\array_key_exists('fsGroupChangePolicy', $data) && $data['fsGroupChangePolicy'] === null) {
            $object->setFsGroupChangePolicy(null);
        }
        if (\array_key_exists('runAsGroup', $data) && $data['runAsGroup'] !== null) {
            $object->setRunAsGroup($data['runAsGroup']);
        } elseif (\array_key_exists('runAsGroup', $data) && $data['runAsGroup'] === null) {
            $object->setRunAsGroup(null);
        }
        if (\array_key_exists('runAsNonRoot', $data) && $data['runAsNonRoot'] !== null) {
            $object->setRunAsNonRoot($data['runAsNonRoot']);
        } elseif (\array_key_exists('runAsNonRoot', $data) && $data['runAsNonRoot'] === null) {
            $object->setRunAsNonRoot(null);
        }
        if (\array_key_exists('runAsUser', $data) && $data['runAsUser'] !== null) {
            $object->setRunAsUser($data['runAsUser']);
        } elseif (\array_key_exists('runAsUser', $data) && $data['runAsUser'] === null) {
            $object->setRunAsUser(null);
        }
        if (\array_key_exists('seLinuxChangePolicy', $data) && $data['seLinuxChangePolicy'] !== null) {
            $object->setSeLinuxChangePolicy($data['seLinuxChangePolicy']);
        } elseif (\array_key_exists('seLinuxChangePolicy', $data) && $data['seLinuxChangePolicy'] === null) {
            $object->setSeLinuxChangePolicy(null);
        }
        if (\array_key_exists('seLinuxOptions', $data) && $data['seLinuxOptions'] !== null) {
            $object->setSeLinuxOptions($this->denormalizer->denormalize($data['seLinuxOptions'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SELinuxOptions::class, 'json', $context));
        } elseif (\array_key_exists('seLinuxOptions', $data) && $data['seLinuxOptions'] === null) {
            $object->setSeLinuxOptions(null);
        }
        if (\array_key_exists('seccompProfile', $data) && $data['seccompProfile'] !== null) {
            $object->setSeccompProfile($this->denormalizer->denormalize($data['seccompProfile'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SeccompProfile::class, 'json', $context));
        } elseif (\array_key_exists('seccompProfile', $data) && $data['seccompProfile'] === null) {
            $object->setSeccompProfile(null);
        }
        if (\array_key_exists('supplementalGroups', $data) && $data['supplementalGroups'] !== null) {
            $values = [];
            foreach ($data['supplementalGroups'] as $value) {
                $values[] = $value;
            }
            $object->setSupplementalGroups($values);
        } elseif (\array_key_exists('supplementalGroups', $data) && $data['supplementalGroups'] === null) {
            $object->setSupplementalGroups(null);
        }
        if (\array_key_exists('supplementalGroupsPolicy', $data) && $data['supplementalGroupsPolicy'] !== null) {
            $object->setSupplementalGroupsPolicy($data['supplementalGroupsPolicy']);
        } elseif (\array_key_exists('supplementalGroupsPolicy', $data) && $data['supplementalGroupsPolicy'] === null) {
            $object->setSupplementalGroupsPolicy(null);
        }
        if (\array_key_exists('sysctls', $data) && $data['sysctls'] !== null) {
            $values_1 = [];
            foreach ($data['sysctls'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Sysctl::class, 'json', $context);
            }
            $object->setSysctls($values_1);
        } elseif (\array_key_exists('sysctls', $data) && $data['sysctls'] === null) {
            $object->setSysctls(null);
        }
        if (\array_key_exists('windowsOptions', $data) && $data['windowsOptions'] !== null) {
            $object->setWindowsOptions($this->denormalizer->denormalize($data['windowsOptions'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1WindowsSecurityContextOptions::class, 'json', $context));
        } elseif (\array_key_exists('windowsOptions', $data) && $data['windowsOptions'] === null) {
            $object->setWindowsOptions(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('appArmorProfile') && null !== $data->getAppArmorProfile()) {
            $dataArray['appArmorProfile'] = $this->normalizer->normalize($data->getAppArmorProfile(), 'json', $context);
        }
        if ($data->isInitialized('fsGroup') && null !== $data->getFsGroup()) {
            $dataArray['fsGroup'] = $data->getFsGroup();
        }
        if ($data->isInitialized('fsGroupChangePolicy') && null !== $data->getFsGroupChangePolicy()) {
            $dataArray['fsGroupChangePolicy'] = $data->getFsGroupChangePolicy();
        }
        if ($data->isInitialized('runAsGroup') && null !== $data->getRunAsGroup()) {
            $dataArray['runAsGroup'] = $data->getRunAsGroup();
        }
        if ($data->isInitialized('runAsNonRoot') && null !== $data->getRunAsNonRoot()) {
            $dataArray['runAsNonRoot'] = $data->getRunAsNonRoot();
        }
        if ($data->isInitialized('runAsUser') && null !== $data->getRunAsUser()) {
            $dataArray['runAsUser'] = $data->getRunAsUser();
        }
        if ($data->isInitialized('seLinuxChangePolicy') && null !== $data->getSeLinuxChangePolicy()) {
            $dataArray['seLinuxChangePolicy'] = $data->getSeLinuxChangePolicy();
        }
        if ($data->isInitialized('seLinuxOptions') && null !== $data->getSeLinuxOptions()) {
            $dataArray['seLinuxOptions'] = $this->normalizer->normalize($data->getSeLinuxOptions(), 'json', $context);
        }
        if ($data->isInitialized('seccompProfile') && null !== $data->getSeccompProfile()) {
            $dataArray['seccompProfile'] = $this->normalizer->normalize($data->getSeccompProfile(), 'json', $context);
        }
        if ($data->isInitialized('supplementalGroups') && null !== $data->getSupplementalGroups()) {
            $values = [];
            foreach ($data->getSupplementalGroups() as $value) {
                $values[] = $value;
            }
            $dataArray['supplementalGroups'] = $values;
        }
        if ($data->isInitialized('supplementalGroupsPolicy') && null !== $data->getSupplementalGroupsPolicy()) {
            $dataArray['supplementalGroupsPolicy'] = $data->getSupplementalGroupsPolicy();
        }
        if ($data->isInitialized('sysctls') && null !== $data->getSysctls()) {
            $values_1 = [];
            foreach ($data->getSysctls() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['sysctls'] = $values_1;
        }
        if ($data->isInitialized('windowsOptions') && null !== $data->getWindowsOptions()) {
            $dataArray['windowsOptions'] = $this->normalizer->normalize($data->getWindowsOptions(), 'json', $context);
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSecurityContext::class => false];
    }
}
