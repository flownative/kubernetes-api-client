<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ContainerNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container();
        if (\array_key_exists('stdin', $data) && \is_int($data['stdin'])) {
            $data['stdin'] = (bool) $data['stdin'];
        }
        if (\array_key_exists('stdinOnce', $data) && \is_int($data['stdinOnce'])) {
            $data['stdinOnce'] = (bool) $data['stdinOnce'];
        }
        if (\array_key_exists('tty', $data) && \is_int($data['tty'])) {
            $data['tty'] = (bool) $data['tty'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('args', $data) && $data['args'] !== null) {
            $values = [];
            foreach ($data['args'] as $value) {
                $values[] = $value;
            }
            $object->setArgs($values);
        } elseif (\array_key_exists('args', $data) && $data['args'] === null) {
            $object->setArgs(null);
        }
        if (\array_key_exists('command', $data) && $data['command'] !== null) {
            $values_1 = [];
            foreach ($data['command'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCommand($values_1);
        } elseif (\array_key_exists('command', $data) && $data['command'] === null) {
            $object->setCommand(null);
        }
        if (\array_key_exists('env', $data) && $data['env'] !== null) {
            $values_2 = [];
            foreach ($data['env'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvVar::class, 'json', $context);
            }
            $object->setEnv($values_2);
        } elseif (\array_key_exists('env', $data) && $data['env'] === null) {
            $object->setEnv(null);
        }
        if (\array_key_exists('envFrom', $data) && $data['envFrom'] !== null) {
            $values_3 = [];
            foreach ($data['envFrom'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EnvFromSource::class, 'json', $context);
            }
            $object->setEnvFrom($values_3);
        } elseif (\array_key_exists('envFrom', $data) && $data['envFrom'] === null) {
            $object->setEnvFrom(null);
        }
        if (\array_key_exists('image', $data) && $data['image'] !== null) {
            $object->setImage($data['image']);
        } elseif (\array_key_exists('image', $data) && $data['image'] === null) {
            $object->setImage(null);
        }
        if (\array_key_exists('imagePullPolicy', $data) && $data['imagePullPolicy'] !== null) {
            $object->setImagePullPolicy($data['imagePullPolicy']);
        } elseif (\array_key_exists('imagePullPolicy', $data) && $data['imagePullPolicy'] === null) {
            $object->setImagePullPolicy(null);
        }
        if (\array_key_exists('lifecycle', $data) && $data['lifecycle'] !== null) {
            $object->setLifecycle($this->denormalizer->denormalize($data['lifecycle'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Lifecycle::class, 'json', $context));
        } elseif (\array_key_exists('lifecycle', $data) && $data['lifecycle'] === null) {
            $object->setLifecycle(null);
        }
        if (\array_key_exists('livenessProbe', $data) && $data['livenessProbe'] !== null) {
            $object->setLivenessProbe($this->denormalizer->denormalize($data['livenessProbe'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class, 'json', $context));
        } elseif (\array_key_exists('livenessProbe', $data) && $data['livenessProbe'] === null) {
            $object->setLivenessProbe(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('ports', $data) && $data['ports'] !== null) {
            $values_4 = [];
            foreach ($data['ports'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerPort::class, 'json', $context);
            }
            $object->setPorts($values_4);
        } elseif (\array_key_exists('ports', $data) && $data['ports'] === null) {
            $object->setPorts(null);
        }
        if (\array_key_exists('readinessProbe', $data) && $data['readinessProbe'] !== null) {
            $object->setReadinessProbe($this->denormalizer->denormalize($data['readinessProbe'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class, 'json', $context));
        } elseif (\array_key_exists('readinessProbe', $data) && $data['readinessProbe'] === null) {
            $object->setReadinessProbe(null);
        }
        if (\array_key_exists('resizePolicy', $data) && $data['resizePolicy'] !== null) {
            $values_5 = [];
            foreach ($data['resizePolicy'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerResizePolicy::class, 'json', $context);
            }
            $object->setResizePolicy($values_5);
        } elseif (\array_key_exists('resizePolicy', $data) && $data['resizePolicy'] === null) {
            $object->setResizePolicy(null);
        }
        if (\array_key_exists('resources', $data) && $data['resources'] !== null) {
            $object->setResources($this->denormalizer->denormalize($data['resources'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ResourceRequirements::class, 'json', $context));
        } elseif (\array_key_exists('resources', $data) && $data['resources'] === null) {
            $object->setResources(null);
        }
        if (\array_key_exists('restartPolicy', $data) && $data['restartPolicy'] !== null) {
            $object->setRestartPolicy($data['restartPolicy']);
        } elseif (\array_key_exists('restartPolicy', $data) && $data['restartPolicy'] === null) {
            $object->setRestartPolicy(null);
        }
        if (\array_key_exists('securityContext', $data) && $data['securityContext'] !== null) {
            $object->setSecurityContext($this->denormalizer->denormalize($data['securityContext'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1SecurityContext::class, 'json', $context));
        } elseif (\array_key_exists('securityContext', $data) && $data['securityContext'] === null) {
            $object->setSecurityContext(null);
        }
        if (\array_key_exists('startupProbe', $data) && $data['startupProbe'] !== null) {
            $object->setStartupProbe($this->denormalizer->denormalize($data['startupProbe'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class, 'json', $context));
        } elseif (\array_key_exists('startupProbe', $data) && $data['startupProbe'] === null) {
            $object->setStartupProbe(null);
        }
        if (\array_key_exists('stdin', $data) && $data['stdin'] !== null) {
            $object->setStdin($data['stdin']);
        } elseif (\array_key_exists('stdin', $data) && $data['stdin'] === null) {
            $object->setStdin(null);
        }
        if (\array_key_exists('stdinOnce', $data) && $data['stdinOnce'] !== null) {
            $object->setStdinOnce($data['stdinOnce']);
        } elseif (\array_key_exists('stdinOnce', $data) && $data['stdinOnce'] === null) {
            $object->setStdinOnce(null);
        }
        if (\array_key_exists('terminationMessagePath', $data) && $data['terminationMessagePath'] !== null) {
            $object->setTerminationMessagePath($data['terminationMessagePath']);
        } elseif (\array_key_exists('terminationMessagePath', $data) && $data['terminationMessagePath'] === null) {
            $object->setTerminationMessagePath(null);
        }
        if (\array_key_exists('terminationMessagePolicy', $data) && $data['terminationMessagePolicy'] !== null) {
            $object->setTerminationMessagePolicy($data['terminationMessagePolicy']);
        } elseif (\array_key_exists('terminationMessagePolicy', $data) && $data['terminationMessagePolicy'] === null) {
            $object->setTerminationMessagePolicy(null);
        }
        if (\array_key_exists('tty', $data) && $data['tty'] !== null) {
            $object->setTty($data['tty']);
        } elseif (\array_key_exists('tty', $data) && $data['tty'] === null) {
            $object->setTty(null);
        }
        if (\array_key_exists('volumeDevices', $data) && $data['volumeDevices'] !== null) {
            $values_6 = [];
            foreach ($data['volumeDevices'] as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeDevice::class, 'json', $context);
            }
            $object->setVolumeDevices($values_6);
        } elseif (\array_key_exists('volumeDevices', $data) && $data['volumeDevices'] === null) {
            $object->setVolumeDevices(null);
        }
        if (\array_key_exists('volumeMounts', $data) && $data['volumeMounts'] !== null) {
            $values_7 = [];
            foreach ($data['volumeMounts'] as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMount::class, 'json', $context);
            }
            $object->setVolumeMounts($values_7);
        } elseif (\array_key_exists('volumeMounts', $data) && $data['volumeMounts'] === null) {
            $object->setVolumeMounts(null);
        }
        if (\array_key_exists('workingDir', $data) && $data['workingDir'] !== null) {
            $object->setWorkingDir($data['workingDir']);
        } elseif (\array_key_exists('workingDir', $data) && $data['workingDir'] === null) {
            $object->setWorkingDir(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('args') && null !== $data->getArgs()) {
            $values = [];
            foreach ($data->getArgs() as $value) {
                $values[] = $value;
            }
            $dataArray['args'] = $values;
        }
        if ($data->isInitialized('command') && null !== $data->getCommand()) {
            $values_1 = [];
            foreach ($data->getCommand() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['command'] = $values_1;
        }
        if ($data->isInitialized('env') && null !== $data->getEnv()) {
            $values_2 = [];
            foreach ($data->getEnv() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['env'] = $values_2;
        }
        if ($data->isInitialized('envFrom') && null !== $data->getEnvFrom()) {
            $values_3 = [];
            foreach ($data->getEnvFrom() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $dataArray['envFrom'] = $values_3;
        }
        if ($data->isInitialized('image') && null !== $data->getImage()) {
            $dataArray['image'] = $data->getImage();
        }
        if ($data->isInitialized('imagePullPolicy') && null !== $data->getImagePullPolicy()) {
            $dataArray['imagePullPolicy'] = $data->getImagePullPolicy();
        }
        if ($data->isInitialized('lifecycle') && null !== $data->getLifecycle()) {
            $dataArray['lifecycle'] = $this->normalizer->normalize($data->getLifecycle(), 'json', $context);
        }
        if ($data->isInitialized('livenessProbe') && null !== $data->getLivenessProbe()) {
            $dataArray['livenessProbe'] = $this->normalizer->normalize($data->getLivenessProbe(), 'json', $context);
        }
        $dataArray['name'] = $data->getName();
        if ($data->isInitialized('ports') && null !== $data->getPorts()) {
            $values_4 = [];
            foreach ($data->getPorts() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['ports'] = $values_4;
        }
        if ($data->isInitialized('readinessProbe') && null !== $data->getReadinessProbe()) {
            $dataArray['readinessProbe'] = $this->normalizer->normalize($data->getReadinessProbe(), 'json', $context);
        }
        if ($data->isInitialized('resizePolicy') && null !== $data->getResizePolicy()) {
            $values_5 = [];
            foreach ($data->getResizePolicy() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $dataArray['resizePolicy'] = $values_5;
        }
        if ($data->isInitialized('resources') && null !== $data->getResources()) {
            $dataArray['resources'] = $this->normalizer->normalize($data->getResources(), 'json', $context);
        }
        if ($data->isInitialized('restartPolicy') && null !== $data->getRestartPolicy()) {
            $dataArray['restartPolicy'] = $data->getRestartPolicy();
        }
        if ($data->isInitialized('securityContext') && null !== $data->getSecurityContext()) {
            $dataArray['securityContext'] = $this->normalizer->normalize($data->getSecurityContext(), 'json', $context);
        }
        if ($data->isInitialized('startupProbe') && null !== $data->getStartupProbe()) {
            $dataArray['startupProbe'] = $this->normalizer->normalize($data->getStartupProbe(), 'json', $context);
        }
        if ($data->isInitialized('stdin') && null !== $data->getStdin()) {
            $dataArray['stdin'] = $data->getStdin();
        }
        if ($data->isInitialized('stdinOnce') && null !== $data->getStdinOnce()) {
            $dataArray['stdinOnce'] = $data->getStdinOnce();
        }
        if ($data->isInitialized('terminationMessagePath') && null !== $data->getTerminationMessagePath()) {
            $dataArray['terminationMessagePath'] = $data->getTerminationMessagePath();
        }
        if ($data->isInitialized('terminationMessagePolicy') && null !== $data->getTerminationMessagePolicy()) {
            $dataArray['terminationMessagePolicy'] = $data->getTerminationMessagePolicy();
        }
        if ($data->isInitialized('tty') && null !== $data->getTty()) {
            $dataArray['tty'] = $data->getTty();
        }
        if ($data->isInitialized('volumeDevices') && null !== $data->getVolumeDevices()) {
            $values_6 = [];
            foreach ($data->getVolumeDevices() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $dataArray['volumeDevices'] = $values_6;
        }
        if ($data->isInitialized('volumeMounts') && null !== $data->getVolumeMounts()) {
            $values_7 = [];
            foreach ($data->getVolumeMounts() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $dataArray['volumeMounts'] = $values_7;
        }
        if ($data->isInitialized('workingDir') && null !== $data->getWorkingDir()) {
            $dataArray['workingDir'] = $data->getWorkingDir();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container::class => false];
    }
}
