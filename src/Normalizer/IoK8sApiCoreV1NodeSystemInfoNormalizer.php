<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1NodeSystemInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSystemInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSystemInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSystemInfo();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('architecture', $data) && $data['architecture'] !== null) {
            $object->setArchitecture($data['architecture']);
        } elseif (\array_key_exists('architecture', $data) && $data['architecture'] === null) {
            $object->setArchitecture(null);
        }
        if (\array_key_exists('bootID', $data) && $data['bootID'] !== null) {
            $object->setBootID($data['bootID']);
        } elseif (\array_key_exists('bootID', $data) && $data['bootID'] === null) {
            $object->setBootID(null);
        }
        if (\array_key_exists('containerRuntimeVersion', $data) && $data['containerRuntimeVersion'] !== null) {
            $object->setContainerRuntimeVersion($data['containerRuntimeVersion']);
        } elseif (\array_key_exists('containerRuntimeVersion', $data) && $data['containerRuntimeVersion'] === null) {
            $object->setContainerRuntimeVersion(null);
        }
        if (\array_key_exists('kernelVersion', $data) && $data['kernelVersion'] !== null) {
            $object->setKernelVersion($data['kernelVersion']);
        } elseif (\array_key_exists('kernelVersion', $data) && $data['kernelVersion'] === null) {
            $object->setKernelVersion(null);
        }
        if (\array_key_exists('kubeProxyVersion', $data) && $data['kubeProxyVersion'] !== null) {
            $object->setKubeProxyVersion($data['kubeProxyVersion']);
        } elseif (\array_key_exists('kubeProxyVersion', $data) && $data['kubeProxyVersion'] === null) {
            $object->setKubeProxyVersion(null);
        }
        if (\array_key_exists('kubeletVersion', $data) && $data['kubeletVersion'] !== null) {
            $object->setKubeletVersion($data['kubeletVersion']);
        } elseif (\array_key_exists('kubeletVersion', $data) && $data['kubeletVersion'] === null) {
            $object->setKubeletVersion(null);
        }
        if (\array_key_exists('machineID', $data) && $data['machineID'] !== null) {
            $object->setMachineID($data['machineID']);
        } elseif (\array_key_exists('machineID', $data) && $data['machineID'] === null) {
            $object->setMachineID(null);
        }
        if (\array_key_exists('operatingSystem', $data) && $data['operatingSystem'] !== null) {
            $object->setOperatingSystem($data['operatingSystem']);
        } elseif (\array_key_exists('operatingSystem', $data) && $data['operatingSystem'] === null) {
            $object->setOperatingSystem(null);
        }
        if (\array_key_exists('osImage', $data) && $data['osImage'] !== null) {
            $object->setOsImage($data['osImage']);
        } elseif (\array_key_exists('osImage', $data) && $data['osImage'] === null) {
            $object->setOsImage(null);
        }
        if (\array_key_exists('swap', $data) && $data['swap'] !== null) {
            $object->setSwap($this->denormalizer->denormalize($data['swap'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSwapStatus::class, 'json', $context));
        } elseif (\array_key_exists('swap', $data) && $data['swap'] === null) {
            $object->setSwap(null);
        }
        if (\array_key_exists('systemUUID', $data) && $data['systemUUID'] !== null) {
            $object->setSystemUUID($data['systemUUID']);
        } elseif (\array_key_exists('systemUUID', $data) && $data['systemUUID'] === null) {
            $object->setSystemUUID(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['architecture'] = $data->getArchitecture();
        $dataArray['bootID'] = $data->getBootID();
        $dataArray['containerRuntimeVersion'] = $data->getContainerRuntimeVersion();
        $dataArray['kernelVersion'] = $data->getKernelVersion();
        $dataArray['kubeProxyVersion'] = $data->getKubeProxyVersion();
        $dataArray['kubeletVersion'] = $data->getKubeletVersion();
        $dataArray['machineID'] = $data->getMachineID();
        $dataArray['operatingSystem'] = $data->getOperatingSystem();
        $dataArray['osImage'] = $data->getOsImage();
        if ($data->isInitialized('swap') && null !== $data->getSwap()) {
            $dataArray['swap'] = $this->normalizer->normalize($data->getSwap(), 'json', $context);
        }
        $dataArray['systemUUID'] = $data->getSystemUUID();

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSystemInfo::class => false];
    }
}
