<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PodSpecNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSpec::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSpec::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSpec();
        if (\array_key_exists('automountServiceAccountToken', $data) && \is_int($data['automountServiceAccountToken'])) {
            $data['automountServiceAccountToken'] = (bool) $data['automountServiceAccountToken'];
        }
        if (\array_key_exists('enableServiceLinks', $data) && \is_int($data['enableServiceLinks'])) {
            $data['enableServiceLinks'] = (bool) $data['enableServiceLinks'];
        }
        if (\array_key_exists('hostIPC', $data) && \is_int($data['hostIPC'])) {
            $data['hostIPC'] = (bool) $data['hostIPC'];
        }
        if (\array_key_exists('hostNetwork', $data) && \is_int($data['hostNetwork'])) {
            $data['hostNetwork'] = (bool) $data['hostNetwork'];
        }
        if (\array_key_exists('hostPID', $data) && \is_int($data['hostPID'])) {
            $data['hostPID'] = (bool) $data['hostPID'];
        }
        if (\array_key_exists('hostUsers', $data) && \is_int($data['hostUsers'])) {
            $data['hostUsers'] = (bool) $data['hostUsers'];
        }
        if (\array_key_exists('setHostnameAsFQDN', $data) && \is_int($data['setHostnameAsFQDN'])) {
            $data['setHostnameAsFQDN'] = (bool) $data['setHostnameAsFQDN'];
        }
        if (\array_key_exists('shareProcessNamespace', $data) && \is_int($data['shareProcessNamespace'])) {
            $data['shareProcessNamespace'] = (bool) $data['shareProcessNamespace'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('activeDeadlineSeconds', $data) && $data['activeDeadlineSeconds'] !== null) {
            $object->setActiveDeadlineSeconds($data['activeDeadlineSeconds']);
        } elseif (\array_key_exists('activeDeadlineSeconds', $data) && $data['activeDeadlineSeconds'] === null) {
            $object->setActiveDeadlineSeconds(null);
        }
        if (\array_key_exists('affinity', $data) && $data['affinity'] !== null) {
            $object->setAffinity($this->denormalizer->denormalize($data['affinity'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Affinity::class, 'json', $context));
        } elseif (\array_key_exists('affinity', $data) && $data['affinity'] === null) {
            $object->setAffinity(null);
        }
        if (\array_key_exists('automountServiceAccountToken', $data) && $data['automountServiceAccountToken'] !== null) {
            $object->setAutomountServiceAccountToken($data['automountServiceAccountToken']);
        } elseif (\array_key_exists('automountServiceAccountToken', $data) && $data['automountServiceAccountToken'] === null) {
            $object->setAutomountServiceAccountToken(null);
        }
        if (\array_key_exists('containers', $data) && $data['containers'] !== null) {
            $values = [];
            foreach ($data['containers'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container::class, 'json', $context);
            }
            $object->setContainers($values);
        } elseif (\array_key_exists('containers', $data) && $data['containers'] === null) {
            $object->setContainers(null);
        }
        if (\array_key_exists('dnsConfig', $data) && $data['dnsConfig'] !== null) {
            $object->setDnsConfig($this->denormalizer->denormalize($data['dnsConfig'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodDNSConfig::class, 'json', $context));
        } elseif (\array_key_exists('dnsConfig', $data) && $data['dnsConfig'] === null) {
            $object->setDnsConfig(null);
        }
        if (\array_key_exists('dnsPolicy', $data) && $data['dnsPolicy'] !== null) {
            $object->setDnsPolicy($data['dnsPolicy']);
        } elseif (\array_key_exists('dnsPolicy', $data) && $data['dnsPolicy'] === null) {
            $object->setDnsPolicy(null);
        }
        if (\array_key_exists('enableServiceLinks', $data) && $data['enableServiceLinks'] !== null) {
            $object->setEnableServiceLinks($data['enableServiceLinks']);
        } elseif (\array_key_exists('enableServiceLinks', $data) && $data['enableServiceLinks'] === null) {
            $object->setEnableServiceLinks(null);
        }
        if (\array_key_exists('ephemeralContainers', $data) && $data['ephemeralContainers'] !== null) {
            $values_1 = [];
            foreach ($data['ephemeralContainers'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1EphemeralContainer::class, 'json', $context);
            }
            $object->setEphemeralContainers($values_1);
        } elseif (\array_key_exists('ephemeralContainers', $data) && $data['ephemeralContainers'] === null) {
            $object->setEphemeralContainers(null);
        }
        if (\array_key_exists('hostAliases', $data) && $data['hostAliases'] !== null) {
            $values_2 = [];
            foreach ($data['hostAliases'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HostAlias::class, 'json', $context);
            }
            $object->setHostAliases($values_2);
        } elseif (\array_key_exists('hostAliases', $data) && $data['hostAliases'] === null) {
            $object->setHostAliases(null);
        }
        if (\array_key_exists('hostIPC', $data) && $data['hostIPC'] !== null) {
            $object->setHostIPC($data['hostIPC']);
        } elseif (\array_key_exists('hostIPC', $data) && $data['hostIPC'] === null) {
            $object->setHostIPC(null);
        }
        if (\array_key_exists('hostNetwork', $data) && $data['hostNetwork'] !== null) {
            $object->setHostNetwork($data['hostNetwork']);
        } elseif (\array_key_exists('hostNetwork', $data) && $data['hostNetwork'] === null) {
            $object->setHostNetwork(null);
        }
        if (\array_key_exists('hostPID', $data) && $data['hostPID'] !== null) {
            $object->setHostPID($data['hostPID']);
        } elseif (\array_key_exists('hostPID', $data) && $data['hostPID'] === null) {
            $object->setHostPID(null);
        }
        if (\array_key_exists('hostUsers', $data) && $data['hostUsers'] !== null) {
            $object->setHostUsers($data['hostUsers']);
        } elseif (\array_key_exists('hostUsers', $data) && $data['hostUsers'] === null) {
            $object->setHostUsers(null);
        }
        if (\array_key_exists('hostname', $data) && $data['hostname'] !== null) {
            $object->setHostname($data['hostname']);
        } elseif (\array_key_exists('hostname', $data) && $data['hostname'] === null) {
            $object->setHostname(null);
        }
        if (\array_key_exists('imagePullSecrets', $data) && $data['imagePullSecrets'] !== null) {
            $values_3 = [];
            foreach ($data['imagePullSecrets'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1LocalObjectReference::class, 'json', $context);
            }
            $object->setImagePullSecrets($values_3);
        } elseif (\array_key_exists('imagePullSecrets', $data) && $data['imagePullSecrets'] === null) {
            $object->setImagePullSecrets(null);
        }
        if (\array_key_exists('initContainers', $data) && $data['initContainers'] !== null) {
            $values_4 = [];
            foreach ($data['initContainers'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Container::class, 'json', $context);
            }
            $object->setInitContainers($values_4);
        } elseif (\array_key_exists('initContainers', $data) && $data['initContainers'] === null) {
            $object->setInitContainers(null);
        }
        if (\array_key_exists('nodeName', $data) && $data['nodeName'] !== null) {
            $object->setNodeName($data['nodeName']);
        } elseif (\array_key_exists('nodeName', $data) && $data['nodeName'] === null) {
            $object->setNodeName(null);
        }
        if (\array_key_exists('nodeSelector', $data) && $data['nodeSelector'] !== null) {
            $values_5 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['nodeSelector'] as $key => $value_5) {
                $values_5[$key] = $value_5;
            }
            $object->setNodeSelector($values_5);
        } elseif (\array_key_exists('nodeSelector', $data) && $data['nodeSelector'] === null) {
            $object->setNodeSelector(null);
        }
        if (\array_key_exists('os', $data) && $data['os'] !== null) {
            $object->setOs($this->denormalizer->denormalize($data['os'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodOS::class, 'json', $context));
        } elseif (\array_key_exists('os', $data) && $data['os'] === null) {
            $object->setOs(null);
        }
        if (\array_key_exists('overhead', $data) && $data['overhead'] !== null) {
            $values_6 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['overhead'] as $key_1 => $value_6) {
                $values_6[$key_1] = $value_6;
            }
            $object->setOverhead($values_6);
        } elseif (\array_key_exists('overhead', $data) && $data['overhead'] === null) {
            $object->setOverhead(null);
        }
        if (\array_key_exists('preemptionPolicy', $data) && $data['preemptionPolicy'] !== null) {
            $object->setPreemptionPolicy($data['preemptionPolicy']);
        } elseif (\array_key_exists('preemptionPolicy', $data) && $data['preemptionPolicy'] === null) {
            $object->setPreemptionPolicy(null);
        }
        if (\array_key_exists('priority', $data) && $data['priority'] !== null) {
            $object->setPriority($data['priority']);
        } elseif (\array_key_exists('priority', $data) && $data['priority'] === null) {
            $object->setPriority(null);
        }
        if (\array_key_exists('priorityClassName', $data) && $data['priorityClassName'] !== null) {
            $object->setPriorityClassName($data['priorityClassName']);
        } elseif (\array_key_exists('priorityClassName', $data) && $data['priorityClassName'] === null) {
            $object->setPriorityClassName(null);
        }
        if (\array_key_exists('readinessGates', $data) && $data['readinessGates'] !== null) {
            $values_7 = [];
            foreach ($data['readinessGates'] as $value_7) {
                $values_7[] = $this->denormalizer->denormalize($value_7, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodReadinessGate::class, 'json', $context);
            }
            $object->setReadinessGates($values_7);
        } elseif (\array_key_exists('readinessGates', $data) && $data['readinessGates'] === null) {
            $object->setReadinessGates(null);
        }
        if (\array_key_exists('resourceClaims', $data) && $data['resourceClaims'] !== null) {
            $values_8 = [];
            foreach ($data['resourceClaims'] as $value_8) {
                $values_8[] = $this->denormalizer->denormalize($value_8, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodResourceClaim::class, 'json', $context);
            }
            $object->setResourceClaims($values_8);
        } elseif (\array_key_exists('resourceClaims', $data) && $data['resourceClaims'] === null) {
            $object->setResourceClaims(null);
        }
        if (\array_key_exists('resources', $data) && $data['resources'] !== null) {
            $object->setResources($this->denormalizer->denormalize($data['resources'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ResourceRequirements::class, 'json', $context));
        } elseif (\array_key_exists('resources', $data) && $data['resources'] === null) {
            $object->setResources(null);
        }
        if (\array_key_exists('restartPolicy', $data) && $data['restartPolicy'] !== null) {
            $object->setRestartPolicy($data['restartPolicy']);
        } elseif (\array_key_exists('restartPolicy', $data) && $data['restartPolicy'] === null) {
            $object->setRestartPolicy(null);
        }
        if (\array_key_exists('runtimeClassName', $data) && $data['runtimeClassName'] !== null) {
            $object->setRuntimeClassName($data['runtimeClassName']);
        } elseif (\array_key_exists('runtimeClassName', $data) && $data['runtimeClassName'] === null) {
            $object->setRuntimeClassName(null);
        }
        if (\array_key_exists('schedulerName', $data) && $data['schedulerName'] !== null) {
            $object->setSchedulerName($data['schedulerName']);
        } elseif (\array_key_exists('schedulerName', $data) && $data['schedulerName'] === null) {
            $object->setSchedulerName(null);
        }
        if (\array_key_exists('schedulingGates', $data) && $data['schedulingGates'] !== null) {
            $values_9 = [];
            foreach ($data['schedulingGates'] as $value_9) {
                $values_9[] = $this->denormalizer->denormalize($value_9, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSchedulingGate::class, 'json', $context);
            }
            $object->setSchedulingGates($values_9);
        } elseif (\array_key_exists('schedulingGates', $data) && $data['schedulingGates'] === null) {
            $object->setSchedulingGates(null);
        }
        if (\array_key_exists('securityContext', $data) && $data['securityContext'] !== null) {
            $object->setSecurityContext($this->denormalizer->denormalize($data['securityContext'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSecurityContext::class, 'json', $context));
        } elseif (\array_key_exists('securityContext', $data) && $data['securityContext'] === null) {
            $object->setSecurityContext(null);
        }
        if (\array_key_exists('serviceAccount', $data) && $data['serviceAccount'] !== null) {
            $object->setServiceAccount($data['serviceAccount']);
        } elseif (\array_key_exists('serviceAccount', $data) && $data['serviceAccount'] === null) {
            $object->setServiceAccount(null);
        }
        if (\array_key_exists('serviceAccountName', $data) && $data['serviceAccountName'] !== null) {
            $object->setServiceAccountName($data['serviceAccountName']);
        } elseif (\array_key_exists('serviceAccountName', $data) && $data['serviceAccountName'] === null) {
            $object->setServiceAccountName(null);
        }
        if (\array_key_exists('setHostnameAsFQDN', $data) && $data['setHostnameAsFQDN'] !== null) {
            $object->setSetHostnameAsFQDN($data['setHostnameAsFQDN']);
        } elseif (\array_key_exists('setHostnameAsFQDN', $data) && $data['setHostnameAsFQDN'] === null) {
            $object->setSetHostnameAsFQDN(null);
        }
        if (\array_key_exists('shareProcessNamespace', $data) && $data['shareProcessNamespace'] !== null) {
            $object->setShareProcessNamespace($data['shareProcessNamespace']);
        } elseif (\array_key_exists('shareProcessNamespace', $data) && $data['shareProcessNamespace'] === null) {
            $object->setShareProcessNamespace(null);
        }
        if (\array_key_exists('subdomain', $data) && $data['subdomain'] !== null) {
            $object->setSubdomain($data['subdomain']);
        } elseif (\array_key_exists('subdomain', $data) && $data['subdomain'] === null) {
            $object->setSubdomain(null);
        }
        if (\array_key_exists('terminationGracePeriodSeconds', $data) && $data['terminationGracePeriodSeconds'] !== null) {
            $object->setTerminationGracePeriodSeconds($data['terminationGracePeriodSeconds']);
        } elseif (\array_key_exists('terminationGracePeriodSeconds', $data) && $data['terminationGracePeriodSeconds'] === null) {
            $object->setTerminationGracePeriodSeconds(null);
        }
        if (\array_key_exists('tolerations', $data) && $data['tolerations'] !== null) {
            $values_10 = [];
            foreach ($data['tolerations'] as $value_10) {
                $values_10[] = $this->denormalizer->denormalize($value_10, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Toleration::class, 'json', $context);
            }
            $object->setTolerations($values_10);
        } elseif (\array_key_exists('tolerations', $data) && $data['tolerations'] === null) {
            $object->setTolerations(null);
        }
        if (\array_key_exists('topologySpreadConstraints', $data) && $data['topologySpreadConstraints'] !== null) {
            $values_11 = [];
            foreach ($data['topologySpreadConstraints'] as $value_11) {
                $values_11[] = $this->denormalizer->denormalize($value_11, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TopologySpreadConstraint::class, 'json', $context);
            }
            $object->setTopologySpreadConstraints($values_11);
        } elseif (\array_key_exists('topologySpreadConstraints', $data) && $data['topologySpreadConstraints'] === null) {
            $object->setTopologySpreadConstraints(null);
        }
        if (\array_key_exists('volumes', $data) && $data['volumes'] !== null) {
            $values_12 = [];
            foreach ($data['volumes'] as $value_12) {
                $values_12[] = $this->denormalizer->denormalize($value_12, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Volume::class, 'json', $context);
            }
            $object->setVolumes($values_12);
        } elseif (\array_key_exists('volumes', $data) && $data['volumes'] === null) {
            $object->setVolumes(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('activeDeadlineSeconds') && null !== $data->getActiveDeadlineSeconds()) {
            $dataArray['activeDeadlineSeconds'] = $data->getActiveDeadlineSeconds();
        }
        if ($data->isInitialized('affinity') && null !== $data->getAffinity()) {
            $dataArray['affinity'] = $this->normalizer->normalize($data->getAffinity(), 'json', $context);
        }
        if ($data->isInitialized('automountServiceAccountToken') && null !== $data->getAutomountServiceAccountToken()) {
            $dataArray['automountServiceAccountToken'] = $data->getAutomountServiceAccountToken();
        }
        $values = [];
        foreach ($data->getContainers() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['containers'] = $values;
        if ($data->isInitialized('dnsConfig') && null !== $data->getDnsConfig()) {
            $dataArray['dnsConfig'] = $this->normalizer->normalize($data->getDnsConfig(), 'json', $context);
        }
        if ($data->isInitialized('dnsPolicy') && null !== $data->getDnsPolicy()) {
            $dataArray['dnsPolicy'] = $data->getDnsPolicy();
        }
        if ($data->isInitialized('enableServiceLinks') && null !== $data->getEnableServiceLinks()) {
            $dataArray['enableServiceLinks'] = $data->getEnableServiceLinks();
        }
        if ($data->isInitialized('ephemeralContainers') && null !== $data->getEphemeralContainers()) {
            $values_1 = [];
            foreach ($data->getEphemeralContainers() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['ephemeralContainers'] = $values_1;
        }
        if ($data->isInitialized('hostAliases') && null !== $data->getHostAliases()) {
            $values_2 = [];
            foreach ($data->getHostAliases() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['hostAliases'] = $values_2;
        }
        if ($data->isInitialized('hostIPC') && null !== $data->getHostIPC()) {
            $dataArray['hostIPC'] = $data->getHostIPC();
        }
        if ($data->isInitialized('hostNetwork') && null !== $data->getHostNetwork()) {
            $dataArray['hostNetwork'] = $data->getHostNetwork();
        }
        if ($data->isInitialized('hostPID') && null !== $data->getHostPID()) {
            $dataArray['hostPID'] = $data->getHostPID();
        }
        if ($data->isInitialized('hostUsers') && null !== $data->getHostUsers()) {
            $dataArray['hostUsers'] = $data->getHostUsers();
        }
        if ($data->isInitialized('hostname') && null !== $data->getHostname()) {
            $dataArray['hostname'] = $data->getHostname();
        }
        if ($data->isInitialized('imagePullSecrets') && null !== $data->getImagePullSecrets()) {
            $values_3 = [];
            foreach ($data->getImagePullSecrets() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $dataArray['imagePullSecrets'] = $values_3;
        }
        if ($data->isInitialized('initContainers') && null !== $data->getInitContainers()) {
            $values_4 = [];
            foreach ($data->getInitContainers() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['initContainers'] = $values_4;
        }
        if ($data->isInitialized('nodeName') && null !== $data->getNodeName()) {
            $dataArray['nodeName'] = $data->getNodeName();
        }
        if ($data->isInitialized('nodeSelector') && null !== $data->getNodeSelector()) {
            $values_5 = [];
            foreach ($data->getNodeSelector() as $key => $value_5) {
                $values_5[$key] = $value_5;
            }
            $dataArray['nodeSelector'] = $values_5;
        }
        if ($data->isInitialized('os') && null !== $data->getOs()) {
            $dataArray['os'] = $this->normalizer->normalize($data->getOs(), 'json', $context);
        }
        if ($data->isInitialized('overhead') && null !== $data->getOverhead()) {
            $values_6 = [];
            foreach ($data->getOverhead() as $key_1 => $value_6) {
                $values_6[$key_1] = $value_6;
            }
            $dataArray['overhead'] = $values_6;
        }
        if ($data->isInitialized('preemptionPolicy') && null !== $data->getPreemptionPolicy()) {
            $dataArray['preemptionPolicy'] = $data->getPreemptionPolicy();
        }
        if ($data->isInitialized('priority') && null !== $data->getPriority()) {
            $dataArray['priority'] = $data->getPriority();
        }
        if ($data->isInitialized('priorityClassName') && null !== $data->getPriorityClassName()) {
            $dataArray['priorityClassName'] = $data->getPriorityClassName();
        }
        if ($data->isInitialized('readinessGates') && null !== $data->getReadinessGates()) {
            $values_7 = [];
            foreach ($data->getReadinessGates() as $value_7) {
                $values_7[] = $this->normalizer->normalize($value_7, 'json', $context);
            }
            $dataArray['readinessGates'] = $values_7;
        }
        if ($data->isInitialized('resourceClaims') && null !== $data->getResourceClaims()) {
            $values_8 = [];
            foreach ($data->getResourceClaims() as $value_8) {
                $values_8[] = $this->normalizer->normalize($value_8, 'json', $context);
            }
            $dataArray['resourceClaims'] = $values_8;
        }
        if ($data->isInitialized('resources') && null !== $data->getResources()) {
            $dataArray['resources'] = $this->normalizer->normalize($data->getResources(), 'json', $context);
        }
        if ($data->isInitialized('restartPolicy') && null !== $data->getRestartPolicy()) {
            $dataArray['restartPolicy'] = $data->getRestartPolicy();
        }
        if ($data->isInitialized('runtimeClassName') && null !== $data->getRuntimeClassName()) {
            $dataArray['runtimeClassName'] = $data->getRuntimeClassName();
        }
        if ($data->isInitialized('schedulerName') && null !== $data->getSchedulerName()) {
            $dataArray['schedulerName'] = $data->getSchedulerName();
        }
        if ($data->isInitialized('schedulingGates') && null !== $data->getSchedulingGates()) {
            $values_9 = [];
            foreach ($data->getSchedulingGates() as $value_9) {
                $values_9[] = $this->normalizer->normalize($value_9, 'json', $context);
            }
            $dataArray['schedulingGates'] = $values_9;
        }
        if ($data->isInitialized('securityContext') && null !== $data->getSecurityContext()) {
            $dataArray['securityContext'] = $this->normalizer->normalize($data->getSecurityContext(), 'json', $context);
        }
        if ($data->isInitialized('serviceAccount') && null !== $data->getServiceAccount()) {
            $dataArray['serviceAccount'] = $data->getServiceAccount();
        }
        if ($data->isInitialized('serviceAccountName') && null !== $data->getServiceAccountName()) {
            $dataArray['serviceAccountName'] = $data->getServiceAccountName();
        }
        if ($data->isInitialized('setHostnameAsFQDN') && null !== $data->getSetHostnameAsFQDN()) {
            $dataArray['setHostnameAsFQDN'] = $data->getSetHostnameAsFQDN();
        }
        if ($data->isInitialized('shareProcessNamespace') && null !== $data->getShareProcessNamespace()) {
            $dataArray['shareProcessNamespace'] = $data->getShareProcessNamespace();
        }
        if ($data->isInitialized('subdomain') && null !== $data->getSubdomain()) {
            $dataArray['subdomain'] = $data->getSubdomain();
        }
        if ($data->isInitialized('terminationGracePeriodSeconds') && null !== $data->getTerminationGracePeriodSeconds()) {
            $dataArray['terminationGracePeriodSeconds'] = $data->getTerminationGracePeriodSeconds();
        }
        if ($data->isInitialized('tolerations') && null !== $data->getTolerations()) {
            $values_10 = [];
            foreach ($data->getTolerations() as $value_10) {
                $values_10[] = $this->normalizer->normalize($value_10, 'json', $context);
            }
            $dataArray['tolerations'] = $values_10;
        }
        if ($data->isInitialized('topologySpreadConstraints') && null !== $data->getTopologySpreadConstraints()) {
            $values_11 = [];
            foreach ($data->getTopologySpreadConstraints() as $value_11) {
                $values_11[] = $this->normalizer->normalize($value_11, 'json', $context);
            }
            $dataArray['topologySpreadConstraints'] = $values_11;
        }
        if ($data->isInitialized('volumes') && null !== $data->getVolumes()) {
            $values_12 = [];
            foreach ($data->getVolumes() as $value_12) {
                $values_12[] = $this->normalizer->normalize($value_12, 'json', $context);
            }
            $dataArray['volumes'] = $values_12;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodSpec::class => false];
    }
}
