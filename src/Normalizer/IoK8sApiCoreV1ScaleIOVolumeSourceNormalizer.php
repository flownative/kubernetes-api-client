<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ScaleIOVolumeSourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ScaleIOVolumeSource::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ScaleIOVolumeSource::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ScaleIOVolumeSource();
        if (\array_key_exists('readOnly', $data) && \is_int($data['readOnly'])) {
            $data['readOnly'] = (bool) $data['readOnly'];
        }
        if (\array_key_exists('sslEnabled', $data) && \is_int($data['sslEnabled'])) {
            $data['sslEnabled'] = (bool) $data['sslEnabled'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('fsType', $data) && $data['fsType'] !== null) {
            $object->setFsType($data['fsType']);
        } elseif (\array_key_exists('fsType', $data) && $data['fsType'] === null) {
            $object->setFsType(null);
        }
        if (\array_key_exists('gateway', $data) && $data['gateway'] !== null) {
            $object->setGateway($data['gateway']);
        } elseif (\array_key_exists('gateway', $data) && $data['gateway'] === null) {
            $object->setGateway(null);
        }
        if (\array_key_exists('protectionDomain', $data) && $data['protectionDomain'] !== null) {
            $object->setProtectionDomain($data['protectionDomain']);
        } elseif (\array_key_exists('protectionDomain', $data) && $data['protectionDomain'] === null) {
            $object->setProtectionDomain(null);
        }
        if (\array_key_exists('readOnly', $data) && $data['readOnly'] !== null) {
            $object->setReadOnly($data['readOnly']);
        } elseif (\array_key_exists('readOnly', $data) && $data['readOnly'] === null) {
            $object->setReadOnly(null);
        }
        if (\array_key_exists('secretRef', $data) && $data['secretRef'] !== null) {
            $object->setSecretRef($this->denormalizer->denormalize($data['secretRef'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1LocalObjectReference::class, 'json', $context));
        } elseif (\array_key_exists('secretRef', $data) && $data['secretRef'] === null) {
            $object->setSecretRef(null);
        }
        if (\array_key_exists('sslEnabled', $data) && $data['sslEnabled'] !== null) {
            $object->setSslEnabled($data['sslEnabled']);
        } elseif (\array_key_exists('sslEnabled', $data) && $data['sslEnabled'] === null) {
            $object->setSslEnabled(null);
        }
        if (\array_key_exists('storageMode', $data) && $data['storageMode'] !== null) {
            $object->setStorageMode($data['storageMode']);
        } elseif (\array_key_exists('storageMode', $data) && $data['storageMode'] === null) {
            $object->setStorageMode(null);
        }
        if (\array_key_exists('storagePool', $data) && $data['storagePool'] !== null) {
            $object->setStoragePool($data['storagePool']);
        } elseif (\array_key_exists('storagePool', $data) && $data['storagePool'] === null) {
            $object->setStoragePool(null);
        }
        if (\array_key_exists('system', $data) && $data['system'] !== null) {
            $object->setSystem($data['system']);
        } elseif (\array_key_exists('system', $data) && $data['system'] === null) {
            $object->setSystem(null);
        }
        if (\array_key_exists('volumeName', $data) && $data['volumeName'] !== null) {
            $object->setVolumeName($data['volumeName']);
        } elseif (\array_key_exists('volumeName', $data) && $data['volumeName'] === null) {
            $object->setVolumeName(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('fsType') && null !== $data->getFsType()) {
            $dataArray['fsType'] = $data->getFsType();
        }
        $dataArray['gateway'] = $data->getGateway();
        if ($data->isInitialized('protectionDomain') && null !== $data->getProtectionDomain()) {
            $dataArray['protectionDomain'] = $data->getProtectionDomain();
        }
        if ($data->isInitialized('readOnly') && null !== $data->getReadOnly()) {
            $dataArray['readOnly'] = $data->getReadOnly();
        }
        $dataArray['secretRef'] = $this->normalizer->normalize($data->getSecretRef(), 'json', $context);
        if ($data->isInitialized('sslEnabled') && null !== $data->getSslEnabled()) {
            $dataArray['sslEnabled'] = $data->getSslEnabled();
        }
        if ($data->isInitialized('storageMode') && null !== $data->getStorageMode()) {
            $dataArray['storageMode'] = $data->getStorageMode();
        }
        if ($data->isInitialized('storagePool') && null !== $data->getStoragePool()) {
            $dataArray['storagePool'] = $data->getStoragePool();
        }
        $dataArray['system'] = $data->getSystem();
        if ($data->isInitialized('volumeName') && null !== $data->getVolumeName()) {
            $dataArray['volumeName'] = $data->getVolumeName();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ScaleIOVolumeSource::class => false];
    }
}
