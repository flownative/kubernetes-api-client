<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1VolumeMountNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMount::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMount::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMount();
        if (\array_key_exists('readOnly', $data) && \is_int($data['readOnly'])) {
            $data['readOnly'] = (bool) $data['readOnly'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('mountPath', $data) && $data['mountPath'] !== null) {
            $object->setMountPath($data['mountPath']);
        } elseif (\array_key_exists('mountPath', $data) && $data['mountPath'] === null) {
            $object->setMountPath(null);
        }
        if (\array_key_exists('mountPropagation', $data) && $data['mountPropagation'] !== null) {
            $object->setMountPropagation($data['mountPropagation']);
        } elseif (\array_key_exists('mountPropagation', $data) && $data['mountPropagation'] === null) {
            $object->setMountPropagation(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('readOnly', $data) && $data['readOnly'] !== null) {
            $object->setReadOnly($data['readOnly']);
        } elseif (\array_key_exists('readOnly', $data) && $data['readOnly'] === null) {
            $object->setReadOnly(null);
        }
        if (\array_key_exists('recursiveReadOnly', $data) && $data['recursiveReadOnly'] !== null) {
            $object->setRecursiveReadOnly($data['recursiveReadOnly']);
        } elseif (\array_key_exists('recursiveReadOnly', $data) && $data['recursiveReadOnly'] === null) {
            $object->setRecursiveReadOnly(null);
        }
        if (\array_key_exists('subPath', $data) && $data['subPath'] !== null) {
            $object->setSubPath($data['subPath']);
        } elseif (\array_key_exists('subPath', $data) && $data['subPath'] === null) {
            $object->setSubPath(null);
        }
        if (\array_key_exists('subPathExpr', $data) && $data['subPathExpr'] !== null) {
            $object->setSubPathExpr($data['subPathExpr']);
        } elseif (\array_key_exists('subPathExpr', $data) && $data['subPathExpr'] === null) {
            $object->setSubPathExpr(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['mountPath'] = $data->getMountPath();
        if ($data->isInitialized('mountPropagation') && null !== $data->getMountPropagation()) {
            $dataArray['mountPropagation'] = $data->getMountPropagation();
        }
        $dataArray['name'] = $data->getName();
        if ($data->isInitialized('readOnly') && null !== $data->getReadOnly()) {
            $dataArray['readOnly'] = $data->getReadOnly();
        }
        if ($data->isInitialized('recursiveReadOnly') && null !== $data->getRecursiveReadOnly()) {
            $dataArray['recursiveReadOnly'] = $data->getRecursiveReadOnly();
        }
        if ($data->isInitialized('subPath') && null !== $data->getSubPath()) {
            $dataArray['subPath'] = $data->getSubPath();
        }
        if ($data->isInitialized('subPathExpr') && null !== $data->getSubPathExpr()) {
            $dataArray['subPathExpr'] = $data->getSubPathExpr();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMount::class => false];
    }
}
