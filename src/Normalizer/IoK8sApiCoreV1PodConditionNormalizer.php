<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PodConditionNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodCondition::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodCondition::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodCondition();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('lastProbeTime', $data) && $data['lastProbeTime'] !== null) {
            $object->setLastProbeTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['lastProbeTime']));
        } elseif (\array_key_exists('lastProbeTime', $data) && $data['lastProbeTime'] === null) {
            $object->setLastProbeTime(null);
        }
        if (\array_key_exists('lastTransitionTime', $data) && $data['lastTransitionTime'] !== null) {
            $object->setLastTransitionTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['lastTransitionTime']));
        } elseif (\array_key_exists('lastTransitionTime', $data) && $data['lastTransitionTime'] === null) {
            $object->setLastTransitionTime(null);
        }
        if (\array_key_exists('message', $data) && $data['message'] !== null) {
            $object->setMessage($data['message']);
        } elseif (\array_key_exists('message', $data) && $data['message'] === null) {
            $object->setMessage(null);
        }
        if (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] !== null) {
            $object->setObservedGeneration($data['observedGeneration']);
        } elseif (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] === null) {
            $object->setObservedGeneration(null);
        }
        if (\array_key_exists('reason', $data) && $data['reason'] !== null) {
            $object->setReason($data['reason']);
        } elseif (\array_key_exists('reason', $data) && $data['reason'] === null) {
            $object->setReason(null);
        }
        if (\array_key_exists('status', $data) && $data['status'] !== null) {
            $object->setStatus($data['status']);
        } elseif (\array_key_exists('status', $data) && $data['status'] === null) {
            $object->setStatus(null);
        }
        if (\array_key_exists('type', $data) && $data['type'] !== null) {
            $object->setType($data['type']);
        } elseif (\array_key_exists('type', $data) && $data['type'] === null) {
            $object->setType(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('lastProbeTime') && null !== $data->getLastProbeTime()) {
            $dataArray['lastProbeTime'] = $data->getLastProbeTime()->format('Y-m-d\TH:i:s.vP');
        }
        if ($data->isInitialized('lastTransitionTime') && null !== $data->getLastTransitionTime()) {
            $dataArray['lastTransitionTime'] = $data->getLastTransitionTime()->format('Y-m-d\TH:i:s.vP');
        }
        if ($data->isInitialized('message') && null !== $data->getMessage()) {
            $dataArray['message'] = $data->getMessage();
        }
        if ($data->isInitialized('observedGeneration') && null !== $data->getObservedGeneration()) {
            $dataArray['observedGeneration'] = $data->getObservedGeneration();
        }
        if ($data->isInitialized('reason') && null !== $data->getReason()) {
            $dataArray['reason'] = $data->getReason();
        }
        $dataArray['status'] = $data->getStatus();
        $dataArray['type'] = $data->getType();

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodCondition::class => false];
    }
}
