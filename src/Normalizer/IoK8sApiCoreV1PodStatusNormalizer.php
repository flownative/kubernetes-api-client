<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1PodStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodStatus::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodStatus::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodStatus();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('conditions', $data) && $data['conditions'] !== null) {
            $values = [];
            foreach ($data['conditions'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodCondition::class, 'json', $context);
            }
            $object->setConditions($values);
        } elseif (\array_key_exists('conditions', $data) && $data['conditions'] === null) {
            $object->setConditions(null);
        }
        if (\array_key_exists('containerStatuses', $data) && $data['containerStatuses'] !== null) {
            $values_1 = [];
            foreach ($data['containerStatuses'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class, 'json', $context);
            }
            $object->setContainerStatuses($values_1);
        } elseif (\array_key_exists('containerStatuses', $data) && $data['containerStatuses'] === null) {
            $object->setContainerStatuses(null);
        }
        if (\array_key_exists('ephemeralContainerStatuses', $data) && $data['ephemeralContainerStatuses'] !== null) {
            $values_2 = [];
            foreach ($data['ephemeralContainerStatuses'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class, 'json', $context);
            }
            $object->setEphemeralContainerStatuses($values_2);
        } elseif (\array_key_exists('ephemeralContainerStatuses', $data) && $data['ephemeralContainerStatuses'] === null) {
            $object->setEphemeralContainerStatuses(null);
        }
        if (\array_key_exists('hostIP', $data) && $data['hostIP'] !== null) {
            $object->setHostIP($data['hostIP']);
        } elseif (\array_key_exists('hostIP', $data) && $data['hostIP'] === null) {
            $object->setHostIP(null);
        }
        if (\array_key_exists('hostIPs', $data) && $data['hostIPs'] !== null) {
            $values_3 = [];
            foreach ($data['hostIPs'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HostIP::class, 'json', $context);
            }
            $object->setHostIPs($values_3);
        } elseif (\array_key_exists('hostIPs', $data) && $data['hostIPs'] === null) {
            $object->setHostIPs(null);
        }
        if (\array_key_exists('initContainerStatuses', $data) && $data['initContainerStatuses'] !== null) {
            $values_4 = [];
            foreach ($data['initContainerStatuses'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class, 'json', $context);
            }
            $object->setInitContainerStatuses($values_4);
        } elseif (\array_key_exists('initContainerStatuses', $data) && $data['initContainerStatuses'] === null) {
            $object->setInitContainerStatuses(null);
        }
        if (\array_key_exists('message', $data) && $data['message'] !== null) {
            $object->setMessage($data['message']);
        } elseif (\array_key_exists('message', $data) && $data['message'] === null) {
            $object->setMessage(null);
        }
        if (\array_key_exists('nominatedNodeName', $data) && $data['nominatedNodeName'] !== null) {
            $object->setNominatedNodeName($data['nominatedNodeName']);
        } elseif (\array_key_exists('nominatedNodeName', $data) && $data['nominatedNodeName'] === null) {
            $object->setNominatedNodeName(null);
        }
        if (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] !== null) {
            $object->setObservedGeneration($data['observedGeneration']);
        } elseif (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] === null) {
            $object->setObservedGeneration(null);
        }
        if (\array_key_exists('phase', $data) && $data['phase'] !== null) {
            $object->setPhase($data['phase']);
        } elseif (\array_key_exists('phase', $data) && $data['phase'] === null) {
            $object->setPhase(null);
        }
        if (\array_key_exists('podIP', $data) && $data['podIP'] !== null) {
            $object->setPodIP($data['podIP']);
        } elseif (\array_key_exists('podIP', $data) && $data['podIP'] === null) {
            $object->setPodIP(null);
        }
        if (\array_key_exists('podIPs', $data) && $data['podIPs'] !== null) {
            $values_5 = [];
            foreach ($data['podIPs'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodIP::class, 'json', $context);
            }
            $object->setPodIPs($values_5);
        } elseif (\array_key_exists('podIPs', $data) && $data['podIPs'] === null) {
            $object->setPodIPs(null);
        }
        if (\array_key_exists('qosClass', $data) && $data['qosClass'] !== null) {
            $object->setQosClass($data['qosClass']);
        } elseif (\array_key_exists('qosClass', $data) && $data['qosClass'] === null) {
            $object->setQosClass(null);
        }
        if (\array_key_exists('reason', $data) && $data['reason'] !== null) {
            $object->setReason($data['reason']);
        } elseif (\array_key_exists('reason', $data) && $data['reason'] === null) {
            $object->setReason(null);
        }
        if (\array_key_exists('resize', $data) && $data['resize'] !== null) {
            $object->setResize($data['resize']);
        } elseif (\array_key_exists('resize', $data) && $data['resize'] === null) {
            $object->setResize(null);
        }
        if (\array_key_exists('resourceClaimStatuses', $data) && $data['resourceClaimStatuses'] !== null) {
            $values_6 = [];
            foreach ($data['resourceClaimStatuses'] as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodResourceClaimStatus::class, 'json', $context);
            }
            $object->setResourceClaimStatuses($values_6);
        } elseif (\array_key_exists('resourceClaimStatuses', $data) && $data['resourceClaimStatuses'] === null) {
            $object->setResourceClaimStatuses(null);
        }
        if (\array_key_exists('startTime', $data) && $data['startTime'] !== null) {
            $object->setStartTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['startTime']));
        } elseif (\array_key_exists('startTime', $data) && $data['startTime'] === null) {
            $object->setStartTime(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('conditions') && null !== $data->getConditions()) {
            $values = [];
            foreach ($data->getConditions() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['conditions'] = $values;
        }
        if ($data->isInitialized('containerStatuses') && null !== $data->getContainerStatuses()) {
            $values_1 = [];
            foreach ($data->getContainerStatuses() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['containerStatuses'] = $values_1;
        }
        if ($data->isInitialized('ephemeralContainerStatuses') && null !== $data->getEphemeralContainerStatuses()) {
            $values_2 = [];
            foreach ($data->getEphemeralContainerStatuses() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['ephemeralContainerStatuses'] = $values_2;
        }
        if ($data->isInitialized('hostIP') && null !== $data->getHostIP()) {
            $dataArray['hostIP'] = $data->getHostIP();
        }
        if ($data->isInitialized('hostIPs') && null !== $data->getHostIPs()) {
            $values_3 = [];
            foreach ($data->getHostIPs() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $dataArray['hostIPs'] = $values_3;
        }
        if ($data->isInitialized('initContainerStatuses') && null !== $data->getInitContainerStatuses()) {
            $values_4 = [];
            foreach ($data->getInitContainerStatuses() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['initContainerStatuses'] = $values_4;
        }
        if ($data->isInitialized('message') && null !== $data->getMessage()) {
            $dataArray['message'] = $data->getMessage();
        }
        if ($data->isInitialized('nominatedNodeName') && null !== $data->getNominatedNodeName()) {
            $dataArray['nominatedNodeName'] = $data->getNominatedNodeName();
        }
        if ($data->isInitialized('observedGeneration') && null !== $data->getObservedGeneration()) {
            $dataArray['observedGeneration'] = $data->getObservedGeneration();
        }
        if ($data->isInitialized('phase') && null !== $data->getPhase()) {
            $dataArray['phase'] = $data->getPhase();
        }
        if ($data->isInitialized('podIP') && null !== $data->getPodIP()) {
            $dataArray['podIP'] = $data->getPodIP();
        }
        if ($data->isInitialized('podIPs') && null !== $data->getPodIPs()) {
            $values_5 = [];
            foreach ($data->getPodIPs() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $dataArray['podIPs'] = $values_5;
        }
        if ($data->isInitialized('qosClass') && null !== $data->getQosClass()) {
            $dataArray['qosClass'] = $data->getQosClass();
        }
        if ($data->isInitialized('reason') && null !== $data->getReason()) {
            $dataArray['reason'] = $data->getReason();
        }
        if ($data->isInitialized('resize') && null !== $data->getResize()) {
            $dataArray['resize'] = $data->getResize();
        }
        if ($data->isInitialized('resourceClaimStatuses') && null !== $data->getResourceClaimStatuses()) {
            $values_6 = [];
            foreach ($data->getResourceClaimStatuses() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $dataArray['resourceClaimStatuses'] = $values_6;
        }
        if ($data->isInitialized('startTime') && null !== $data->getStartTime()) {
            $dataArray['startTime'] = $data->getStartTime()->format('Y-m-d\TH:i:s.vP');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1PodStatus::class => false];
    }
}
