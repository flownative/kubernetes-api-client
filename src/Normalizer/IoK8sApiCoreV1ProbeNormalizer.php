<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ProbeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('exec', $data) && $data['exec'] !== null) {
            $object->setExec($this->denormalizer->denormalize($data['exec'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ExecAction::class, 'json', $context));
        } elseif (\array_key_exists('exec', $data) && $data['exec'] === null) {
            $object->setExec(null);
        }
        if (\array_key_exists('failureThreshold', $data) && $data['failureThreshold'] !== null) {
            $object->setFailureThreshold($data['failureThreshold']);
        } elseif (\array_key_exists('failureThreshold', $data) && $data['failureThreshold'] === null) {
            $object->setFailureThreshold(null);
        }
        if (\array_key_exists('grpc', $data) && $data['grpc'] !== null) {
            $object->setGrpc($this->denormalizer->denormalize($data['grpc'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1GRPCAction::class, 'json', $context));
        } elseif (\array_key_exists('grpc', $data) && $data['grpc'] === null) {
            $object->setGrpc(null);
        }
        if (\array_key_exists('httpGet', $data) && $data['httpGet'] !== null) {
            $object->setHttpGet($this->denormalizer->denormalize($data['httpGet'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1HTTPGetAction::class, 'json', $context));
        } elseif (\array_key_exists('httpGet', $data) && $data['httpGet'] === null) {
            $object->setHttpGet(null);
        }
        if (\array_key_exists('initialDelaySeconds', $data) && $data['initialDelaySeconds'] !== null) {
            $object->setInitialDelaySeconds($data['initialDelaySeconds']);
        } elseif (\array_key_exists('initialDelaySeconds', $data) && $data['initialDelaySeconds'] === null) {
            $object->setInitialDelaySeconds(null);
        }
        if (\array_key_exists('periodSeconds', $data) && $data['periodSeconds'] !== null) {
            $object->setPeriodSeconds($data['periodSeconds']);
        } elseif (\array_key_exists('periodSeconds', $data) && $data['periodSeconds'] === null) {
            $object->setPeriodSeconds(null);
        }
        if (\array_key_exists('successThreshold', $data) && $data['successThreshold'] !== null) {
            $object->setSuccessThreshold($data['successThreshold']);
        } elseif (\array_key_exists('successThreshold', $data) && $data['successThreshold'] === null) {
            $object->setSuccessThreshold(null);
        }
        if (\array_key_exists('tcpSocket', $data) && $data['tcpSocket'] !== null) {
            $object->setTcpSocket($this->denormalizer->denormalize($data['tcpSocket'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1TCPSocketAction::class, 'json', $context));
        } elseif (\array_key_exists('tcpSocket', $data) && $data['tcpSocket'] === null) {
            $object->setTcpSocket(null);
        }
        if (\array_key_exists('terminationGracePeriodSeconds', $data) && $data['terminationGracePeriodSeconds'] !== null) {
            $object->setTerminationGracePeriodSeconds($data['terminationGracePeriodSeconds']);
        } elseif (\array_key_exists('terminationGracePeriodSeconds', $data) && $data['terminationGracePeriodSeconds'] === null) {
            $object->setTerminationGracePeriodSeconds(null);
        }
        if (\array_key_exists('timeoutSeconds', $data) && $data['timeoutSeconds'] !== null) {
            $object->setTimeoutSeconds($data['timeoutSeconds']);
        } elseif (\array_key_exists('timeoutSeconds', $data) && $data['timeoutSeconds'] === null) {
            $object->setTimeoutSeconds(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('exec') && null !== $data->getExec()) {
            $dataArray['exec'] = $this->normalizer->normalize($data->getExec(), 'json', $context);
        }
        if ($data->isInitialized('failureThreshold') && null !== $data->getFailureThreshold()) {
            $dataArray['failureThreshold'] = $data->getFailureThreshold();
        }
        if ($data->isInitialized('grpc') && null !== $data->getGrpc()) {
            $dataArray['grpc'] = $this->normalizer->normalize($data->getGrpc(), 'json', $context);
        }
        if ($data->isInitialized('httpGet') && null !== $data->getHttpGet()) {
            $dataArray['httpGet'] = $this->normalizer->normalize($data->getHttpGet(), 'json', $context);
        }
        if ($data->isInitialized('initialDelaySeconds') && null !== $data->getInitialDelaySeconds()) {
            $dataArray['initialDelaySeconds'] = $data->getInitialDelaySeconds();
        }
        if ($data->isInitialized('periodSeconds') && null !== $data->getPeriodSeconds()) {
            $dataArray['periodSeconds'] = $data->getPeriodSeconds();
        }
        if ($data->isInitialized('successThreshold') && null !== $data->getSuccessThreshold()) {
            $dataArray['successThreshold'] = $data->getSuccessThreshold();
        }
        if ($data->isInitialized('tcpSocket') && null !== $data->getTcpSocket()) {
            $dataArray['tcpSocket'] = $this->normalizer->normalize($data->getTcpSocket(), 'json', $context);
        }
        if ($data->isInitialized('terminationGracePeriodSeconds') && null !== $data->getTerminationGracePeriodSeconds()) {
            $dataArray['terminationGracePeriodSeconds'] = $data->getTerminationGracePeriodSeconds();
        }
        if ($data->isInitialized('timeoutSeconds') && null !== $data->getTimeoutSeconds()) {
            $dataArray['timeoutSeconds'] = $data->getTimeoutSeconds();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1Probe::class => false];
    }
}
