<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1NodeStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeStatus::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeStatus::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeStatus();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('addresses', $data) && $data['addresses'] !== null) {
            $values = [];
            foreach ($data['addresses'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeAddress::class, 'json', $context);
            }
            $object->setAddresses($values);
        } elseif (\array_key_exists('addresses', $data) && $data['addresses'] === null) {
            $object->setAddresses(null);
        }
        if (\array_key_exists('allocatable', $data) && $data['allocatable'] !== null) {
            $values_1 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['allocatable'] as $key => $value_1) {
                $values_1[$key] = $value_1;
            }
            $object->setAllocatable($values_1);
        } elseif (\array_key_exists('allocatable', $data) && $data['allocatable'] === null) {
            $object->setAllocatable(null);
        }
        if (\array_key_exists('capacity', $data) && $data['capacity'] !== null) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['capacity'] as $key_1 => $value_2) {
                $values_2[$key_1] = $value_2;
            }
            $object->setCapacity($values_2);
        } elseif (\array_key_exists('capacity', $data) && $data['capacity'] === null) {
            $object->setCapacity(null);
        }
        if (\array_key_exists('conditions', $data) && $data['conditions'] !== null) {
            $values_3 = [];
            foreach ($data['conditions'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeCondition::class, 'json', $context);
            }
            $object->setConditions($values_3);
        } elseif (\array_key_exists('conditions', $data) && $data['conditions'] === null) {
            $object->setConditions(null);
        }
        if (\array_key_exists('config', $data) && $data['config'] !== null) {
            $object->setConfig($this->denormalizer->denormalize($data['config'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeConfigStatus::class, 'json', $context));
        } elseif (\array_key_exists('config', $data) && $data['config'] === null) {
            $object->setConfig(null);
        }
        if (\array_key_exists('daemonEndpoints', $data) && $data['daemonEndpoints'] !== null) {
            $object->setDaemonEndpoints($this->denormalizer->denormalize($data['daemonEndpoints'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeDaemonEndpoints::class, 'json', $context));
        } elseif (\array_key_exists('daemonEndpoints', $data) && $data['daemonEndpoints'] === null) {
            $object->setDaemonEndpoints(null);
        }
        if (\array_key_exists('features', $data) && $data['features'] !== null) {
            $object->setFeatures($this->denormalizer->denormalize($data['features'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeFeatures::class, 'json', $context));
        } elseif (\array_key_exists('features', $data) && $data['features'] === null) {
            $object->setFeatures(null);
        }
        if (\array_key_exists('images', $data) && $data['images'] !== null) {
            $values_4 = [];
            foreach ($data['images'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerImage::class, 'json', $context);
            }
            $object->setImages($values_4);
        } elseif (\array_key_exists('images', $data) && $data['images'] === null) {
            $object->setImages(null);
        }
        if (\array_key_exists('nodeInfo', $data) && $data['nodeInfo'] !== null) {
            $object->setNodeInfo($this->denormalizer->denormalize($data['nodeInfo'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeSystemInfo::class, 'json', $context));
        } elseif (\array_key_exists('nodeInfo', $data) && $data['nodeInfo'] === null) {
            $object->setNodeInfo(null);
        }
        if (\array_key_exists('phase', $data) && $data['phase'] !== null) {
            $object->setPhase($data['phase']);
        } elseif (\array_key_exists('phase', $data) && $data['phase'] === null) {
            $object->setPhase(null);
        }
        if (\array_key_exists('runtimeHandlers', $data) && $data['runtimeHandlers'] !== null) {
            $values_5 = [];
            foreach ($data['runtimeHandlers'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeRuntimeHandler::class, 'json', $context);
            }
            $object->setRuntimeHandlers($values_5);
        } elseif (\array_key_exists('runtimeHandlers', $data) && $data['runtimeHandlers'] === null) {
            $object->setRuntimeHandlers(null);
        }
        if (\array_key_exists('volumesAttached', $data) && $data['volumesAttached'] !== null) {
            $values_6 = [];
            foreach ($data['volumesAttached'] as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1AttachedVolume::class, 'json', $context);
            }
            $object->setVolumesAttached($values_6);
        } elseif (\array_key_exists('volumesAttached', $data) && $data['volumesAttached'] === null) {
            $object->setVolumesAttached(null);
        }
        if (\array_key_exists('volumesInUse', $data) && $data['volumesInUse'] !== null) {
            $values_7 = [];
            foreach ($data['volumesInUse'] as $value_7) {
                $values_7[] = $value_7;
            }
            $object->setVolumesInUse($values_7);
        } elseif (\array_key_exists('volumesInUse', $data) && $data['volumesInUse'] === null) {
            $object->setVolumesInUse(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('addresses') && null !== $data->getAddresses()) {
            $values = [];
            foreach ($data->getAddresses() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['addresses'] = $values;
        }
        if ($data->isInitialized('allocatable') && null !== $data->getAllocatable()) {
            $values_1 = [];
            foreach ($data->getAllocatable() as $key => $value_1) {
                $values_1[$key] = $value_1;
            }
            $dataArray['allocatable'] = $values_1;
        }
        if ($data->isInitialized('capacity') && null !== $data->getCapacity()) {
            $values_2 = [];
            foreach ($data->getCapacity() as $key_1 => $value_2) {
                $values_2[$key_1] = $value_2;
            }
            $dataArray['capacity'] = $values_2;
        }
        if ($data->isInitialized('conditions') && null !== $data->getConditions()) {
            $values_3 = [];
            foreach ($data->getConditions() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $dataArray['conditions'] = $values_3;
        }
        if ($data->isInitialized('config') && null !== $data->getConfig()) {
            $dataArray['config'] = $this->normalizer->normalize($data->getConfig(), 'json', $context);
        }
        if ($data->isInitialized('daemonEndpoints') && null !== $data->getDaemonEndpoints()) {
            $dataArray['daemonEndpoints'] = $this->normalizer->normalize($data->getDaemonEndpoints(), 'json', $context);
        }
        if ($data->isInitialized('features') && null !== $data->getFeatures()) {
            $dataArray['features'] = $this->normalizer->normalize($data->getFeatures(), 'json', $context);
        }
        if ($data->isInitialized('images') && null !== $data->getImages()) {
            $values_4 = [];
            foreach ($data->getImages() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['images'] = $values_4;
        }
        if ($data->isInitialized('nodeInfo') && null !== $data->getNodeInfo()) {
            $dataArray['nodeInfo'] = $this->normalizer->normalize($data->getNodeInfo(), 'json', $context);
        }
        if ($data->isInitialized('phase') && null !== $data->getPhase()) {
            $dataArray['phase'] = $data->getPhase();
        }
        if ($data->isInitialized('runtimeHandlers') && null !== $data->getRuntimeHandlers()) {
            $values_5 = [];
            foreach ($data->getRuntimeHandlers() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $dataArray['runtimeHandlers'] = $values_5;
        }
        if ($data->isInitialized('volumesAttached') && null !== $data->getVolumesAttached()) {
            $values_6 = [];
            foreach ($data->getVolumesAttached() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $dataArray['volumesAttached'] = $values_6;
        }
        if ($data->isInitialized('volumesInUse') && null !== $data->getVolumesInUse()) {
            $values_7 = [];
            foreach ($data->getVolumesInUse() as $value_7) {
                $values_7[] = $value_7;
            }
            $dataArray['volumesInUse'] = $values_7;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1NodeStatus::class => false];
    }
}
