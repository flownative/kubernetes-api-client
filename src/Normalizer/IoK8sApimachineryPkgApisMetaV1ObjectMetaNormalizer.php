<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApimachineryPkgApisMetaV1ObjectMetaNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ObjectMeta::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ObjectMeta::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ObjectMeta();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('annotations', $data) && $data['annotations'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['annotations'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setAnnotations($values);
        } elseif (\array_key_exists('annotations', $data) && $data['annotations'] === null) {
            $object->setAnnotations(null);
        }
        if (\array_key_exists('creationTimestamp', $data) && $data['creationTimestamp'] !== null) {
            $object->setCreationTimestamp(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['creationTimestamp']));
        } elseif (\array_key_exists('creationTimestamp', $data) && $data['creationTimestamp'] === null) {
            $object->setCreationTimestamp(null);
        }
        if (\array_key_exists('deletionGracePeriodSeconds', $data) && $data['deletionGracePeriodSeconds'] !== null) {
            $object->setDeletionGracePeriodSeconds($data['deletionGracePeriodSeconds']);
        } elseif (\array_key_exists('deletionGracePeriodSeconds', $data) && $data['deletionGracePeriodSeconds'] === null) {
            $object->setDeletionGracePeriodSeconds(null);
        }
        if (\array_key_exists('deletionTimestamp', $data) && $data['deletionTimestamp'] !== null) {
            $object->setDeletionTimestamp(\DateTime::createFromFormat('Y-m-d\TH:i:s.vP', $data['deletionTimestamp']));
        } elseif (\array_key_exists('deletionTimestamp', $data) && $data['deletionTimestamp'] === null) {
            $object->setDeletionTimestamp(null);
        }
        if (\array_key_exists('finalizers', $data) && $data['finalizers'] !== null) {
            $values_1 = [];
            foreach ($data['finalizers'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setFinalizers($values_1);
        } elseif (\array_key_exists('finalizers', $data) && $data['finalizers'] === null) {
            $object->setFinalizers(null);
        }
        if (\array_key_exists('generateName', $data) && $data['generateName'] !== null) {
            $object->setGenerateName($data['generateName']);
        } elseif (\array_key_exists('generateName', $data) && $data['generateName'] === null) {
            $object->setGenerateName(null);
        }
        if (\array_key_exists('generation', $data) && $data['generation'] !== null) {
            $object->setGeneration($data['generation']);
        } elseif (\array_key_exists('generation', $data) && $data['generation'] === null) {
            $object->setGeneration(null);
        }
        if (\array_key_exists('labels', $data) && $data['labels'] !== null) {
            $values_2 = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['labels'] as $key_1 => $value_2) {
                $values_2[$key_1] = $value_2;
            }
            $object->setLabels($values_2);
        } elseif (\array_key_exists('labels', $data) && $data['labels'] === null) {
            $object->setLabels(null);
        }
        if (\array_key_exists('managedFields', $data) && $data['managedFields'] !== null) {
            $values_3 = [];
            foreach ($data['managedFields'] as $value_3) {
                $values_3[] = $this->denormalizer->denormalize($value_3, \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry::class, 'json', $context);
            }
            $object->setManagedFields($values_3);
        } elseif (\array_key_exists('managedFields', $data) && $data['managedFields'] === null) {
            $object->setManagedFields(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('namespace', $data) && $data['namespace'] !== null) {
            $object->setNamespace($data['namespace']);
        } elseif (\array_key_exists('namespace', $data) && $data['namespace'] === null) {
            $object->setNamespace(null);
        }
        if (\array_key_exists('ownerReferences', $data) && $data['ownerReferences'] !== null) {
            $values_4 = [];
            foreach ($data['ownerReferences'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1OwnerReference::class, 'json', $context);
            }
            $object->setOwnerReferences($values_4);
        } elseif (\array_key_exists('ownerReferences', $data) && $data['ownerReferences'] === null) {
            $object->setOwnerReferences(null);
        }
        if (\array_key_exists('resourceVersion', $data) && $data['resourceVersion'] !== null) {
            $object->setResourceVersion($data['resourceVersion']);
        } elseif (\array_key_exists('resourceVersion', $data) && $data['resourceVersion'] === null) {
            $object->setResourceVersion(null);
        }
        if (\array_key_exists('selfLink', $data) && $data['selfLink'] !== null) {
            $object->setSelfLink($data['selfLink']);
        } elseif (\array_key_exists('selfLink', $data) && $data['selfLink'] === null) {
            $object->setSelfLink(null);
        }
        if (\array_key_exists('uid', $data) && $data['uid'] !== null) {
            $object->setUid($data['uid']);
        } elseif (\array_key_exists('uid', $data) && $data['uid'] === null) {
            $object->setUid(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('annotations') && null !== $data->getAnnotations()) {
            $values = [];
            foreach ($data->getAnnotations() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['annotations'] = $values;
        }
        if ($data->isInitialized('creationTimestamp') && null !== $data->getCreationTimestamp()) {
            $dataArray['creationTimestamp'] = $data->getCreationTimestamp()->format('Y-m-d\TH:i:s.vP');
        }
        if ($data->isInitialized('deletionGracePeriodSeconds') && null !== $data->getDeletionGracePeriodSeconds()) {
            $dataArray['deletionGracePeriodSeconds'] = $data->getDeletionGracePeriodSeconds();
        }
        if ($data->isInitialized('deletionTimestamp') && null !== $data->getDeletionTimestamp()) {
            $dataArray['deletionTimestamp'] = $data->getDeletionTimestamp()->format('Y-m-d\TH:i:s.vP');
        }
        if ($data->isInitialized('finalizers') && null !== $data->getFinalizers()) {
            $values_1 = [];
            foreach ($data->getFinalizers() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['finalizers'] = $values_1;
        }
        if ($data->isInitialized('generateName') && null !== $data->getGenerateName()) {
            $dataArray['generateName'] = $data->getGenerateName();
        }
        if ($data->isInitialized('generation') && null !== $data->getGeneration()) {
            $dataArray['generation'] = $data->getGeneration();
        }
        if ($data->isInitialized('labels') && null !== $data->getLabels()) {
            $values_2 = [];
            foreach ($data->getLabels() as $key_1 => $value_2) {
                $values_2[$key_1] = $value_2;
            }
            $dataArray['labels'] = $values_2;
        }
        if ($data->isInitialized('managedFields') && null !== $data->getManagedFields()) {
            $values_3 = [];
            foreach ($data->getManagedFields() as $value_3) {
                $values_3[] = $this->normalizer->normalize($value_3, 'json', $context);
            }
            $dataArray['managedFields'] = $values_3;
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('namespace') && null !== $data->getNamespace()) {
            $dataArray['namespace'] = $data->getNamespace();
        }
        if ($data->isInitialized('ownerReferences') && null !== $data->getOwnerReferences()) {
            $values_4 = [];
            foreach ($data->getOwnerReferences() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['ownerReferences'] = $values_4;
        }
        if ($data->isInitialized('resourceVersion') && null !== $data->getResourceVersion()) {
            $dataArray['resourceVersion'] = $data->getResourceVersion();
        }
        if ($data->isInitialized('selfLink') && null !== $data->getSelfLink()) {
            $dataArray['selfLink'] = $data->getSelfLink();
        }
        if ($data->isInitialized('uid') && null !== $data->getUid()) {
            $dataArray['uid'] = $data->getUid();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApimachineryPkgApisMetaV1ObjectMeta::class => false];
    }
}
