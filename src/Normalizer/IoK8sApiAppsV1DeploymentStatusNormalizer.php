<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiAppsV1DeploymentStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentStatus::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentStatus::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentStatus();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('availableReplicas', $data) && $data['availableReplicas'] !== null) {
            $object->setAvailableReplicas($data['availableReplicas']);
        } elseif (\array_key_exists('availableReplicas', $data) && $data['availableReplicas'] === null) {
            $object->setAvailableReplicas(null);
        }
        if (\array_key_exists('collisionCount', $data) && $data['collisionCount'] !== null) {
            $object->setCollisionCount($data['collisionCount']);
        } elseif (\array_key_exists('collisionCount', $data) && $data['collisionCount'] === null) {
            $object->setCollisionCount(null);
        }
        if (\array_key_exists('conditions', $data) && $data['conditions'] !== null) {
            $values = [];
            foreach ($data['conditions'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentCondition::class, 'json', $context);
            }
            $object->setConditions($values);
        } elseif (\array_key_exists('conditions', $data) && $data['conditions'] === null) {
            $object->setConditions(null);
        }
        if (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] !== null) {
            $object->setObservedGeneration($data['observedGeneration']);
        } elseif (\array_key_exists('observedGeneration', $data) && $data['observedGeneration'] === null) {
            $object->setObservedGeneration(null);
        }
        if (\array_key_exists('readyReplicas', $data) && $data['readyReplicas'] !== null) {
            $object->setReadyReplicas($data['readyReplicas']);
        } elseif (\array_key_exists('readyReplicas', $data) && $data['readyReplicas'] === null) {
            $object->setReadyReplicas(null);
        }
        if (\array_key_exists('replicas', $data) && $data['replicas'] !== null) {
            $object->setReplicas($data['replicas']);
        } elseif (\array_key_exists('replicas', $data) && $data['replicas'] === null) {
            $object->setReplicas(null);
        }
        if (\array_key_exists('terminatingReplicas', $data) && $data['terminatingReplicas'] !== null) {
            $object->setTerminatingReplicas($data['terminatingReplicas']);
        } elseif (\array_key_exists('terminatingReplicas', $data) && $data['terminatingReplicas'] === null) {
            $object->setTerminatingReplicas(null);
        }
        if (\array_key_exists('unavailableReplicas', $data) && $data['unavailableReplicas'] !== null) {
            $object->setUnavailableReplicas($data['unavailableReplicas']);
        } elseif (\array_key_exists('unavailableReplicas', $data) && $data['unavailableReplicas'] === null) {
            $object->setUnavailableReplicas(null);
        }
        if (\array_key_exists('updatedReplicas', $data) && $data['updatedReplicas'] !== null) {
            $object->setUpdatedReplicas($data['updatedReplicas']);
        } elseif (\array_key_exists('updatedReplicas', $data) && $data['updatedReplicas'] === null) {
            $object->setUpdatedReplicas(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('availableReplicas') && null !== $data->getAvailableReplicas()) {
            $dataArray['availableReplicas'] = $data->getAvailableReplicas();
        }
        if ($data->isInitialized('collisionCount') && null !== $data->getCollisionCount()) {
            $dataArray['collisionCount'] = $data->getCollisionCount();
        }
        if ($data->isInitialized('conditions') && null !== $data->getConditions()) {
            $values = [];
            foreach ($data->getConditions() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['conditions'] = $values;
        }
        if ($data->isInitialized('observedGeneration') && null !== $data->getObservedGeneration()) {
            $dataArray['observedGeneration'] = $data->getObservedGeneration();
        }
        if ($data->isInitialized('readyReplicas') && null !== $data->getReadyReplicas()) {
            $dataArray['readyReplicas'] = $data->getReadyReplicas();
        }
        if ($data->isInitialized('replicas') && null !== $data->getReplicas()) {
            $dataArray['replicas'] = $data->getReplicas();
        }
        if ($data->isInitialized('terminatingReplicas') && null !== $data->getTerminatingReplicas()) {
            $dataArray['terminatingReplicas'] = $data->getTerminatingReplicas();
        }
        if ($data->isInitialized('unavailableReplicas') && null !== $data->getUnavailableReplicas()) {
            $dataArray['unavailableReplicas'] = $data->getUnavailableReplicas();
        }
        if ($data->isInitialized('updatedReplicas') && null !== $data->getUpdatedReplicas()) {
            $dataArray['updatedReplicas'] = $data->getUpdatedReplicas();
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiAppsV1DeploymentStatus::class => false];
    }
}
