<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Normalizer;

use Flownative\Kubernetes\Api\Runtime\Normalizer\CheckArray;
use Flownative\Kubernetes\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class IoK8sApiCoreV1ContainerStatusNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus();
        if (\array_key_exists('ready', $data) && \is_int($data['ready'])) {
            $data['ready'] = (bool) $data['ready'];
        }
        if (\array_key_exists('started', $data) && \is_int($data['started'])) {
            $data['started'] = (bool) $data['started'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('allocatedResources', $data) && $data['allocatedResources'] !== null) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['allocatedResources'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setAllocatedResources($values);
        } elseif (\array_key_exists('allocatedResources', $data) && $data['allocatedResources'] === null) {
            $object->setAllocatedResources(null);
        }
        if (\array_key_exists('allocatedResourcesStatus', $data) && $data['allocatedResourcesStatus'] !== null) {
            $values_1 = [];
            foreach ($data['allocatedResourcesStatus'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ResourceStatus::class, 'json', $context);
            }
            $object->setAllocatedResourcesStatus($values_1);
        } elseif (\array_key_exists('allocatedResourcesStatus', $data) && $data['allocatedResourcesStatus'] === null) {
            $object->setAllocatedResourcesStatus(null);
        }
        if (\array_key_exists('containerID', $data) && $data['containerID'] !== null) {
            $object->setContainerID($data['containerID']);
        } elseif (\array_key_exists('containerID', $data) && $data['containerID'] === null) {
            $object->setContainerID(null);
        }
        if (\array_key_exists('image', $data) && $data['image'] !== null) {
            $object->setImage($data['image']);
        } elseif (\array_key_exists('image', $data) && $data['image'] === null) {
            $object->setImage(null);
        }
        if (\array_key_exists('imageID', $data) && $data['imageID'] !== null) {
            $object->setImageID($data['imageID']);
        } elseif (\array_key_exists('imageID', $data) && $data['imageID'] === null) {
            $object->setImageID(null);
        }
        if (\array_key_exists('lastState', $data) && $data['lastState'] !== null) {
            $object->setLastState($this->denormalizer->denormalize($data['lastState'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerState::class, 'json', $context));
        } elseif (\array_key_exists('lastState', $data) && $data['lastState'] === null) {
            $object->setLastState(null);
        }
        if (\array_key_exists('name', $data) && $data['name'] !== null) {
            $object->setName($data['name']);
        } elseif (\array_key_exists('name', $data) && $data['name'] === null) {
            $object->setName(null);
        }
        if (\array_key_exists('ready', $data) && $data['ready'] !== null) {
            $object->setReady($data['ready']);
        } elseif (\array_key_exists('ready', $data) && $data['ready'] === null) {
            $object->setReady(null);
        }
        if (\array_key_exists('resources', $data) && $data['resources'] !== null) {
            $object->setResources($this->denormalizer->denormalize($data['resources'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ResourceRequirements::class, 'json', $context));
        } elseif (\array_key_exists('resources', $data) && $data['resources'] === null) {
            $object->setResources(null);
        }
        if (\array_key_exists('restartCount', $data) && $data['restartCount'] !== null) {
            $object->setRestartCount($data['restartCount']);
        } elseif (\array_key_exists('restartCount', $data) && $data['restartCount'] === null) {
            $object->setRestartCount(null);
        }
        if (\array_key_exists('started', $data) && $data['started'] !== null) {
            $object->setStarted($data['started']);
        } elseif (\array_key_exists('started', $data) && $data['started'] === null) {
            $object->setStarted(null);
        }
        if (\array_key_exists('state', $data) && $data['state'] !== null) {
            $object->setState($this->denormalizer->denormalize($data['state'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerState::class, 'json', $context));
        } elseif (\array_key_exists('state', $data) && $data['state'] === null) {
            $object->setState(null);
        }
        if (\array_key_exists('stopSignal', $data) && $data['stopSignal'] !== null) {
            $object->setStopSignal($data['stopSignal']);
        } elseif (\array_key_exists('stopSignal', $data) && $data['stopSignal'] === null) {
            $object->setStopSignal(null);
        }
        if (\array_key_exists('user', $data) && $data['user'] !== null) {
            $object->setUser($this->denormalizer->denormalize($data['user'], \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerUser::class, 'json', $context));
        } elseif (\array_key_exists('user', $data) && $data['user'] === null) {
            $object->setUser(null);
        }
        if (\array_key_exists('volumeMounts', $data) && $data['volumeMounts'] !== null) {
            $values_2 = [];
            foreach ($data['volumeMounts'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1VolumeMountStatus::class, 'json', $context);
            }
            $object->setVolumeMounts($values_2);
        } elseif (\array_key_exists('volumeMounts', $data) && $data['volumeMounts'] === null) {
            $object->setVolumeMounts(null);
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('allocatedResources') && null !== $data->getAllocatedResources()) {
            $values = [];
            foreach ($data->getAllocatedResources() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['allocatedResources'] = $values;
        }
        if ($data->isInitialized('allocatedResourcesStatus') && null !== $data->getAllocatedResourcesStatus()) {
            $values_1 = [];
            foreach ($data->getAllocatedResourcesStatus() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['allocatedResourcesStatus'] = $values_1;
        }
        if ($data->isInitialized('containerID') && null !== $data->getContainerID()) {
            $dataArray['containerID'] = $data->getContainerID();
        }
        $dataArray['image'] = $data->getImage();
        $dataArray['imageID'] = $data->getImageID();
        if ($data->isInitialized('lastState') && null !== $data->getLastState()) {
            $dataArray['lastState'] = $this->normalizer->normalize($data->getLastState(), 'json', $context);
        }
        $dataArray['name'] = $data->getName();
        $dataArray['ready'] = $data->getReady();
        if ($data->isInitialized('resources') && null !== $data->getResources()) {
            $dataArray['resources'] = $this->normalizer->normalize($data->getResources(), 'json', $context);
        }
        $dataArray['restartCount'] = $data->getRestartCount();
        if ($data->isInitialized('started') && null !== $data->getStarted()) {
            $dataArray['started'] = $data->getStarted();
        }
        if ($data->isInitialized('state') && null !== $data->getState()) {
            $dataArray['state'] = $this->normalizer->normalize($data->getState(), 'json', $context);
        }
        if ($data->isInitialized('stopSignal') && null !== $data->getStopSignal()) {
            $dataArray['stopSignal'] = $data->getStopSignal();
        }
        if ($data->isInitialized('user') && null !== $data->getUser()) {
            $dataArray['user'] = $this->normalizer->normalize($data->getUser(), 'json', $context);
        }
        if ($data->isInitialized('volumeMounts') && null !== $data->getVolumeMounts()) {
            $values_2 = [];
            foreach ($data->getVolumeMounts() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['volumeMounts'] = $values_2;
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Kubernetes\Api\Model\IoK8sApiCoreV1ContainerStatus::class => false];
    }
}
