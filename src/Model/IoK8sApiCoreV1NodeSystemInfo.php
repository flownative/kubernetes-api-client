<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1NodeSystemInfo
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The Architecture reported by the node.
     *
     * @var string|null
     */
    protected $architecture;
    /**
     * Boot ID reported by the node.
     *
     * @var string|null
     */
    protected $bootID;
    /**
     * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     *
     * @var string|null
     */
    protected $containerRuntimeVersion;
    /**
     * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
     *
     * @var string|null
     */
    protected $kernelVersion;
    /**
     * Deprecated: KubeProxy Version reported by the node.
     *
     * @var string|null
     */
    protected $kubeProxyVersion;
    /**
     * Kubelet Version reported by the node.
     *
     * @var string|null
     */
    protected $kubeletVersion;
    /**
     * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html.
     *
     * @var string|null
     */
    protected $machineID;
    /**
     * The Operating System reported by the node.
     *
     * @var string|null
     */
    protected $operatingSystem;
    /**
     * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     *
     * @var string|null
     */
    protected $osImage;
    /**
     * NodeSwapStatus represents swap memory information.
     *
     * @var IoK8sApiCoreV1NodeSwapStatus|null
     */
    protected $swap;
    /**
     * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid.
     *
     * @var string|null
     */
    protected $systemUUID;

    /**
     * The Architecture reported by the node.
     */
    public function getArchitecture(): ?string
    {
        return $this->architecture;
    }

    /**
     * The Architecture reported by the node.
     */
    public function setArchitecture(?string $architecture): self
    {
        $this->initialized['architecture'] = true;
        $this->architecture = $architecture;

        return $this;
    }

    /**
     * Boot ID reported by the node.
     */
    public function getBootID(): ?string
    {
        return $this->bootID;
    }

    /**
     * Boot ID reported by the node.
     */
    public function setBootID(?string $bootID): self
    {
        $this->initialized['bootID'] = true;
        $this->bootID = $bootID;

        return $this;
    }

    /**
     * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     */
    public function getContainerRuntimeVersion(): ?string
    {
        return $this->containerRuntimeVersion;
    }

    /**
     * ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
     */
    public function setContainerRuntimeVersion(?string $containerRuntimeVersion): self
    {
        $this->initialized['containerRuntimeVersion'] = true;
        $this->containerRuntimeVersion = $containerRuntimeVersion;

        return $this;
    }

    /**
     * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
     */
    public function getKernelVersion(): ?string
    {
        return $this->kernelVersion;
    }

    /**
     * Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
     */
    public function setKernelVersion(?string $kernelVersion): self
    {
        $this->initialized['kernelVersion'] = true;
        $this->kernelVersion = $kernelVersion;

        return $this;
    }

    /**
     * Deprecated: KubeProxy Version reported by the node.
     */
    public function getKubeProxyVersion(): ?string
    {
        return $this->kubeProxyVersion;
    }

    /**
     * Deprecated: KubeProxy Version reported by the node.
     */
    public function setKubeProxyVersion(?string $kubeProxyVersion): self
    {
        $this->initialized['kubeProxyVersion'] = true;
        $this->kubeProxyVersion = $kubeProxyVersion;

        return $this;
    }

    /**
     * Kubelet Version reported by the node.
     */
    public function getKubeletVersion(): ?string
    {
        return $this->kubeletVersion;
    }

    /**
     * Kubelet Version reported by the node.
     */
    public function setKubeletVersion(?string $kubeletVersion): self
    {
        $this->initialized['kubeletVersion'] = true;
        $this->kubeletVersion = $kubeletVersion;

        return $this;
    }

    /**
     * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html.
     */
    public function getMachineID(): ?string
    {
        return $this->machineID;
    }

    /**
     * MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html.
     */
    public function setMachineID(?string $machineID): self
    {
        $this->initialized['machineID'] = true;
        $this->machineID = $machineID;

        return $this;
    }

    /**
     * The Operating System reported by the node.
     */
    public function getOperatingSystem(): ?string
    {
        return $this->operatingSystem;
    }

    /**
     * The Operating System reported by the node.
     */
    public function setOperatingSystem(?string $operatingSystem): self
    {
        $this->initialized['operatingSystem'] = true;
        $this->operatingSystem = $operatingSystem;

        return $this;
    }

    /**
     * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     */
    public function getOsImage(): ?string
    {
        return $this->osImage;
    }

    /**
     * OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
     */
    public function setOsImage(?string $osImage): self
    {
        $this->initialized['osImage'] = true;
        $this->osImage = $osImage;

        return $this;
    }

    /**
     * NodeSwapStatus represents swap memory information.
     */
    public function getSwap(): ?IoK8sApiCoreV1NodeSwapStatus
    {
        return $this->swap;
    }

    /**
     * NodeSwapStatus represents swap memory information.
     */
    public function setSwap(?IoK8sApiCoreV1NodeSwapStatus $swap): self
    {
        $this->initialized['swap'] = true;
        $this->swap = $swap;

        return $this;
    }

    /**
     * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid.
     */
    public function getSystemUUID(): ?string
    {
        return $this->systemUUID;
    }

    /**
     * SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid.
     */
    public function setSystemUUID(?string $systemUUID): self
    {
        $this->initialized['systemUUID'] = true;
        $this->systemUUID = $systemUUID;

        return $this;
    }
}
