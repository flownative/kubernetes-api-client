<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ContainerStatus
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
     *
     * @var array<string, string>|null
     */
    protected $allocatedResources;
    /**
     * AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
     *
     * @var list<IoK8sApiCoreV1ResourceStatus>|null
     */
    protected $allocatedResourcesStatus;
    /**
     * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
     *
     * @var string|null
     */
    protected $containerID;
    /**
     * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
     *
     * @var string|null
     */
    protected $image;
    /**
     * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
     *
     * @var string|null
     */
    protected $imageID;
    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     *
     * @var IoK8sApiCoreV1ContainerState|null
     */
    protected $lastState;
    /**
     * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
     *
     * The value is typically used to determine whether a container is ready to accept traffic.
     *
     * @var bool|null
     */
    protected $ready;
    /**
     * ResourceRequirements describes the compute resource requirements.
     *
     * @var IoK8sApiCoreV1ResourceRequirements|null
     */
    protected $resources;
    /**
     * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
     *
     * @var int|null
     */
    protected $restartCount;
    /**
     * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
     *
     * @var bool|null
     */
    protected $started;
    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     *
     * @var IoK8sApiCoreV1ContainerState|null
     */
    protected $state;
    /**
     * StopSignal reports the effective stop signal for this container.
     *
     * @var string|null
     */
    protected $stopSignal;
    /**
     * ContainerUser represents user identity information.
     *
     * @var IoK8sApiCoreV1ContainerUser|null
     */
    protected $user;
    /**
     * Status of volume mounts.
     *
     * @var list<IoK8sApiCoreV1VolumeMountStatus>|null
     */
    protected $volumeMounts;

    /**
     * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
     *
     * @return array<string, string>|null
     */
    public function getAllocatedResources(): ?iterable
    {
        return $this->allocatedResources;
    }

    /**
     * AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.
     *
     * @param array<string, string>|null $allocatedResources
     */
    public function setAllocatedResources(?iterable $allocatedResources): self
    {
        $this->initialized['allocatedResources'] = true;
        $this->allocatedResources = $allocatedResources;

        return $this;
    }

    /**
     * AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
     *
     * @return list<IoK8sApiCoreV1ResourceStatus>|null
     */
    public function getAllocatedResourcesStatus(): ?array
    {
        return $this->allocatedResourcesStatus;
    }

    /**
     * AllocatedResourcesStatus represents the status of various resources allocated for this Pod.
     *
     * @param list<IoK8sApiCoreV1ResourceStatus>|null $allocatedResourcesStatus
     */
    public function setAllocatedResourcesStatus(?array $allocatedResourcesStatus): self
    {
        $this->initialized['allocatedResourcesStatus'] = true;
        $this->allocatedResourcesStatus = $allocatedResourcesStatus;

        return $this;
    }

    /**
     * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
     */
    public function getContainerID(): ?string
    {
        return $this->containerID;
    }

    /**
     * ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example "containerd").
     */
    public function setContainerID(?string $containerID): self
    {
        $this->initialized['containerID'] = true;
        $this->containerID = $containerID;

        return $this;
    }

    /**
     * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
     */
    public function getImage(): ?string
    {
        return $this->image;
    }

    /**
     * Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.
     */
    public function setImage(?string $image): self
    {
        $this->initialized['image'] = true;
        $this->image = $image;

        return $this;
    }

    /**
     * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
     */
    public function getImageID(): ?string
    {
        return $this->imageID;
    }

    /**
     * ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.
     */
    public function setImageID(?string $imageID): self
    {
        $this->initialized['imageID'] = true;
        $this->imageID = $imageID;

        return $this;
    }

    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    public function getLastState(): ?IoK8sApiCoreV1ContainerState
    {
        return $this->lastState;
    }

    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    public function setLastState(?IoK8sApiCoreV1ContainerState $lastState): self
    {
        $this->initialized['lastState'] = true;
        $this->lastState = $lastState;

        return $this;
    }

    /**
     * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
     *
     * The value is typically used to determine whether a container is ready to accept traffic.
     */
    public function getReady(): ?bool
    {
        return $this->ready;
    }

    /**
     * Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).
     *
     * The value is typically used to determine whether a container is ready to accept traffic.
     */
    public function setReady(?bool $ready): self
    {
        $this->initialized['ready'] = true;
        $this->ready = $ready;

        return $this;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function getResources(): ?IoK8sApiCoreV1ResourceRequirements
    {
        return $this->resources;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function setResources(?IoK8sApiCoreV1ResourceRequirements $resources): self
    {
        $this->initialized['resources'] = true;
        $this->resources = $resources;

        return $this;
    }

    /**
     * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
     */
    public function getRestartCount(): ?int
    {
        return $this->restartCount;
    }

    /**
     * RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.
     */
    public function setRestartCount(?int $restartCount): self
    {
        $this->initialized['restartCount'] = true;
        $this->restartCount = $restartCount;

        return $this;
    }

    /**
     * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
     */
    public function getStarted(): ?bool
    {
        return $this->started;
    }

    /**
     * Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.
     */
    public function setStarted(?bool $started): self
    {
        $this->initialized['started'] = true;
        $this->started = $started;

        return $this;
    }

    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    public function getState(): ?IoK8sApiCoreV1ContainerState
    {
        return $this->state;
    }

    /**
     * ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
     */
    public function setState(?IoK8sApiCoreV1ContainerState $state): self
    {
        $this->initialized['state'] = true;
        $this->state = $state;

        return $this;
    }

    /**
     * StopSignal reports the effective stop signal for this container.
     */
    public function getStopSignal(): ?string
    {
        return $this->stopSignal;
    }

    /**
     * StopSignal reports the effective stop signal for this container.
     */
    public function setStopSignal(?string $stopSignal): self
    {
        $this->initialized['stopSignal'] = true;
        $this->stopSignal = $stopSignal;

        return $this;
    }

    /**
     * ContainerUser represents user identity information.
     */
    public function getUser(): ?IoK8sApiCoreV1ContainerUser
    {
        return $this->user;
    }

    /**
     * ContainerUser represents user identity information.
     */
    public function setUser(?IoK8sApiCoreV1ContainerUser $user): self
    {
        $this->initialized['user'] = true;
        $this->user = $user;

        return $this;
    }

    /**
     * Status of volume mounts.
     *
     * @return list<IoK8sApiCoreV1VolumeMountStatus>|null
     */
    public function getVolumeMounts(): ?array
    {
        return $this->volumeMounts;
    }

    /**
     * Status of volume mounts.
     *
     * @param list<IoK8sApiCoreV1VolumeMountStatus>|null $volumeMounts
     */
    public function setVolumeMounts(?array $volumeMounts): self
    {
        $this->initialized['volumeMounts'] = true;
        $this->volumeMounts = $volumeMounts;

        return $this;
    }
}
