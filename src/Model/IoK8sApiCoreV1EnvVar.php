<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1EnvVar
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     *
     * @var string|null
     */
    protected $value;
    /**
     * EnvVarSource represents a source for the value of an EnvVar.
     *
     * @var IoK8sApiCoreV1EnvVarSource|null
     */
    protected $valueFrom;

    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    public function getValue(): ?string
    {
        return $this->value;
    }

    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     */
    public function setValue(?string $value): self
    {
        $this->initialized['value'] = true;
        $this->value = $value;

        return $this;
    }

    /**
     * EnvVarSource represents a source for the value of an EnvVar.
     */
    public function getValueFrom(): ?IoK8sApiCoreV1EnvVarSource
    {
        return $this->valueFrom;
    }

    /**
     * EnvVarSource represents a source for the value of an EnvVar.
     */
    public function setValueFrom(?IoK8sApiCoreV1EnvVarSource $valueFrom): self
    {
        $this->initialized['valueFrom'] = true;
        $this->valueFrom = $valueFrom;

        return $this;
    }
}
