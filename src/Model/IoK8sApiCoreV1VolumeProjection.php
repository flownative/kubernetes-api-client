<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1VolumeProjection
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
     *
     * @var IoK8sApiCoreV1ClusterTrustBundleProjection|null
     */
    protected $clusterTrustBundle;
    /**
     * Adapts a ConfigMap into a projected volume.
     *
     * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
     *
     * @var IoK8sApiCoreV1ConfigMapProjection|null
     */
    protected $configMap;
    /**
     * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
     *
     * @var IoK8sApiCoreV1DownwardAPIProjection|null
     */
    protected $downwardAPI;
    /**
     * Adapts a secret into a projected volume.
     *
     * The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
     *
     * @var IoK8sApiCoreV1SecretProjection|null
     */
    protected $secret;
    /**
     * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
     *
     * @var IoK8sApiCoreV1ServiceAccountTokenProjection|null
     */
    protected $serviceAccountToken;

    /**
     * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
     */
    public function getClusterTrustBundle(): ?IoK8sApiCoreV1ClusterTrustBundleProjection
    {
        return $this->clusterTrustBundle;
    }

    /**
     * ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
     */
    public function setClusterTrustBundle(?IoK8sApiCoreV1ClusterTrustBundleProjection $clusterTrustBundle): self
    {
        $this->initialized['clusterTrustBundle'] = true;
        $this->clusterTrustBundle = $clusterTrustBundle;

        return $this;
    }

    /**
     * Adapts a ConfigMap into a projected volume.
     *
     * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
     */
    public function getConfigMap(): ?IoK8sApiCoreV1ConfigMapProjection
    {
        return $this->configMap;
    }

    /**
     * Adapts a ConfigMap into a projected volume.
     *
     * The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
     */
    public function setConfigMap(?IoK8sApiCoreV1ConfigMapProjection $configMap): self
    {
        $this->initialized['configMap'] = true;
        $this->configMap = $configMap;

        return $this;
    }

    /**
     * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
     */
    public function getDownwardAPI(): ?IoK8sApiCoreV1DownwardAPIProjection
    {
        return $this->downwardAPI;
    }

    /**
     * Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
     */
    public function setDownwardAPI(?IoK8sApiCoreV1DownwardAPIProjection $downwardAPI): self
    {
        $this->initialized['downwardAPI'] = true;
        $this->downwardAPI = $downwardAPI;

        return $this;
    }

    /**
     * Adapts a secret into a projected volume.
     *
     * The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
     */
    public function getSecret(): ?IoK8sApiCoreV1SecretProjection
    {
        return $this->secret;
    }

    /**
     * Adapts a secret into a projected volume.
     *
     * The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
     */
    public function setSecret(?IoK8sApiCoreV1SecretProjection $secret): self
    {
        $this->initialized['secret'] = true;
        $this->secret = $secret;

        return $this;
    }

    /**
     * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
     */
    public function getServiceAccountToken(): ?IoK8sApiCoreV1ServiceAccountTokenProjection
    {
        return $this->serviceAccountToken;
    }

    /**
     * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
     */
    public function setServiceAccountToken(?IoK8sApiCoreV1ServiceAccountTokenProjection $serviceAccountToken): self
    {
        $this->initialized['serviceAccountToken'] = true;
        $this->serviceAccountToken = $serviceAccountToken;

        return $this;
    }
}
