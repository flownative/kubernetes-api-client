<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1DownwardAPIVolumeFile
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ObjectFieldSelector selects an APIVersioned field of an object.
     *
     * @var IoK8sApiCoreV1ObjectFieldSelector|null
     */
    protected $fieldRef;
    /**
     * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     *
     * @var int|null
     */
    protected $mode;
    /**
     * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'.
     *
     * @var string|null
     */
    protected $path;
    /**
     * ResourceFieldSelector represents container resources (cpu, memory) and their output format.
     *
     * @var IoK8sApiCoreV1ResourceFieldSelector|null
     */
    protected $resourceFieldRef;

    /**
     * ObjectFieldSelector selects an APIVersioned field of an object.
     */
    public function getFieldRef(): ?IoK8sApiCoreV1ObjectFieldSelector
    {
        return $this->fieldRef;
    }

    /**
     * ObjectFieldSelector selects an APIVersioned field of an object.
     */
    public function setFieldRef(?IoK8sApiCoreV1ObjectFieldSelector $fieldRef): self
    {
        $this->initialized['fieldRef'] = true;
        $this->fieldRef = $fieldRef;

        return $this;
    }

    /**
     * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    public function getMode(): ?int
    {
        return $this->mode;
    }

    /**
     * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     */
    public function setMode(?int $mode): self
    {
        $this->initialized['mode'] = true;
        $this->mode = $mode;

        return $this;
    }

    /**
     * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'.
     */
    public function getPath(): ?string
    {
        return $this->path;
    }

    /**
     * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'.
     */
    public function setPath(?string $path): self
    {
        $this->initialized['path'] = true;
        $this->path = $path;

        return $this;
    }

    /**
     * ResourceFieldSelector represents container resources (cpu, memory) and their output format.
     */
    public function getResourceFieldRef(): ?IoK8sApiCoreV1ResourceFieldSelector
    {
        return $this->resourceFieldRef;
    }

    /**
     * ResourceFieldSelector represents container resources (cpu, memory) and their output format.
     */
    public function setResourceFieldRef(?IoK8sApiCoreV1ResourceFieldSelector $resourceFieldRef): self
    {
        $this->initialized['resourceFieldRef'] = true;
        $this->resourceFieldRef = $resourceFieldRef;

        return $this;
    }
}
