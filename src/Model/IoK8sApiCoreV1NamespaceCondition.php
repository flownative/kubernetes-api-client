<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1NamespaceCondition
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     *
     * @var \DateTimeInterface|null
     */
    protected $lastTransitionTime;
    /**
     * Human-readable message indicating details about last transition.
     *
     * @var string|null
     */
    protected $message;
    /**
     * Unique, one-word, CamelCase reason for the condition's last transition.
     *
     * @var string|null
     */
    protected $reason;
    /**
     * Status of the condition, one of True, False, Unknown.
     *
     * @var string|null
     */
    protected $status;
    /**
     * Type of namespace controller condition.
     *
     * @var string|null
     */
    protected $type;

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function getLastTransitionTime(): ?\DateTimeInterface
    {
        return $this->lastTransitionTime;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function setLastTransitionTime(?\DateTimeInterface $lastTransitionTime): self
    {
        $this->initialized['lastTransitionTime'] = true;
        $this->lastTransitionTime = $lastTransitionTime;

        return $this;
    }

    /**
     * Human-readable message indicating details about last transition.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Human-readable message indicating details about last transition.
     */
    public function setMessage(?string $message): self
    {
        $this->initialized['message'] = true;
        $this->message = $message;

        return $this;
    }

    /**
     * Unique, one-word, CamelCase reason for the condition's last transition.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Unique, one-word, CamelCase reason for the condition's last transition.
     */
    public function setReason(?string $reason): self
    {
        $this->initialized['reason'] = true;
        $this->reason = $reason;

        return $this;
    }

    /**
     * Status of the condition, one of True, False, Unknown.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Status of the condition, one of True, False, Unknown.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * Type of namespace controller condition.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Type of namespace controller condition.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }
}
