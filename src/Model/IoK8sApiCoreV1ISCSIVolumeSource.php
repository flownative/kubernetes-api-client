<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ISCSIVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication.
     *
     * @var bool|null
     */
    protected $chapAuthDiscovery;
    /**
     * chapAuthSession defines whether support iSCSI Session CHAP authentication.
     *
     * @var bool|null
     */
    protected $chapAuthSession;
    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.
     *
     * @var string|null
     */
    protected $fsType;
    /**
     * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     *
     * @var string|null
     */
    protected $initiatorName;
    /**
     * iqn is the target iSCSI Qualified Name.
     *
     * @var string|null
     */
    protected $iqn;
    /**
     * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     *
     * @var string|null
     */
    protected $iscsiInterface;
    /**
     * lun represents iSCSI Target Lun number.
     *
     * @var int|null
     */
    protected $lun;
    /**
     * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @var list<string>|null
     */
    protected $portals;
    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     *
     * @var IoK8sApiCoreV1LocalObjectReference|null
     */
    protected $secretRef;
    /**
     * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @var string|null
     */
    protected $targetPortal;

    /**
     * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication.
     */
    public function getChapAuthDiscovery(): ?bool
    {
        return $this->chapAuthDiscovery;
    }

    /**
     * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication.
     */
    public function setChapAuthDiscovery(?bool $chapAuthDiscovery): self
    {
        $this->initialized['chapAuthDiscovery'] = true;
        $this->chapAuthDiscovery = $chapAuthDiscovery;

        return $this;
    }

    /**
     * chapAuthSession defines whether support iSCSI Session CHAP authentication.
     */
    public function getChapAuthSession(): ?bool
    {
        return $this->chapAuthSession;
    }

    /**
     * chapAuthSession defines whether support iSCSI Session CHAP authentication.
     */
    public function setChapAuthSession(?bool $chapAuthSession): self
    {
        $this->initialized['chapAuthSession'] = true;
        $this->chapAuthSession = $chapAuthSession;

        return $this;
    }

    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.
     */
    public function getFsType(): ?string
    {
        return $this->fsType;
    }

    /**
     * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.
     */
    public function setFsType(?string $fsType): self
    {
        $this->initialized['fsType'] = true;
        $this->fsType = $fsType;

        return $this;
    }

    /**
     * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     */
    public function getInitiatorName(): ?string
    {
        return $this->initiatorName;
    }

    /**
     * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     */
    public function setInitiatorName(?string $initiatorName): self
    {
        $this->initialized['initiatorName'] = true;
        $this->initiatorName = $initiatorName;

        return $this;
    }

    /**
     * iqn is the target iSCSI Qualified Name.
     */
    public function getIqn(): ?string
    {
        return $this->iqn;
    }

    /**
     * iqn is the target iSCSI Qualified Name.
     */
    public function setIqn(?string $iqn): self
    {
        $this->initialized['iqn'] = true;
        $this->iqn = $iqn;

        return $this;
    }

    /**
     * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    public function getIscsiInterface(): ?string
    {
        return $this->iscsiInterface;
    }

    /**
     * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     */
    public function setIscsiInterface(?string $iscsiInterface): self
    {
        $this->initialized['iscsiInterface'] = true;
        $this->iscsiInterface = $iscsiInterface;

        return $this;
    }

    /**
     * lun represents iSCSI Target Lun number.
     */
    public function getLun(): ?int
    {
        return $this->lun;
    }

    /**
     * lun represents iSCSI Target Lun number.
     */
    public function setLun(?int $lun): self
    {
        $this->initialized['lun'] = true;
        $this->lun = $lun;

        return $this;
    }

    /**
     * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @return list<string>|null
     */
    public function getPortals(): ?array
    {
        return $this->portals;
    }

    /**
     * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     *
     * @param list<string>|null $portals
     */
    public function setPortals(?array $portals): self
    {
        $this->initialized['portals'] = true;
        $this->portals = $portals;

        return $this;
    }

    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function getSecretRef(): ?IoK8sApiCoreV1LocalObjectReference
    {
        return $this->secretRef;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function setSecretRef(?IoK8sApiCoreV1LocalObjectReference $secretRef): self
    {
        $this->initialized['secretRef'] = true;
        $this->secretRef = $secretRef;

        return $this;
    }

    /**
     * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    public function getTargetPortal(): ?string
    {
        return $this->targetPortal;
    }

    /**
     * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     */
    public function setTargetPortal(?string $targetPortal): self
    {
        $this->initialized['targetPortal'] = true;
        $this->targetPortal = $targetPortal;

        return $this;
    }
}
