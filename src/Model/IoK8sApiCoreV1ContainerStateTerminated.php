<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ContainerStateTerminated
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Container's ID in the format '<type>://<container_id>'.
     *
     * @var string|null
     */
    protected $containerID;
    /**
     * Exit status from the last termination of the container.
     *
     * @var int|null
     */
    protected $exitCode;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     *
     * @var \DateTimeInterface|null
     */
    protected $finishedAt;
    /**
     * Message regarding the last termination of the container.
     *
     * @var string|null
     */
    protected $message;
    /**
     * (brief) reason from the last termination of the container.
     *
     * @var string|null
     */
    protected $reason;
    /**
     * Signal from the last termination of the container.
     *
     * @var int|null
     */
    protected $signal;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     *
     * @var \DateTimeInterface|null
     */
    protected $startedAt;

    /**
     * Container's ID in the format '<type>://<container_id>'.
     */
    public function getContainerID(): ?string
    {
        return $this->containerID;
    }

    /**
     * Container's ID in the format '<type>://<container_id>'.
     */
    public function setContainerID(?string $containerID): self
    {
        $this->initialized['containerID'] = true;
        $this->containerID = $containerID;

        return $this;
    }

    /**
     * Exit status from the last termination of the container.
     */
    public function getExitCode(): ?int
    {
        return $this->exitCode;
    }

    /**
     * Exit status from the last termination of the container.
     */
    public function setExitCode(?int $exitCode): self
    {
        $this->initialized['exitCode'] = true;
        $this->exitCode = $exitCode;

        return $this;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function getFinishedAt(): ?\DateTimeInterface
    {
        return $this->finishedAt;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function setFinishedAt(?\DateTimeInterface $finishedAt): self
    {
        $this->initialized['finishedAt'] = true;
        $this->finishedAt = $finishedAt;

        return $this;
    }

    /**
     * Message regarding the last termination of the container.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Message regarding the last termination of the container.
     */
    public function setMessage(?string $message): self
    {
        $this->initialized['message'] = true;
        $this->message = $message;

        return $this;
    }

    /**
     * (brief) reason from the last termination of the container.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * (brief) reason from the last termination of the container.
     */
    public function setReason(?string $reason): self
    {
        $this->initialized['reason'] = true;
        $this->reason = $reason;

        return $this;
    }

    /**
     * Signal from the last termination of the container.
     */
    public function getSignal(): ?int
    {
        return $this->signal;
    }

    /**
     * Signal from the last termination of the container.
     */
    public function setSignal(?int $signal): self
    {
        $this->initialized['signal'] = true;
        $this->signal = $signal;

        return $this;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function getStartedAt(): ?\DateTimeInterface
    {
        return $this->startedAt;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function setStartedAt(?\DateTimeInterface $startedAt): self
    {
        $this->initialized['startedAt'] = true;
        $this->startedAt = $startedAt;

        return $this;
    }
}
