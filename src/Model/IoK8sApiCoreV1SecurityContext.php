<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1SecurityContext
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     *
     * @var bool|null
     */
    protected $allowPrivilegeEscalation;
    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     *
     * @var IoK8sApiCoreV1AppArmorProfile|null
     */
    protected $appArmorProfile;
    /**
     * Adds and removes POSIX capabilities from running containers.
     *
     * @var IoK8sApiCoreV1Capabilities|null
     */
    protected $capabilities;
    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var bool|null
     */
    protected $privileged;
    /**
     * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var string|null
     */
    protected $procMount;
    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var bool|null
     */
    protected $readOnlyRootFilesystem;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var int|null
     */
    protected $runAsGroup;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @var bool|null
     */
    protected $runAsNonRoot;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var int|null
     */
    protected $runAsUser;
    /**
     * SELinuxOptions are the labels to be applied to the container.
     *
     * @var IoK8sApiCoreV1SELinuxOptions|null
     */
    protected $seLinuxOptions;
    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     *
     * @var IoK8sApiCoreV1SeccompProfile|null
     */
    protected $seccompProfile;
    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     *
     * @var IoK8sApiCoreV1WindowsSecurityContextOptions|null
     */
    protected $windowsOptions;

    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     */
    public function getAllowPrivilegeEscalation(): ?bool
    {
        return $this->allowPrivilegeEscalation;
    }

    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     */
    public function setAllowPrivilegeEscalation(?bool $allowPrivilegeEscalation): self
    {
        $this->initialized['allowPrivilegeEscalation'] = true;
        $this->allowPrivilegeEscalation = $allowPrivilegeEscalation;

        return $this;
    }

    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    public function getAppArmorProfile(): ?IoK8sApiCoreV1AppArmorProfile
    {
        return $this->appArmorProfile;
    }

    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    public function setAppArmorProfile(?IoK8sApiCoreV1AppArmorProfile $appArmorProfile): self
    {
        $this->initialized['appArmorProfile'] = true;
        $this->appArmorProfile = $appArmorProfile;

        return $this;
    }

    /**
     * Adds and removes POSIX capabilities from running containers.
     */
    public function getCapabilities(): ?IoK8sApiCoreV1Capabilities
    {
        return $this->capabilities;
    }

    /**
     * Adds and removes POSIX capabilities from running containers.
     */
    public function setCapabilities(?IoK8sApiCoreV1Capabilities $capabilities): self
    {
        $this->initialized['capabilities'] = true;
        $this->capabilities = $capabilities;

        return $this;
    }

    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getPrivileged(): ?bool
    {
        return $this->privileged;
    }

    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setPrivileged(?bool $privileged): self
    {
        $this->initialized['privileged'] = true;
        $this->privileged = $privileged;

        return $this;
    }

    /**
     * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getProcMount(): ?string
    {
        return $this->procMount;
    }

    /**
     * procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setProcMount(?string $procMount): self
    {
        $this->initialized['procMount'] = true;
        $this->procMount = $procMount;

        return $this;
    }

    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getReadOnlyRootFilesystem(): ?bool
    {
        return $this->readOnlyRootFilesystem;
    }

    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setReadOnlyRootFilesystem(?bool $readOnlyRootFilesystem): self
    {
        $this->initialized['readOnlyRootFilesystem'] = true;
        $this->readOnlyRootFilesystem = $readOnlyRootFilesystem;

        return $this;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getRunAsGroup(): ?int
    {
        return $this->runAsGroup;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setRunAsGroup(?int $runAsGroup): self
    {
        $this->initialized['runAsGroup'] = true;
        $this->runAsGroup = $runAsGroup;

        return $this;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    public function getRunAsNonRoot(): ?bool
    {
        return $this->runAsNonRoot;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    public function setRunAsNonRoot(?bool $runAsNonRoot): self
    {
        $this->initialized['runAsNonRoot'] = true;
        $this->runAsNonRoot = $runAsNonRoot;

        return $this;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getRunAsUser(): ?int
    {
        return $this->runAsUser;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setRunAsUser(?int $runAsUser): self
    {
        $this->initialized['runAsUser'] = true;
        $this->runAsUser = $runAsUser;

        return $this;
    }

    /**
     * SELinuxOptions are the labels to be applied to the container.
     */
    public function getSeLinuxOptions(): ?IoK8sApiCoreV1SELinuxOptions
    {
        return $this->seLinuxOptions;
    }

    /**
     * SELinuxOptions are the labels to be applied to the container.
     */
    public function setSeLinuxOptions(?IoK8sApiCoreV1SELinuxOptions $seLinuxOptions): self
    {
        $this->initialized['seLinuxOptions'] = true;
        $this->seLinuxOptions = $seLinuxOptions;

        return $this;
    }

    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    public function getSeccompProfile(): ?IoK8sApiCoreV1SeccompProfile
    {
        return $this->seccompProfile;
    }

    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    public function setSeccompProfile(?IoK8sApiCoreV1SeccompProfile $seccompProfile): self
    {
        $this->initialized['seccompProfile'] = true;
        $this->seccompProfile = $seccompProfile;

        return $this;
    }

    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    public function getWindowsOptions(): ?IoK8sApiCoreV1WindowsSecurityContextOptions
    {
        return $this->windowsOptions;
    }

    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    public function setWindowsOptions(?IoK8sApiCoreV1WindowsSecurityContextOptions $windowsOptions): self
    {
        $this->initialized['windowsOptions'] = true;
        $this->windowsOptions = $windowsOptions;

        return $this;
    }
}
