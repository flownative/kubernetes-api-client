<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1FlexVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * driver is the name of the driver to use for this volume.
     *
     * @var string|null
     */
    protected $driver;
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     *
     * @var string|null
     */
    protected $fsType;
    /**
     * options is Optional: this field holds extra command options if any.
     *
     * @var array<string, string>|null
     */
    protected $options;
    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     *
     * @var IoK8sApiCoreV1LocalObjectReference|null
     */
    protected $secretRef;

    /**
     * driver is the name of the driver to use for this volume.
     */
    public function getDriver(): ?string
    {
        return $this->driver;
    }

    /**
     * driver is the name of the driver to use for this volume.
     */
    public function setDriver(?string $driver): self
    {
        $this->initialized['driver'] = true;
        $this->driver = $driver;

        return $this;
    }

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    public function getFsType(): ?string
    {
        return $this->fsType;
    }

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     */
    public function setFsType(?string $fsType): self
    {
        $this->initialized['fsType'] = true;
        $this->fsType = $fsType;

        return $this;
    }

    /**
     * options is Optional: this field holds extra command options if any.
     *
     * @return array<string, string>|null
     */
    public function getOptions(): ?iterable
    {
        return $this->options;
    }

    /**
     * options is Optional: this field holds extra command options if any.
     *
     * @param array<string, string>|null $options
     */
    public function setOptions(?iterable $options): self
    {
        $this->initialized['options'] = true;
        $this->options = $options;

        return $this;
    }

    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function getSecretRef(): ?IoK8sApiCoreV1LocalObjectReference
    {
        return $this->secretRef;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function setSecretRef(?IoK8sApiCoreV1LocalObjectReference $secretRef): self
    {
        $this->initialized['secretRef'] = true;
        $this->secretRef = $secretRef;

        return $this;
    }
}
