<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1PersistentVolumeClaimSpec
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
     *
     * @var list<string>|null
     */
    protected $accessModes;
    /**
     * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
     *
     * @var IoK8sApiCoreV1TypedLocalObjectReference|null
     */
    protected $dataSource;
    /**
     * TypedObjectReference contains enough information to let you locate the typed referenced object.
     *
     * @var IoK8sApiCoreV1TypedObjectReference|null
     */
    protected $dataSourceRef;
    /**
     * VolumeResourceRequirements describes the storage resource requirements for a volume.
     *
     * @var IoK8sApiCoreV1VolumeResourceRequirements|null
     */
    protected $resources;
    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     *
     * @var IoK8sApimachineryPkgApisMetaV1LabelSelector|null
     */
    protected $selector;
    /**
     * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.
     *
     * @var string|null
     */
    protected $storageClassName;
    /**
     * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
     *
     * @var string|null
     */
    protected $volumeAttributesClassName;
    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     *
     * @var string|null
     */
    protected $volumeMode;
    /**
     * volumeName is the binding reference to the PersistentVolume backing this claim.
     *
     * @var string|null
     */
    protected $volumeName;

    /**
     * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
     *
     * @return list<string>|null
     */
    public function getAccessModes(): ?array
    {
        return $this->accessModes;
    }

    /**
     * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
     *
     * @param list<string>|null $accessModes
     */
    public function setAccessModes(?array $accessModes): self
    {
        $this->initialized['accessModes'] = true;
        $this->accessModes = $accessModes;

        return $this;
    }

    /**
     * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
     */
    public function getDataSource(): ?IoK8sApiCoreV1TypedLocalObjectReference
    {
        return $this->dataSource;
    }

    /**
     * TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
     */
    public function setDataSource(?IoK8sApiCoreV1TypedLocalObjectReference $dataSource): self
    {
        $this->initialized['dataSource'] = true;
        $this->dataSource = $dataSource;

        return $this;
    }

    /**
     * TypedObjectReference contains enough information to let you locate the typed referenced object.
     */
    public function getDataSourceRef(): ?IoK8sApiCoreV1TypedObjectReference
    {
        return $this->dataSourceRef;
    }

    /**
     * TypedObjectReference contains enough information to let you locate the typed referenced object.
     */
    public function setDataSourceRef(?IoK8sApiCoreV1TypedObjectReference $dataSourceRef): self
    {
        $this->initialized['dataSourceRef'] = true;
        $this->dataSourceRef = $dataSourceRef;

        return $this;
    }

    /**
     * VolumeResourceRequirements describes the storage resource requirements for a volume.
     */
    public function getResources(): ?IoK8sApiCoreV1VolumeResourceRequirements
    {
        return $this->resources;
    }

    /**
     * VolumeResourceRequirements describes the storage resource requirements for a volume.
     */
    public function setResources(?IoK8sApiCoreV1VolumeResourceRequirements $resources): self
    {
        $this->initialized['resources'] = true;
        $this->resources = $resources;

        return $this;
    }

    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    public function getSelector(): ?IoK8sApimachineryPkgApisMetaV1LabelSelector
    {
        return $this->selector;
    }

    /**
     * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
     */
    public function setSelector(?IoK8sApimachineryPkgApisMetaV1LabelSelector $selector): self
    {
        $this->initialized['selector'] = true;
        $this->selector = $selector;

        return $this;
    }

    /**
     * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.
     */
    public function getStorageClassName(): ?string
    {
        return $this->storageClassName;
    }

    /**
     * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1.
     */
    public function setStorageClassName(?string $storageClassName): self
    {
        $this->initialized['storageClassName'] = true;
        $this->storageClassName = $storageClassName;

        return $this;
    }

    /**
     * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
     */
    public function getVolumeAttributesClassName(): ?string
    {
        return $this->volumeAttributesClassName;
    }

    /**
     * volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
     */
    public function setVolumeAttributesClassName(?string $volumeAttributesClassName): self
    {
        $this->initialized['volumeAttributesClassName'] = true;
        $this->volumeAttributesClassName = $volumeAttributesClassName;

        return $this;
    }

    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     */
    public function getVolumeMode(): ?string
    {
        return $this->volumeMode;
    }

    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     */
    public function setVolumeMode(?string $volumeMode): self
    {
        $this->initialized['volumeMode'] = true;
        $this->volumeMode = $volumeMode;

        return $this;
    }

    /**
     * volumeName is the binding reference to the PersistentVolume backing this claim.
     */
    public function getVolumeName(): ?string
    {
        return $this->volumeName;
    }

    /**
     * volumeName is the binding reference to the PersistentVolume backing this claim.
     */
    public function setVolumeName(?string $volumeName): self
    {
        $this->initialized['volumeName'] = true;
        $this->volumeName = $volumeName;

        return $this;
    }
}
