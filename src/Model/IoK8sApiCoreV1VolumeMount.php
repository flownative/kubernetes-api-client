<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1VolumeMount
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     *
     * @var string|null
     */
    protected $mountPath;
    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     *
     * @var string|null
     */
    protected $mountPropagation;
    /**
     * This must match the Name of a Volume.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
     *
     * If ReadOnly is false, this field has no meaning and must be unspecified.
     *
     * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
     *
     * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
     *
     * If this field is not specified, it is treated as an equivalent of Disabled.
     *
     * @var string|null
     */
    protected $recursiveReadOnly;
    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     *
     * @var string|null
     */
    protected $subPath;
    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     *
     * @var string|null
     */
    protected $subPathExpr;

    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     */
    public function getMountPath(): ?string
    {
        return $this->mountPath;
    }

    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     */
    public function setMountPath(?string $mountPath): self
    {
        $this->initialized['mountPath'] = true;
        $this->mountPath = $mountPath;

        return $this;
    }

    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     */
    public function getMountPropagation(): ?string
    {
        return $this->mountPropagation;
    }

    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
     */
    public function setMountPropagation(?string $mountPropagation): self
    {
        $this->initialized['mountPropagation'] = true;
        $this->mountPropagation = $mountPropagation;

        return $this;
    }

    /**
     * This must match the Name of a Volume.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * This must match the Name of a Volume.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
     *
     * If ReadOnly is false, this field has no meaning and must be unspecified.
     *
     * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
     *
     * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
     *
     * If this field is not specified, it is treated as an equivalent of Disabled.
     */
    public function getRecursiveReadOnly(): ?string
    {
        return $this->recursiveReadOnly;
    }

    /**
     * RecursiveReadOnly specifies whether read-only mounts should be handled recursively.
     *
     * If ReadOnly is false, this field has no meaning and must be unspecified.
     *
     * If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.
     *
     * If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).
     *
     * If this field is not specified, it is treated as an equivalent of Disabled.
     */
    public function setRecursiveReadOnly(?string $recursiveReadOnly): self
    {
        $this->initialized['recursiveReadOnly'] = true;
        $this->recursiveReadOnly = $recursiveReadOnly;

        return $this;
    }

    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    public function getSubPath(): ?string
    {
        return $this->subPath;
    }

    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     */
    public function setSubPath(?string $subPath): self
    {
        $this->initialized['subPath'] = true;
        $this->subPath = $subPath;

        return $this;
    }

    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     */
    public function getSubPathExpr(): ?string
    {
        return $this->subPathExpr;
    }

    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     */
    public function setSubPathExpr(?string $subPathExpr): self
    {
        $this->initialized['subPathExpr'] = true;
        $this->subPathExpr = $subPathExpr;

        return $this;
    }
}
