<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ContainerState
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ContainerStateRunning is a running state of a container.
     *
     * @var IoK8sApiCoreV1ContainerStateRunning|null
     */
    protected $running;
    /**
     * ContainerStateTerminated is a terminated state of a container.
     *
     * @var IoK8sApiCoreV1ContainerStateTerminated|null
     */
    protected $terminated;
    /**
     * ContainerStateWaiting is a waiting state of a container.
     *
     * @var IoK8sApiCoreV1ContainerStateWaiting|null
     */
    protected $waiting;

    /**
     * ContainerStateRunning is a running state of a container.
     */
    public function getRunning(): ?IoK8sApiCoreV1ContainerStateRunning
    {
        return $this->running;
    }

    /**
     * ContainerStateRunning is a running state of a container.
     */
    public function setRunning(?IoK8sApiCoreV1ContainerStateRunning $running): self
    {
        $this->initialized['running'] = true;
        $this->running = $running;

        return $this;
    }

    /**
     * ContainerStateTerminated is a terminated state of a container.
     */
    public function getTerminated(): ?IoK8sApiCoreV1ContainerStateTerminated
    {
        return $this->terminated;
    }

    /**
     * ContainerStateTerminated is a terminated state of a container.
     */
    public function setTerminated(?IoK8sApiCoreV1ContainerStateTerminated $terminated): self
    {
        $this->initialized['terminated'] = true;
        $this->terminated = $terminated;

        return $this;
    }

    /**
     * ContainerStateWaiting is a waiting state of a container.
     */
    public function getWaiting(): ?IoK8sApiCoreV1ContainerStateWaiting
    {
        return $this->waiting;
    }

    /**
     * ContainerStateWaiting is a waiting state of a container.
     */
    public function setWaiting(?IoK8sApiCoreV1ContainerStateWaiting $waiting): self
    {
        $this->initialized['waiting'] = true;
        $this->waiting = $waiting;

        return $this;
    }
}
