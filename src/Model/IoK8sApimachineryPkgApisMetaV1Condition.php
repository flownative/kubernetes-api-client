<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApimachineryPkgApisMetaV1Condition
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     *
     * @var \DateTimeInterface|null
     */
    protected $lastTransitionTime;
    /**
     * message is a human readable message indicating details about the transition. This may be an empty string.
     *
     * @var string|null
     */
    protected $message;
    /**
     * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
     *
     * @var int|null
     */
    protected $observedGeneration;
    /**
     * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
     *
     * @var string|null
     */
    protected $reason;
    /**
     * status of the condition, one of True, False, Unknown.
     *
     * @var string|null
     */
    protected $status;
    /**
     * type of condition in CamelCase or in foo.example.com/CamelCase.
     *
     * @var string|null
     */
    protected $type;

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function getLastTransitionTime(): ?\DateTimeInterface
    {
        return $this->lastTransitionTime;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function setLastTransitionTime(?\DateTimeInterface $lastTransitionTime): self
    {
        $this->initialized['lastTransitionTime'] = true;
        $this->lastTransitionTime = $lastTransitionTime;

        return $this;
    }

    /**
     * message is a human readable message indicating details about the transition. This may be an empty string.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * message is a human readable message indicating details about the transition. This may be an empty string.
     */
    public function setMessage(?string $message): self
    {
        $this->initialized['message'] = true;
        $this->message = $message;

        return $this;
    }

    /**
     * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
     */
    public function getObservedGeneration(): ?int
    {
        return $this->observedGeneration;
    }

    /**
     * observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
     */
    public function setObservedGeneration(?int $observedGeneration): self
    {
        $this->initialized['observedGeneration'] = true;
        $this->observedGeneration = $observedGeneration;

        return $this;
    }

    /**
     * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
     */
    public function setReason(?string $reason): self
    {
        $this->initialized['reason'] = true;
        $this->reason = $reason;

        return $this;
    }

    /**
     * status of the condition, one of True, False, Unknown.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * status of the condition, one of True, False, Unknown.
     */
    public function setStatus(?string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * type of condition in CamelCase or in foo.example.com/CamelCase.
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * type of condition in CamelCase or in foo.example.com/CamelCase.
     */
    public function setType(?string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }
}
