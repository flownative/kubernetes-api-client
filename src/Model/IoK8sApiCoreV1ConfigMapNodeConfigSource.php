<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ConfigMapNodeConfigSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     *
     * @var string|null
     */
    protected $kubeletConfigKey;
    /**
     * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     *
     * @var string|null
     */
    protected $namespace;
    /**
     * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     *
     * @var string|null
     */
    protected $resourceVersion;
    /**
     * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     *
     * @var string|null
     */
    protected $uid;

    /**
     * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     */
    public function getKubeletConfigKey(): ?string
    {
        return $this->kubeletConfigKey;
    }

    /**
     * KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
     */
    public function setKubeletConfigKey(?string $kubeletConfigKey): self
    {
        $this->initialized['kubeletConfigKey'] = true;
        $this->kubeletConfigKey = $kubeletConfigKey;

        return $this;
    }

    /**
     * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     */
    public function getNamespace(): ?string
    {
        return $this->namespace;
    }

    /**
     * Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
     */
    public function setNamespace(?string $namespace): self
    {
        $this->initialized['namespace'] = true;
        $this->namespace = $namespace;

        return $this;
    }

    /**
     * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    public function getResourceVersion(): ?string
    {
        return $this->resourceVersion;
    }

    /**
     * ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    public function setResourceVersion(?string $resourceVersion): self
    {
        $this->initialized['resourceVersion'] = true;
        $this->resourceVersion = $resourceVersion;

        return $this;
    }

    /**
     * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    public function getUid(): ?string
    {
        return $this->uid;
    }

    /**
     * UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
     */
    public function setUid(?string $uid): self
    {
        $this->initialized['uid'] = true;
        $this->uid = $uid;

        return $this;
    }
}
