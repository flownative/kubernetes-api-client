<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1HTTPGetAction
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     *
     * @var string|null
     */
    protected $host;
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     *
     * @var list<IoK8sApiCoreV1HTTPHeader>|null
     */
    protected $httpHeaders;
    /**
     * Path to access on the HTTP server.
     *
     * @var string|null
     */
    protected $path;
    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     *
     * @var string|null
     */
    protected $port;
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     *
     * @var string|null
     */
    protected $scheme;

    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    public function getHost(): ?string
    {
        return $this->host;
    }

    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     */
    public function setHost(?string $host): self
    {
        $this->initialized['host'] = true;
        $this->host = $host;

        return $this;
    }

    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     *
     * @return list<IoK8sApiCoreV1HTTPHeader>|null
     */
    public function getHttpHeaders(): ?array
    {
        return $this->httpHeaders;
    }

    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     *
     * @param list<IoK8sApiCoreV1HTTPHeader>|null $httpHeaders
     */
    public function setHttpHeaders(?array $httpHeaders): self
    {
        $this->initialized['httpHeaders'] = true;
        $this->httpHeaders = $httpHeaders;

        return $this;
    }

    /**
     * Path to access on the HTTP server.
     */
    public function getPath(): ?string
    {
        return $this->path;
    }

    /**
     * Path to access on the HTTP server.
     */
    public function setPath(?string $path): self
    {
        $this->initialized['path'] = true;
        $this->path = $path;

        return $this;
    }

    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    public function getPort(): ?string
    {
        return $this->port;
    }

    /**
     * IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
     */
    public function setPort(?string $port): self
    {
        $this->initialized['port'] = true;
        $this->port = $port;

        return $this;
    }

    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     */
    public function getScheme(): ?string
    {
        return $this->scheme;
    }

    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     */
    public function setScheme(?string $scheme): self
    {
        $this->initialized['scheme'] = true;
        $this->scheme = $scheme;

        return $this;
    }
}
