<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1Container
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @var list<string>|null
     */
    protected $args;
    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @var list<string>|null
     */
    protected $command;
    /**
     * List of environment variables to set in the container. Cannot be updated.
     *
     * @var list<IoK8sApiCoreV1EnvVar>|null
     */
    protected $env;
    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     *
     * @var list<IoK8sApiCoreV1EnvFromSource>|null
     */
    protected $envFrom;
    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     *
     * @var string|null
     */
    protected $image;
    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images.
     *
     * @var string|null
     */
    protected $imagePullPolicy;
    /**
     * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
     *
     * @var IoK8sApiCoreV1Lifecycle|null
     */
    protected $lifecycle;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     *
     * @var IoK8sApiCoreV1Probe|null
     */
    protected $livenessProbe;
    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     *
     * @var string|null
     */
    protected $name;
    /**
     * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
     *
     * @var list<IoK8sApiCoreV1ContainerPort>|null
     */
    protected $ports;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     *
     * @var IoK8sApiCoreV1Probe|null
     */
    protected $readinessProbe;
    /**
     * Resources resize policy for the container.
     *
     * @var list<IoK8sApiCoreV1ContainerResizePolicy>|null
     */
    protected $resizePolicy;
    /**
     * ResourceRequirements describes the compute resource requirements.
     *
     * @var IoK8sApiCoreV1ResourceRequirements|null
     */
    protected $resources;
    /**
     * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
     *
     * @var string|null
     */
    protected $restartPolicy;
    /**
     * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
     *
     * @var IoK8sApiCoreV1SecurityContext|null
     */
    protected $securityContext;
    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     *
     * @var IoK8sApiCoreV1Probe|null
     */
    protected $startupProbe;
    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     *
     * @var bool|null
     */
    protected $stdin;
    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false.
     *
     * @var bool|null
     */
    protected $stdinOnce;
    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     *
     * @var string|null
     */
    protected $terminationMessagePath;
    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     *
     * @var string|null
     */
    protected $terminationMessagePolicy;
    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     *
     * @var bool|null
     */
    protected $tty;
    /**
     * volumeDevices is the list of block devices to be used by the container.
     *
     * @var list<IoK8sApiCoreV1VolumeDevice>|null
     */
    protected $volumeDevices;
    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     *
     * @var list<IoK8sApiCoreV1VolumeMount>|null
     */
    protected $volumeMounts;
    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     *
     * @var string|null
     */
    protected $workingDir;

    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @return list<string>|null
     */
    public function getArgs(): ?array
    {
        return $this->args;
    }

    /**
     * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @param list<string>|null $args
     */
    public function setArgs(?array $args): self
    {
        $this->initialized['args'] = true;
        $this->args = $args;

        return $this;
    }

    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @return list<string>|null
     */
    public function getCommand(): ?array
    {
        return $this->command;
    }

    /**
     * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
     *
     * @param list<string>|null $command
     */
    public function setCommand(?array $command): self
    {
        $this->initialized['command'] = true;
        $this->command = $command;

        return $this;
    }

    /**
     * List of environment variables to set in the container. Cannot be updated.
     *
     * @return list<IoK8sApiCoreV1EnvVar>|null
     */
    public function getEnv(): ?array
    {
        return $this->env;
    }

    /**
     * List of environment variables to set in the container. Cannot be updated.
     *
     * @param list<IoK8sApiCoreV1EnvVar>|null $env
     */
    public function setEnv(?array $env): self
    {
        $this->initialized['env'] = true;
        $this->env = $env;

        return $this;
    }

    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     *
     * @return list<IoK8sApiCoreV1EnvFromSource>|null
     */
    public function getEnvFrom(): ?array
    {
        return $this->envFrom;
    }

    /**
     * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
     *
     * @param list<IoK8sApiCoreV1EnvFromSource>|null $envFrom
     */
    public function setEnvFrom(?array $envFrom): self
    {
        $this->initialized['envFrom'] = true;
        $this->envFrom = $envFrom;

        return $this;
    }

    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     */
    public function getImage(): ?string
    {
        return $this->image;
    }

    /**
     * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
     */
    public function setImage(?string $image): self
    {
        $this->initialized['image'] = true;
        $this->image = $image;

        return $this;
    }

    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images.
     */
    public function getImagePullPolicy(): ?string
    {
        return $this->imagePullPolicy;
    }

    /**
     * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images.
     */
    public function setImagePullPolicy(?string $imagePullPolicy): self
    {
        $this->initialized['imagePullPolicy'] = true;
        $this->imagePullPolicy = $imagePullPolicy;

        return $this;
    }

    /**
     * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
     */
    public function getLifecycle(): ?IoK8sApiCoreV1Lifecycle
    {
        return $this->lifecycle;
    }

    /**
     * Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
     */
    public function setLifecycle(?IoK8sApiCoreV1Lifecycle $lifecycle): self
    {
        $this->initialized['lifecycle'] = true;
        $this->lifecycle = $lifecycle;

        return $this;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function getLivenessProbe(): ?IoK8sApiCoreV1Probe
    {
        return $this->livenessProbe;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function setLivenessProbe(?IoK8sApiCoreV1Probe $livenessProbe): self
    {
        $this->initialized['livenessProbe'] = true;
        $this->livenessProbe = $livenessProbe;

        return $this;
    }

    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
     *
     * @return list<IoK8sApiCoreV1ContainerPort>|null
     */
    public function getPorts(): ?array
    {
        return $this->ports;
    }

    /**
     * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
     *
     * @param list<IoK8sApiCoreV1ContainerPort>|null $ports
     */
    public function setPorts(?array $ports): self
    {
        $this->initialized['ports'] = true;
        $this->ports = $ports;

        return $this;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function getReadinessProbe(): ?IoK8sApiCoreV1Probe
    {
        return $this->readinessProbe;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function setReadinessProbe(?IoK8sApiCoreV1Probe $readinessProbe): self
    {
        $this->initialized['readinessProbe'] = true;
        $this->readinessProbe = $readinessProbe;

        return $this;
    }

    /**
     * Resources resize policy for the container.
     *
     * @return list<IoK8sApiCoreV1ContainerResizePolicy>|null
     */
    public function getResizePolicy(): ?array
    {
        return $this->resizePolicy;
    }

    /**
     * Resources resize policy for the container.
     *
     * @param list<IoK8sApiCoreV1ContainerResizePolicy>|null $resizePolicy
     */
    public function setResizePolicy(?array $resizePolicy): self
    {
        $this->initialized['resizePolicy'] = true;
        $this->resizePolicy = $resizePolicy;

        return $this;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function getResources(): ?IoK8sApiCoreV1ResourceRequirements
    {
        return $this->resources;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function setResources(?IoK8sApiCoreV1ResourceRequirements $resources): self
    {
        $this->initialized['resources'] = true;
        $this->resources = $resources;

        return $this;
    }

    /**
     * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
     */
    public function getRestartPolicy(): ?string
    {
        return $this->restartPolicy;
    }

    /**
     * RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
     */
    public function setRestartPolicy(?string $restartPolicy): self
    {
        $this->initialized['restartPolicy'] = true;
        $this->restartPolicy = $restartPolicy;

        return $this;
    }

    /**
     * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
     */
    public function getSecurityContext(): ?IoK8sApiCoreV1SecurityContext
    {
        return $this->securityContext;
    }

    /**
     * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
     */
    public function setSecurityContext(?IoK8sApiCoreV1SecurityContext $securityContext): self
    {
        $this->initialized['securityContext'] = true;
        $this->securityContext = $securityContext;

        return $this;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function getStartupProbe(): ?IoK8sApiCoreV1Probe
    {
        return $this->startupProbe;
    }

    /**
     * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
     */
    public function setStartupProbe(?IoK8sApiCoreV1Probe $startupProbe): self
    {
        $this->initialized['startupProbe'] = true;
        $this->startupProbe = $startupProbe;

        return $this;
    }

    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     */
    public function getStdin(): ?bool
    {
        return $this->stdin;
    }

    /**
     * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
     */
    public function setStdin(?bool $stdin): self
    {
        $this->initialized['stdin'] = true;
        $this->stdin = $stdin;

        return $this;
    }

    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false.
     */
    public function getStdinOnce(): ?bool
    {
        return $this->stdinOnce;
    }

    /**
     * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false.
     */
    public function setStdinOnce(?bool $stdinOnce): self
    {
        $this->initialized['stdinOnce'] = true;
        $this->stdinOnce = $stdinOnce;

        return $this;
    }

    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     */
    public function getTerminationMessagePath(): ?string
    {
        return $this->terminationMessagePath;
    }

    /**
     * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
     */
    public function setTerminationMessagePath(?string $terminationMessagePath): self
    {
        $this->initialized['terminationMessagePath'] = true;
        $this->terminationMessagePath = $terminationMessagePath;

        return $this;
    }

    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    public function getTerminationMessagePolicy(): ?string
    {
        return $this->terminationMessagePolicy;
    }

    /**
     * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
     */
    public function setTerminationMessagePolicy(?string $terminationMessagePolicy): self
    {
        $this->initialized['terminationMessagePolicy'] = true;
        $this->terminationMessagePolicy = $terminationMessagePolicy;

        return $this;
    }

    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     */
    public function getTty(): ?bool
    {
        return $this->tty;
    }

    /**
     * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
     */
    public function setTty(?bool $tty): self
    {
        $this->initialized['tty'] = true;
        $this->tty = $tty;

        return $this;
    }

    /**
     * volumeDevices is the list of block devices to be used by the container.
     *
     * @return list<IoK8sApiCoreV1VolumeDevice>|null
     */
    public function getVolumeDevices(): ?array
    {
        return $this->volumeDevices;
    }

    /**
     * volumeDevices is the list of block devices to be used by the container.
     *
     * @param list<IoK8sApiCoreV1VolumeDevice>|null $volumeDevices
     */
    public function setVolumeDevices(?array $volumeDevices): self
    {
        $this->initialized['volumeDevices'] = true;
        $this->volumeDevices = $volumeDevices;

        return $this;
    }

    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     *
     * @return list<IoK8sApiCoreV1VolumeMount>|null
     */
    public function getVolumeMounts(): ?array
    {
        return $this->volumeMounts;
    }

    /**
     * Pod volumes to mount into the container's filesystem. Cannot be updated.
     *
     * @param list<IoK8sApiCoreV1VolumeMount>|null $volumeMounts
     */
    public function setVolumeMounts(?array $volumeMounts): self
    {
        $this->initialized['volumeMounts'] = true;
        $this->volumeMounts = $volumeMounts;

        return $this;
    }

    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    public function getWorkingDir(): ?string
    {
        return $this->workingDir;
    }

    /**
     * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
     */
    public function setWorkingDir(?string $workingDir): self
    {
        $this->initialized['workingDir'] = true;
        $this->workingDir = $workingDir;

        return $this;
    }
}
