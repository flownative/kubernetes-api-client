<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1PodSpec
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     *
     * @var int|null
     */
    protected $activeDeadlineSeconds;
    /**
     * Affinity is a group of affinity scheduling rules.
     *
     * @var IoK8sApiCoreV1Affinity|null
     */
    protected $affinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     *
     * @var bool|null
     */
    protected $automountServiceAccountToken;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     *
     * @var list<IoK8sApiCoreV1Container>|null
     */
    protected $containers;
    /**
     * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
     *
     * @var IoK8sApiCoreV1PodDNSConfig|null
     */
    protected $dnsConfig;
    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     *
     * @var string|null
     */
    protected $dnsPolicy;
    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     *
     * @var bool|null
     */
    protected $enableServiceLinks;
    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
     *
     * @var list<IoK8sApiCoreV1EphemeralContainer>|null
     */
    protected $ephemeralContainers;
    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
     *
     * @var list<IoK8sApiCoreV1HostAlias>|null
     */
    protected $hostAliases;
    /**
     * Use the host's ipc namespace. Optional: Default to false.
     *
     * @var bool|null
     */
    protected $hostIPC;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     *
     * @var bool|null
     */
    protected $hostNetwork;
    /**
     * Use the host's pid namespace. Optional: Default to false.
     *
     * @var bool|null
     */
    protected $hostPID;
    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
     *
     * @var bool|null
     */
    protected $hostUsers;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     *
     * @var string|null
     */
    protected $hostname;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod.
     *
     * @var list<IoK8sApiCoreV1LocalObjectReference>|null
     */
    protected $imagePullSecrets;
    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/.
     *
     * @var list<IoK8sApiCoreV1Container>|null
     */
    protected $initContainers;
    /**
     * NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename.
     *
     * @var string|null
     */
    protected $nodeName;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     *
     * @var array<string, string>|null
     */
    protected $nodeSelector;
    /**
     * PodOS defines the OS parameters of a pod.
     *
     * @var IoK8sApiCoreV1PodOS|null
     */
    protected $os;
    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md.
     *
     * @var array<string, string>|null
     */
    protected $overhead;
    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     *
     * @var string|null
     */
    protected $preemptionPolicy;
    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     *
     * @var int|null
     */
    protected $priority;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     *
     * @var string|null
     */
    protected $priorityClassName;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates.
     *
     * @var list<IoK8sApiCoreV1PodReadinessGate>|null
     */
    protected $readinessGates;
    /**
     * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
     *
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     *
     * This field is immutable.
     *
     * @var list<IoK8sApiCoreV1PodResourceClaim>|null
     */
    protected $resourceClaims;
    /**
     * ResourceRequirements describes the compute resource requirements.
     *
     * @var IoK8sApiCoreV1ResourceRequirements|null
     */
    protected $resources;
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     *
     * @var string|null
     */
    protected $restartPolicy;
    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class.
     *
     * @var string|null
     */
    protected $runtimeClassName;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     *
     * @var string|null
     */
    protected $schedulerName;
    /**
     * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
     *
     * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
     *
     * @var list<IoK8sApiCoreV1PodSchedulingGate>|null
     */
    protected $schedulingGates;
    /**
     * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
     *
     * @var IoK8sApiCoreV1PodSecurityContext|null
     */
    protected $securityContext;
    /**
     * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     *
     * @var string|null
     */
    protected $serviceAccount;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/.
     *
     * @var string|null
     */
    protected $serviceAccountName;
    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     *
     * @var bool|null
     */
    protected $setHostnameAsFQDN;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     *
     * @var bool|null
     */
    protected $shareProcessNamespace;
    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     *
     * @var string|null
     */
    protected $subdomain;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     *
     * @var int|null
     */
    protected $terminationGracePeriodSeconds;
    /**
     * If specified, the pod's tolerations.
     *
     * @var list<IoK8sApiCoreV1Toleration>|null
     */
    protected $tolerations;
    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     *
     * @var list<IoK8sApiCoreV1TopologySpreadConstraint>|null
     */
    protected $topologySpreadConstraints;
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes.
     *
     * @var list<IoK8sApiCoreV1Volume>|null
     */
    protected $volumes;

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    public function getActiveDeadlineSeconds(): ?int
    {
        return $this->activeDeadlineSeconds;
    }

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     */
    public function setActiveDeadlineSeconds(?int $activeDeadlineSeconds): self
    {
        $this->initialized['activeDeadlineSeconds'] = true;
        $this->activeDeadlineSeconds = $activeDeadlineSeconds;

        return $this;
    }

    /**
     * Affinity is a group of affinity scheduling rules.
     */
    public function getAffinity(): ?IoK8sApiCoreV1Affinity
    {
        return $this->affinity;
    }

    /**
     * Affinity is a group of affinity scheduling rules.
     */
    public function setAffinity(?IoK8sApiCoreV1Affinity $affinity): self
    {
        $this->initialized['affinity'] = true;
        $this->affinity = $affinity;

        return $this;
    }

    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    public function getAutomountServiceAccountToken(): ?bool
    {
        return $this->automountServiceAccountToken;
    }

    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     */
    public function setAutomountServiceAccountToken(?bool $automountServiceAccountToken): self
    {
        $this->initialized['automountServiceAccountToken'] = true;
        $this->automountServiceAccountToken = $automountServiceAccountToken;

        return $this;
    }

    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     *
     * @return list<IoK8sApiCoreV1Container>|null
     */
    public function getContainers(): ?array
    {
        return $this->containers;
    }

    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     *
     * @param list<IoK8sApiCoreV1Container>|null $containers
     */
    public function setContainers(?array $containers): self
    {
        $this->initialized['containers'] = true;
        $this->containers = $containers;

        return $this;
    }

    /**
     * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
     */
    public function getDnsConfig(): ?IoK8sApiCoreV1PodDNSConfig
    {
        return $this->dnsConfig;
    }

    /**
     * PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
     */
    public function setDnsConfig(?IoK8sApiCoreV1PodDNSConfig $dnsConfig): self
    {
        $this->initialized['dnsConfig'] = true;
        $this->dnsConfig = $dnsConfig;

        return $this;
    }

    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     */
    public function getDnsPolicy(): ?string
    {
        return $this->dnsPolicy;
    }

    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     */
    public function setDnsPolicy(?string $dnsPolicy): self
    {
        $this->initialized['dnsPolicy'] = true;
        $this->dnsPolicy = $dnsPolicy;

        return $this;
    }

    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     */
    public function getEnableServiceLinks(): ?bool
    {
        return $this->enableServiceLinks;
    }

    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     */
    public function setEnableServiceLinks(?bool $enableServiceLinks): self
    {
        $this->initialized['enableServiceLinks'] = true;
        $this->enableServiceLinks = $enableServiceLinks;

        return $this;
    }

    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
     *
     * @return list<IoK8sApiCoreV1EphemeralContainer>|null
     */
    public function getEphemeralContainers(): ?array
    {
        return $this->ephemeralContainers;
    }

    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.
     *
     * @param list<IoK8sApiCoreV1EphemeralContainer>|null $ephemeralContainers
     */
    public function setEphemeralContainers(?array $ephemeralContainers): self
    {
        $this->initialized['ephemeralContainers'] = true;
        $this->ephemeralContainers = $ephemeralContainers;

        return $this;
    }

    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
     *
     * @return list<IoK8sApiCoreV1HostAlias>|null
     */
    public function getHostAliases(): ?array
    {
        return $this->hostAliases;
    }

    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.
     *
     * @param list<IoK8sApiCoreV1HostAlias>|null $hostAliases
     */
    public function setHostAliases(?array $hostAliases): self
    {
        $this->initialized['hostAliases'] = true;
        $this->hostAliases = $hostAliases;

        return $this;
    }

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     */
    public function getHostIPC(): ?bool
    {
        return $this->hostIPC;
    }

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     */
    public function setHostIPC(?bool $hostIPC): self
    {
        $this->initialized['hostIPC'] = true;
        $this->hostIPC = $hostIPC;

        return $this;
    }

    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     */
    public function getHostNetwork(): ?bool
    {
        return $this->hostNetwork;
    }

    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     */
    public function setHostNetwork(?bool $hostNetwork): self
    {
        $this->initialized['hostNetwork'] = true;
        $this->hostNetwork = $hostNetwork;

        return $this;
    }

    /**
     * Use the host's pid namespace. Optional: Default to false.
     */
    public function getHostPID(): ?bool
    {
        return $this->hostPID;
    }

    /**
     * Use the host's pid namespace. Optional: Default to false.
     */
    public function setHostPID(?bool $hostPID): self
    {
        $this->initialized['hostPID'] = true;
        $this->hostPID = $hostPID;

        return $this;
    }

    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
     */
    public function getHostUsers(): ?bool
    {
        return $this->hostUsers;
    }

    /**
     * Use the host's user namespace. Optional: Default to true. If set to true or not present, the pod will be run in the host user namespace, useful for when the pod needs a feature only available to the host user namespace, such as loading a kernel module with CAP_SYS_MODULE. When set to false, a new userns is created for the pod. Setting false is useful for mitigating container breakout vulnerabilities even allowing users to run their containers as root without actually having root privileges on the host. This field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.
     */
    public function setHostUsers(?bool $hostUsers): self
    {
        $this->initialized['hostUsers'] = true;
        $this->hostUsers = $hostUsers;

        return $this;
    }

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    public function getHostname(): ?string
    {
        return $this->hostname;
    }

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     */
    public function setHostname(?string $hostname): self
    {
        $this->initialized['hostname'] = true;
        $this->hostname = $hostname;

        return $this;
    }

    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod.
     *
     * @return list<IoK8sApiCoreV1LocalObjectReference>|null
     */
    public function getImagePullSecrets(): ?array
    {
        return $this->imagePullSecrets;
    }

    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod.
     *
     * @param list<IoK8sApiCoreV1LocalObjectReference>|null $imagePullSecrets
     */
    public function setImagePullSecrets(?array $imagePullSecrets): self
    {
        $this->initialized['imagePullSecrets'] = true;
        $this->imagePullSecrets = $imagePullSecrets;

        return $this;
    }

    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/.
     *
     * @return list<IoK8sApiCoreV1Container>|null
     */
    public function getInitContainers(): ?array
    {
        return $this->initContainers;
    }

    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/.
     *
     * @param list<IoK8sApiCoreV1Container>|null $initContainers
     */
    public function setInitContainers(?array $initContainers): self
    {
        $this->initialized['initContainers'] = true;
        $this->initContainers = $initContainers;

        return $this;
    }

    /**
     * NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename.
     */
    public function getNodeName(): ?string
    {
        return $this->nodeName;
    }

    /**
     * NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename.
     */
    public function setNodeName(?string $nodeName): self
    {
        $this->initialized['nodeName'] = true;
        $this->nodeName = $nodeName;

        return $this;
    }

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     *
     * @return array<string, string>|null
     */
    public function getNodeSelector(): ?iterable
    {
        return $this->nodeSelector;
    }

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/.
     *
     * @param array<string, string>|null $nodeSelector
     */
    public function setNodeSelector(?iterable $nodeSelector): self
    {
        $this->initialized['nodeSelector'] = true;
        $this->nodeSelector = $nodeSelector;

        return $this;
    }

    /**
     * PodOS defines the OS parameters of a pod.
     */
    public function getOs(): ?IoK8sApiCoreV1PodOS
    {
        return $this->os;
    }

    /**
     * PodOS defines the OS parameters of a pod.
     */
    public function setOs(?IoK8sApiCoreV1PodOS $os): self
    {
        $this->initialized['os'] = true;
        $this->os = $os;

        return $this;
    }

    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md.
     *
     * @return array<string, string>|null
     */
    public function getOverhead(): ?iterable
    {
        return $this->overhead;
    }

    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md.
     *
     * @param array<string, string>|null $overhead
     */
    public function setOverhead(?iterable $overhead): self
    {
        $this->initialized['overhead'] = true;
        $this->overhead = $overhead;

        return $this;
    }

    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     */
    public function getPreemptionPolicy(): ?string
    {
        return $this->preemptionPolicy;
    }

    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.
     */
    public function setPreemptionPolicy(?string $preemptionPolicy): self
    {
        $this->initialized['preemptionPolicy'] = true;
        $this->preemptionPolicy = $preemptionPolicy;

        return $this;
    }

    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     */
    public function getPriority(): ?int
    {
        return $this->priority;
    }

    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     */
    public function setPriority(?int $priority): self
    {
        $this->initialized['priority'] = true;
        $this->priority = $priority;

        return $this;
    }

    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    public function getPriorityClassName(): ?string
    {
        return $this->priorityClassName;
    }

    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     */
    public function setPriorityClassName(?string $priorityClassName): self
    {
        $this->initialized['priorityClassName'] = true;
        $this->priorityClassName = $priorityClassName;

        return $this;
    }

    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates.
     *
     * @return list<IoK8sApiCoreV1PodReadinessGate>|null
     */
    public function getReadinessGates(): ?array
    {
        return $this->readinessGates;
    }

    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates.
     *
     * @param list<IoK8sApiCoreV1PodReadinessGate>|null $readinessGates
     */
    public function setReadinessGates(?array $readinessGates): self
    {
        $this->initialized['readinessGates'] = true;
        $this->readinessGates = $readinessGates;

        return $this;
    }

    /**
     * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
     *
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     *
     * This field is immutable.
     *
     * @return list<IoK8sApiCoreV1PodResourceClaim>|null
     */
    public function getResourceClaims(): ?array
    {
        return $this->resourceClaims;
    }

    /**
     * ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.
     *
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     *
     * This field is immutable.
     *
     * @param list<IoK8sApiCoreV1PodResourceClaim>|null $resourceClaims
     */
    public function setResourceClaims(?array $resourceClaims): self
    {
        $this->initialized['resourceClaims'] = true;
        $this->resourceClaims = $resourceClaims;

        return $this;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function getResources(): ?IoK8sApiCoreV1ResourceRequirements
    {
        return $this->resources;
    }

    /**
     * ResourceRequirements describes the compute resource requirements.
     */
    public function setResources(?IoK8sApiCoreV1ResourceRequirements $resources): self
    {
        $this->initialized['resources'] = true;
        $this->resources = $resources;

        return $this;
    }

    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    public function getRestartPolicy(): ?string
    {
        return $this->restartPolicy;
    }

    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
     */
    public function setRestartPolicy(?string $restartPolicy): self
    {
        $this->initialized['restartPolicy'] = true;
        $this->restartPolicy = $restartPolicy;

        return $this;
    }

    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class.
     */
    public function getRuntimeClassName(): ?string
    {
        return $this->runtimeClassName;
    }

    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class.
     */
    public function setRuntimeClassName(?string $runtimeClassName): self
    {
        $this->initialized['runtimeClassName'] = true;
        $this->runtimeClassName = $runtimeClassName;

        return $this;
    }

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    public function getSchedulerName(): ?string
    {
        return $this->schedulerName;
    }

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     */
    public function setSchedulerName(?string $schedulerName): self
    {
        $this->initialized['schedulerName'] = true;
        $this->schedulerName = $schedulerName;

        return $this;
    }

    /**
     * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
     *
     * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
     *
     * @return list<IoK8sApiCoreV1PodSchedulingGate>|null
     */
    public function getSchedulingGates(): ?array
    {
        return $this->schedulingGates;
    }

    /**
     * SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.
     *
     * SchedulingGates can only be set at pod creation time, and be removed only afterwards.
     *
     * @param list<IoK8sApiCoreV1PodSchedulingGate>|null $schedulingGates
     */
    public function setSchedulingGates(?array $schedulingGates): self
    {
        $this->initialized['schedulingGates'] = true;
        $this->schedulingGates = $schedulingGates;

        return $this;
    }

    /**
     * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
     */
    public function getSecurityContext(): ?IoK8sApiCoreV1PodSecurityContext
    {
        return $this->securityContext;
    }

    /**
     * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
     */
    public function setSecurityContext(?IoK8sApiCoreV1PodSecurityContext $securityContext): self
    {
        $this->initialized['securityContext'] = true;
        $this->securityContext = $securityContext;

        return $this;
    }

    /**
     * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     */
    public function getServiceAccount(): ?string
    {
        return $this->serviceAccount;
    }

    /**
     * DeprecatedServiceAccount is a deprecated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     */
    public function setServiceAccount(?string $serviceAccount): self
    {
        $this->initialized['serviceAccount'] = true;
        $this->serviceAccount = $serviceAccount;

        return $this;
    }

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/.
     */
    public function getServiceAccountName(): ?string
    {
        return $this->serviceAccountName;
    }

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/.
     */
    public function setServiceAccountName(?string $serviceAccountName): self
    {
        $this->initialized['serviceAccountName'] = true;
        $this->serviceAccountName = $serviceAccountName;

        return $this;
    }

    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     */
    public function getSetHostnameAsFQDN(): ?bool
    {
        return $this->setHostnameAsFQDN;
    }

    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     */
    public function setSetHostnameAsFQDN(?bool $setHostnameAsFQDN): self
    {
        $this->initialized['setHostnameAsFQDN'] = true;
        $this->setHostnameAsFQDN = $setHostnameAsFQDN;

        return $this;
    }

    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     */
    public function getShareProcessNamespace(): ?bool
    {
        return $this->shareProcessNamespace;
    }

    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     */
    public function setShareProcessNamespace(?bool $shareProcessNamespace): self
    {
        $this->initialized['shareProcessNamespace'] = true;
        $this->shareProcessNamespace = $shareProcessNamespace;

        return $this;
    }

    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     */
    public function getSubdomain(): ?string
    {
        return $this->subdomain;
    }

    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     */
    public function setSubdomain(?string $subdomain): self
    {
        $this->initialized['subdomain'] = true;
        $this->subdomain = $subdomain;

        return $this;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     */
    public function getTerminationGracePeriodSeconds(): ?int
    {
        return $this->terminationGracePeriodSeconds;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     */
    public function setTerminationGracePeriodSeconds(?int $terminationGracePeriodSeconds): self
    {
        $this->initialized['terminationGracePeriodSeconds'] = true;
        $this->terminationGracePeriodSeconds = $terminationGracePeriodSeconds;

        return $this;
    }

    /**
     * If specified, the pod's tolerations.
     *
     * @return list<IoK8sApiCoreV1Toleration>|null
     */
    public function getTolerations(): ?array
    {
        return $this->tolerations;
    }

    /**
     * If specified, the pod's tolerations.
     *
     * @param list<IoK8sApiCoreV1Toleration>|null $tolerations
     */
    public function setTolerations(?array $tolerations): self
    {
        $this->initialized['tolerations'] = true;
        $this->tolerations = $tolerations;

        return $this;
    }

    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     *
     * @return list<IoK8sApiCoreV1TopologySpreadConstraint>|null
     */
    public function getTopologySpreadConstraints(): ?array
    {
        return $this->topologySpreadConstraints;
    }

    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     *
     * @param list<IoK8sApiCoreV1TopologySpreadConstraint>|null $topologySpreadConstraints
     */
    public function setTopologySpreadConstraints(?array $topologySpreadConstraints): self
    {
        $this->initialized['topologySpreadConstraints'] = true;
        $this->topologySpreadConstraints = $topologySpreadConstraints;

        return $this;
    }

    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes.
     *
     * @return list<IoK8sApiCoreV1Volume>|null
     */
    public function getVolumes(): ?array
    {
        return $this->volumes;
    }

    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes.
     *
     * @param list<IoK8sApiCoreV1Volume>|null $volumes
     */
    public function setVolumes(?array $volumes): self
    {
        $this->initialized['volumes'] = true;
        $this->volumes = $volumes;

        return $this;
    }
}
