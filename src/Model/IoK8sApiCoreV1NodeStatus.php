<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1NodeStatus
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
     *
     * @var list<IoK8sApiCoreV1NodeAddress>|null
     */
    protected $addresses;
    /**
     * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
     *
     * @var array<string, string>|null
     */
    protected $allocatable;
    /**
     * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity.
     *
     * @var array<string, string>|null
     */
    protected $capacity;
    /**
     * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition.
     *
     * @var list<IoK8sApiCoreV1NodeCondition>|null
     */
    protected $conditions;
    /**
     * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
     *
     * @var IoK8sApiCoreV1NodeConfigStatus|null
     */
    protected $config;
    /**
     * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
     *
     * @var IoK8sApiCoreV1NodeDaemonEndpoints|null
     */
    protected $daemonEndpoints;
    /**
     * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
     *
     * @var IoK8sApiCoreV1NodeFeatures|null
     */
    protected $features;
    /**
     * List of container images on this node.
     *
     * @var list<IoK8sApiCoreV1ContainerImage>|null
     */
    protected $images;
    /**
     * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
     *
     * @var IoK8sApiCoreV1NodeSystemInfo|null
     */
    protected $nodeInfo;
    /**
     * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
     *
     * @var string|null
     */
    protected $phase;
    /**
     * The available runtime handlers.
     *
     * @var list<IoK8sApiCoreV1NodeRuntimeHandler>|null
     */
    protected $runtimeHandlers;
    /**
     * List of volumes that are attached to the node.
     *
     * @var list<IoK8sApiCoreV1AttachedVolume>|null
     */
    protected $volumesAttached;
    /**
     * List of attachable volumes in use (mounted) by the node.
     *
     * @var list<string>|null
     */
    protected $volumesInUse;

    /**
     * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
     *
     * @return list<IoK8sApiCoreV1NodeAddress>|null
     */
    public function getAddresses(): ?array
    {
        return $this->addresses;
    }

    /**
     * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/reference/node/node-status/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See https://pr.k8s.io/79391 for an example. Consumers should assume that addresses can change during the lifetime of a Node. However, there are some exceptions where this may not be possible, such as Pods that inherit a Node's address in its own status or consumers of the downward API (status.hostIP).
     *
     * @param list<IoK8sApiCoreV1NodeAddress>|null $addresses
     */
    public function setAddresses(?array $addresses): self
    {
        $this->initialized['addresses'] = true;
        $this->addresses = $addresses;

        return $this;
    }

    /**
     * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
     *
     * @return array<string, string>|null
     */
    public function getAllocatable(): ?iterable
    {
        return $this->allocatable;
    }

    /**
     * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
     *
     * @param array<string, string>|null $allocatable
     */
    public function setAllocatable(?iterable $allocatable): self
    {
        $this->initialized['allocatable'] = true;
        $this->allocatable = $allocatable;

        return $this;
    }

    /**
     * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity.
     *
     * @return array<string, string>|null
     */
    public function getCapacity(): ?iterable
    {
        return $this->capacity;
    }

    /**
     * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/reference/node/node-status/#capacity.
     *
     * @param array<string, string>|null $capacity
     */
    public function setCapacity(?iterable $capacity): self
    {
        $this->initialized['capacity'] = true;
        $this->capacity = $capacity;

        return $this;
    }

    /**
     * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition.
     *
     * @return list<IoK8sApiCoreV1NodeCondition>|null
     */
    public function getConditions(): ?array
    {
        return $this->conditions;
    }

    /**
     * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/reference/node/node-status/#condition.
     *
     * @param list<IoK8sApiCoreV1NodeCondition>|null $conditions
     */
    public function setConditions(?array $conditions): self
    {
        $this->initialized['conditions'] = true;
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
     */
    public function getConfig(): ?IoK8sApiCoreV1NodeConfigStatus
    {
        return $this->config;
    }

    /**
     * NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
     */
    public function setConfig(?IoK8sApiCoreV1NodeConfigStatus $config): self
    {
        $this->initialized['config'] = true;
        $this->config = $config;

        return $this;
    }

    /**
     * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
     */
    public function getDaemonEndpoints(): ?IoK8sApiCoreV1NodeDaemonEndpoints
    {
        return $this->daemonEndpoints;
    }

    /**
     * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
     */
    public function setDaemonEndpoints(?IoK8sApiCoreV1NodeDaemonEndpoints $daemonEndpoints): self
    {
        $this->initialized['daemonEndpoints'] = true;
        $this->daemonEndpoints = $daemonEndpoints;

        return $this;
    }

    /**
     * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
     */
    public function getFeatures(): ?IoK8sApiCoreV1NodeFeatures
    {
        return $this->features;
    }

    /**
     * NodeFeatures describes the set of features implemented by the CRI implementation. The features contained in the NodeFeatures should depend only on the cri implementation independent of runtime handlers.
     */
    public function setFeatures(?IoK8sApiCoreV1NodeFeatures $features): self
    {
        $this->initialized['features'] = true;
        $this->features = $features;

        return $this;
    }

    /**
     * List of container images on this node.
     *
     * @return list<IoK8sApiCoreV1ContainerImage>|null
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
     * List of container images on this node.
     *
     * @param list<IoK8sApiCoreV1ContainerImage>|null $images
     */
    public function setImages(?array $images): self
    {
        $this->initialized['images'] = true;
        $this->images = $images;

        return $this;
    }

    /**
     * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
     */
    public function getNodeInfo(): ?IoK8sApiCoreV1NodeSystemInfo
    {
        return $this->nodeInfo;
    }

    /**
     * NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
     */
    public function setNodeInfo(?IoK8sApiCoreV1NodeSystemInfo $nodeInfo): self
    {
        $this->initialized['nodeInfo'] = true;
        $this->nodeInfo = $nodeInfo;

        return $this;
    }

    /**
     * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
     */
    public function getPhase(): ?string
    {
        return $this->phase;
    }

    /**
     * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
     */
    public function setPhase(?string $phase): self
    {
        $this->initialized['phase'] = true;
        $this->phase = $phase;

        return $this;
    }

    /**
     * The available runtime handlers.
     *
     * @return list<IoK8sApiCoreV1NodeRuntimeHandler>|null
     */
    public function getRuntimeHandlers(): ?array
    {
        return $this->runtimeHandlers;
    }

    /**
     * The available runtime handlers.
     *
     * @param list<IoK8sApiCoreV1NodeRuntimeHandler>|null $runtimeHandlers
     */
    public function setRuntimeHandlers(?array $runtimeHandlers): self
    {
        $this->initialized['runtimeHandlers'] = true;
        $this->runtimeHandlers = $runtimeHandlers;

        return $this;
    }

    /**
     * List of volumes that are attached to the node.
     *
     * @return list<IoK8sApiCoreV1AttachedVolume>|null
     */
    public function getVolumesAttached(): ?array
    {
        return $this->volumesAttached;
    }

    /**
     * List of volumes that are attached to the node.
     *
     * @param list<IoK8sApiCoreV1AttachedVolume>|null $volumesAttached
     */
    public function setVolumesAttached(?array $volumesAttached): self
    {
        $this->initialized['volumesAttached'] = true;
        $this->volumesAttached = $volumesAttached;

        return $this;
    }

    /**
     * List of attachable volumes in use (mounted) by the node.
     *
     * @return list<string>|null
     */
    public function getVolumesInUse(): ?array
    {
        return $this->volumesInUse;
    }

    /**
     * List of attachable volumes in use (mounted) by the node.
     *
     * @param list<string>|null $volumesInUse
     */
    public function setVolumesInUse(?array $volumesInUse): self
    {
        $this->initialized['volumesInUse'] = true;
        $this->volumesInUse = $volumesInUse;

        return $this;
    }
}
