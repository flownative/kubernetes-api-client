<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1Probe
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * ExecAction describes a "run in container" action.
     *
     * @var IoK8sApiCoreV1ExecAction|null
     */
    protected $exec;
    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     *
     * @var int|null
     */
    protected $failureThreshold;
    /**
     * GRPCAction specifies an action involving a GRPC service.
     *
     * @var IoK8sApiCoreV1GRPCAction|null
     */
    protected $grpc;
    /**
     * HTTPGetAction describes an action based on HTTP Get requests.
     *
     * @var IoK8sApiCoreV1HTTPGetAction|null
     */
    protected $httpGet;
    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     *
     * @var int|null
     */
    protected $initialDelaySeconds;
    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     *
     * @var int|null
     */
    protected $periodSeconds;
    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     *
     * @var int|null
     */
    protected $successThreshold;
    /**
     * TCPSocketAction describes an action based on opening a socket.
     *
     * @var IoK8sApiCoreV1TCPSocketAction|null
     */
    protected $tcpSocket;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     *
     * @var int|null
     */
    protected $terminationGracePeriodSeconds;
    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     *
     * @var int|null
     */
    protected $timeoutSeconds;

    /**
     * ExecAction describes a "run in container" action.
     */
    public function getExec(): ?IoK8sApiCoreV1ExecAction
    {
        return $this->exec;
    }

    /**
     * ExecAction describes a "run in container" action.
     */
    public function setExec(?IoK8sApiCoreV1ExecAction $exec): self
    {
        $this->initialized['exec'] = true;
        $this->exec = $exec;

        return $this;
    }

    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     */
    public function getFailureThreshold(): ?int
    {
        return $this->failureThreshold;
    }

    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     */
    public function setFailureThreshold(?int $failureThreshold): self
    {
        $this->initialized['failureThreshold'] = true;
        $this->failureThreshold = $failureThreshold;

        return $this;
    }

    /**
     * GRPCAction specifies an action involving a GRPC service.
     */
    public function getGrpc(): ?IoK8sApiCoreV1GRPCAction
    {
        return $this->grpc;
    }

    /**
     * GRPCAction specifies an action involving a GRPC service.
     */
    public function setGrpc(?IoK8sApiCoreV1GRPCAction $grpc): self
    {
        $this->initialized['grpc'] = true;
        $this->grpc = $grpc;

        return $this;
    }

    /**
     * HTTPGetAction describes an action based on HTTP Get requests.
     */
    public function getHttpGet(): ?IoK8sApiCoreV1HTTPGetAction
    {
        return $this->httpGet;
    }

    /**
     * HTTPGetAction describes an action based on HTTP Get requests.
     */
    public function setHttpGet(?IoK8sApiCoreV1HTTPGetAction $httpGet): self
    {
        $this->initialized['httpGet'] = true;
        $this->httpGet = $httpGet;

        return $this;
    }

    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     */
    public function getInitialDelaySeconds(): ?int
    {
        return $this->initialDelaySeconds;
    }

    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     */
    public function setInitialDelaySeconds(?int $initialDelaySeconds): self
    {
        $this->initialized['initialDelaySeconds'] = true;
        $this->initialDelaySeconds = $initialDelaySeconds;

        return $this;
    }

    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     */
    public function getPeriodSeconds(): ?int
    {
        return $this->periodSeconds;
    }

    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     */
    public function setPeriodSeconds(?int $periodSeconds): self
    {
        $this->initialized['periodSeconds'] = true;
        $this->periodSeconds = $periodSeconds;

        return $this;
    }

    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     */
    public function getSuccessThreshold(): ?int
    {
        return $this->successThreshold;
    }

    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     */
    public function setSuccessThreshold(?int $successThreshold): self
    {
        $this->initialized['successThreshold'] = true;
        $this->successThreshold = $successThreshold;

        return $this;
    }

    /**
     * TCPSocketAction describes an action based on opening a socket.
     */
    public function getTcpSocket(): ?IoK8sApiCoreV1TCPSocketAction
    {
        return $this->tcpSocket;
    }

    /**
     * TCPSocketAction describes an action based on opening a socket.
     */
    public function setTcpSocket(?IoK8sApiCoreV1TCPSocketAction $tcpSocket): self
    {
        $this->initialized['tcpSocket'] = true;
        $this->tcpSocket = $tcpSocket;

        return $this;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     */
    public function getTerminationGracePeriodSeconds(): ?int
    {
        return $this->terminationGracePeriodSeconds;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     */
    public function setTerminationGracePeriodSeconds(?int $terminationGracePeriodSeconds): self
    {
        $this->initialized['terminationGracePeriodSeconds'] = true;
        $this->terminationGracePeriodSeconds = $terminationGracePeriodSeconds;

        return $this;
    }

    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     */
    public function getTimeoutSeconds(): ?int
    {
        return $this->timeoutSeconds;
    }

    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
     */
    public function setTimeoutSeconds(?int $timeoutSeconds): self
    {
        $this->initialized['timeoutSeconds'] = true;
        $this->timeoutSeconds = $timeoutSeconds;

        return $this;
    }
}
