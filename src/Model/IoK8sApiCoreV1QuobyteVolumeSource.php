<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1QuobyteVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * group to map volume access to Default is no group.
     *
     * @var string|null
     */
    protected $group;
    /**
     * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes.
     *
     * @var string|null
     */
    protected $registry;
    /**
     * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin.
     *
     * @var string|null
     */
    protected $tenant;
    /**
     * user to map volume access to Defaults to serivceaccount user.
     *
     * @var string|null
     */
    protected $user;
    /**
     * volume is a string that references an already created Quobyte volume by name.
     *
     * @var string|null
     */
    protected $volume;

    /**
     * group to map volume access to Default is no group.
     */
    public function getGroup(): ?string
    {
        return $this->group;
    }

    /**
     * group to map volume access to Default is no group.
     */
    public function setGroup(?string $group): self
    {
        $this->initialized['group'] = true;
        $this->group = $group;

        return $this;
    }

    /**
     * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes.
     */
    public function getRegistry(): ?string
    {
        return $this->registry;
    }

    /**
     * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes.
     */
    public function setRegistry(?string $registry): self
    {
        $this->initialized['registry'] = true;
        $this->registry = $registry;

        return $this;
    }

    /**
     * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin.
     */
    public function getTenant(): ?string
    {
        return $this->tenant;
    }

    /**
     * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin.
     */
    public function setTenant(?string $tenant): self
    {
        $this->initialized['tenant'] = true;
        $this->tenant = $tenant;

        return $this;
    }

    /**
     * user to map volume access to Defaults to serivceaccount user.
     */
    public function getUser(): ?string
    {
        return $this->user;
    }

    /**
     * user to map volume access to Defaults to serivceaccount user.
     */
    public function setUser(?string $user): self
    {
        $this->initialized['user'] = true;
        $this->user = $user;

        return $this;
    }

    /**
     * volume is a string that references an already created Quobyte volume by name.
     */
    public function getVolume(): ?string
    {
        return $this->volume;
    }

    /**
     * volume is a string that references an already created Quobyte volume by name.
     */
    public function setVolume(?string $volume): self
    {
        $this->initialized['volume'] = true;
        $this->volume = $volume;

        return $this;
    }
}
