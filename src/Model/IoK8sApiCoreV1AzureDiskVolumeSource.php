<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1AzureDiskVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * cachingMode is the Host Caching mode: None, Read Only, Read Write.
     *
     * @var string|null
     */
    protected $cachingMode;
    /**
     * diskName is the Name of the data disk in the blob storage.
     *
     * @var string|null
     */
    protected $diskName;
    /**
     * diskURI is the URI of data disk in the blob storage.
     *
     * @var string|null
     */
    protected $diskURI;
    /**
     * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     *
     * @var string|null
     */
    protected $fsType;
    /**
     * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared.
     *
     * @var string|null
     */
    protected $kind;
    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @var bool|null
     */
    protected $readOnly;

    /**
     * cachingMode is the Host Caching mode: None, Read Only, Read Write.
     */
    public function getCachingMode(): ?string
    {
        return $this->cachingMode;
    }

    /**
     * cachingMode is the Host Caching mode: None, Read Only, Read Write.
     */
    public function setCachingMode(?string $cachingMode): self
    {
        $this->initialized['cachingMode'] = true;
        $this->cachingMode = $cachingMode;

        return $this;
    }

    /**
     * diskName is the Name of the data disk in the blob storage.
     */
    public function getDiskName(): ?string
    {
        return $this->diskName;
    }

    /**
     * diskName is the Name of the data disk in the blob storage.
     */
    public function setDiskName(?string $diskName): self
    {
        $this->initialized['diskName'] = true;
        $this->diskName = $diskName;

        return $this;
    }

    /**
     * diskURI is the URI of data disk in the blob storage.
     */
    public function getDiskURI(): ?string
    {
        return $this->diskURI;
    }

    /**
     * diskURI is the URI of data disk in the blob storage.
     */
    public function setDiskURI(?string $diskURI): self
    {
        $this->initialized['diskURI'] = true;
        $this->diskURI = $diskURI;

        return $this;
    }

    /**
     * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    public function getFsType(): ?string
    {
        return $this->fsType;
    }

    /**
     * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    public function setFsType(?string $fsType): self
    {
        $this->initialized['fsType'] = true;
        $this->fsType = $fsType;

        return $this;
    }

    /**
     * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared.
     */
    public function getKind(): ?string
    {
        return $this->kind;
    }

    /**
     * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared.
     */
    public function setKind(?string $kind): self
    {
        $this->initialized['kind'] = true;
        $this->kind = $kind;

        return $this;
    }

    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }
}
