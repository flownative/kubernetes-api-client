<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1PodStatus
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
     *
     * @var list<IoK8sApiCoreV1PodCondition>|null
     */
    protected $conditions;
    /**
     * Statuses of containers in this pod. Each container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @var list<IoK8sApiCoreV1ContainerStatus>|null
     */
    protected $containerStatuses;
    /**
     * Statuses for any ephemeral containers that have run in this pod. Each ephemeral container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @var list<IoK8sApiCoreV1ContainerStatus>|null
     */
    protected $ephemeralContainerStatuses;
    /**
     * hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod.
     *
     * @var string|null
     */
    protected $hostIP;
    /**
     * hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.
     *
     * @var list<IoK8sApiCoreV1HostIP>|null
     */
    protected $hostIPs;
    /**
     * Statuses of init containers in this pod. The most recent successful non-restartable init container will have ready = true, the most recently started container will have startTime set. Each init container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status.
     *
     * @var list<IoK8sApiCoreV1ContainerStatus>|null
     */
    protected $initContainerStatuses;
    /**
     * A human readable message indicating details about why the pod is in this condition.
     *
     * @var string|null
     */
    protected $message;
    /**
     * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     *
     * @var string|null
     */
    protected $nominatedNodeName;
    /**
     * If set, this represents the .metadata.generation that the pod status was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.
     *
     * @var int|null
     */
    protected $observedGeneration;
    /**
     * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
     *
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
     *
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     *
     * @var string|null
     */
    protected $phase;
    /**
     * podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     *
     * @var string|null
     */
    protected $podIP;
    /**
     * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     *
     * @var list<IoK8sApiCoreV1PodIP>|null
     */
    protected $podIPs;
    /**
     * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes.
     *
     * @var string|null
     */
    protected $qosClass;
    /**
     * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'.
     *
     * @var string|null
     */
    protected $reason;
    /**
     * Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed" Deprecated: Resize status is moved to two pod conditions PodResizePending and PodResizeInProgress. PodResizePending will track states where the spec has been resized, but the Kubelet has not yet allocated the resources. PodResizeInProgress will track in-progress resizes, and should be present whenever allocated resources != acknowledged resources.
     *
     * @var string|null
     */
    protected $resize;
    /**
     * Status of resource claims.
     *
     * @var list<IoK8sApiCoreV1PodResourceClaimStatus>|null
     */
    protected $resourceClaimStatuses;
    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     *
     * @var \DateTimeInterface|null
     */
    protected $startTime;

    /**
     * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
     *
     * @return list<IoK8sApiCoreV1PodCondition>|null
     */
    public function getConditions(): ?array
    {
        return $this->conditions;
    }

    /**
     * Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
     *
     * @param list<IoK8sApiCoreV1PodCondition>|null $conditions
     */
    public function setConditions(?array $conditions): self
    {
        $this->initialized['conditions'] = true;
        $this->conditions = $conditions;

        return $this;
    }

    /**
     * Statuses of containers in this pod. Each container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @return list<IoK8sApiCoreV1ContainerStatus>|null
     */
    public function getContainerStatuses(): ?array
    {
        return $this->containerStatuses;
    }

    /**
     * Statuses of containers in this pod. Each container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @param list<IoK8sApiCoreV1ContainerStatus>|null $containerStatuses
     */
    public function setContainerStatuses(?array $containerStatuses): self
    {
        $this->initialized['containerStatuses'] = true;
        $this->containerStatuses = $containerStatuses;

        return $this;
    }

    /**
     * Statuses for any ephemeral containers that have run in this pod. Each ephemeral container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @return list<IoK8sApiCoreV1ContainerStatus>|null
     */
    public function getEphemeralContainerStatuses(): ?array
    {
        return $this->ephemeralContainerStatuses;
    }

    /**
     * Statuses for any ephemeral containers that have run in this pod. Each ephemeral container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
     *
     * @param list<IoK8sApiCoreV1ContainerStatus>|null $ephemeralContainerStatuses
     */
    public function setEphemeralContainerStatuses(?array $ephemeralContainerStatuses): self
    {
        $this->initialized['ephemeralContainerStatuses'] = true;
        $this->ephemeralContainerStatuses = $ephemeralContainerStatuses;

        return $this;
    }

    /**
     * hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod.
     */
    public function getHostIP(): ?string
    {
        return $this->hostIP;
    }

    /**
     * hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will not be updated even if there is a node is assigned to pod.
     */
    public function setHostIP(?string $hostIP): self
    {
        $this->initialized['hostIP'] = true;
        $this->hostIP = $hostIP;

        return $this;
    }

    /**
     * hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.
     *
     * @return list<IoK8sApiCoreV1HostIP>|null
     */
    public function getHostIPs(): ?array
    {
        return $this->hostIPs;
    }

    /**
     * hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must match the hostIP field. This list is empty if the pod has not started yet. A pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will not be updated even if there is a node is assigned to this pod.
     *
     * @param list<IoK8sApiCoreV1HostIP>|null $hostIPs
     */
    public function setHostIPs(?array $hostIPs): self
    {
        $this->initialized['hostIPs'] = true;
        $this->hostIPs = $hostIPs;

        return $this;
    }

    /**
     * Statuses of init containers in this pod. The most recent successful non-restartable init container will have ready = true, the most recently started container will have startTime set. Each init container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status.
     *
     * @return list<IoK8sApiCoreV1ContainerStatus>|null
     */
    public function getInitContainerStatuses(): ?array
    {
        return $this->initContainerStatuses;
    }

    /**
     * Statuses of init containers in this pod. The most recent successful non-restartable init container will have ready = true, the most recently started container will have startTime set. Each init container in the pod should have at most one status in this list, and all statuses should be for containers in the pod. However this is not enforced. If a status for a non-existent container is present in the list, or the list has duplicate names, the behavior of various Kubernetes components is not defined and those statuses might be ignored. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-and-container-status.
     *
     * @param list<IoK8sApiCoreV1ContainerStatus>|null $initContainerStatuses
     */
    public function setInitContainerStatuses(?array $initContainerStatuses): self
    {
        $this->initialized['initContainerStatuses'] = true;
        $this->initContainerStatuses = $initContainerStatuses;

        return $this;
    }

    /**
     * A human readable message indicating details about why the pod is in this condition.
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * A human readable message indicating details about why the pod is in this condition.
     */
    public function setMessage(?string $message): self
    {
        $this->initialized['message'] = true;
        $this->message = $message;

        return $this;
    }

    /**
     * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     */
    public function getNominatedNodeName(): ?string
    {
        return $this->nominatedNodeName;
    }

    /**
     * nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     */
    public function setNominatedNodeName(?string $nominatedNodeName): self
    {
        $this->initialized['nominatedNodeName'] = true;
        $this->nominatedNodeName = $nominatedNodeName;

        return $this;
    }

    /**
     * If set, this represents the .metadata.generation that the pod status was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.
     */
    public function getObservedGeneration(): ?int
    {
        return $this->observedGeneration;
    }

    /**
     * If set, this represents the .metadata.generation that the pod status was set based upon. This is an alpha field. Enable PodObservedGenerationTracking to be able to use this field.
     */
    public function setObservedGeneration(?int $observedGeneration): self
    {
        $this->initialized['observedGeneration'] = true;
        $this->observedGeneration = $observedGeneration;

        return $this;
    }

    /**
     * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
     *
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
     *
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     */
    public function getPhase(): ?string
    {
        return $this->phase;
    }

    /**
     * The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
     *
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
     *
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     */
    public function setPhase(?string $phase): self
    {
        $this->initialized['phase'] = true;
        $this->phase = $phase;

        return $this;
    }

    /**
     * podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     */
    public function getPodIP(): ?string
    {
        return $this->podIP;
    }

    /**
     * podIP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     */
    public function setPodIP(?string $podIP): self
    {
        $this->initialized['podIP'] = true;
        $this->podIP = $podIP;

        return $this;
    }

    /**
     * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     *
     * @return list<IoK8sApiCoreV1PodIP>|null
     */
    public function getPodIPs(): ?array
    {
        return $this->podIPs;
    }

    /**
     * podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     *
     * @param list<IoK8sApiCoreV1PodIP>|null $podIPs
     */
    public function setPodIPs(?array $podIPs): self
    {
        $this->initialized['podIPs'] = true;
        $this->podIPs = $podIPs;

        return $this;
    }

    /**
     * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes.
     */
    public function getQosClass(): ?string
    {
        return $this->qosClass;
    }

    /**
     * The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes.
     */
    public function setQosClass(?string $qosClass): self
    {
        $this->initialized['qosClass'] = true;
        $this->qosClass = $qosClass;

        return $this;
    }

    /**
     * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'.
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'.
     */
    public function setReason(?string $reason): self
    {
        $this->initialized['reason'] = true;
        $this->reason = $reason;

        return $this;
    }

    /**
     * Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed" Deprecated: Resize status is moved to two pod conditions PodResizePending and PodResizeInProgress. PodResizePending will track states where the spec has been resized, but the Kubelet has not yet allocated the resources. PodResizeInProgress will track in-progress resizes, and should be present whenever allocated resources != acknowledged resources.
     */
    public function getResize(): ?string
    {
        return $this->resize;
    }

    /**
     * Status of resources resize desired for pod's containers. It is empty if no resources resize is pending. Any changes to container resources will automatically set this to "Proposed" Deprecated: Resize status is moved to two pod conditions PodResizePending and PodResizeInProgress. PodResizePending will track states where the spec has been resized, but the Kubelet has not yet allocated the resources. PodResizeInProgress will track in-progress resizes, and should be present whenever allocated resources != acknowledged resources.
     */
    public function setResize(?string $resize): self
    {
        $this->initialized['resize'] = true;
        $this->resize = $resize;

        return $this;
    }

    /**
     * Status of resource claims.
     *
     * @return list<IoK8sApiCoreV1PodResourceClaimStatus>|null
     */
    public function getResourceClaimStatuses(): ?array
    {
        return $this->resourceClaimStatuses;
    }

    /**
     * Status of resource claims.
     *
     * @param list<IoK8sApiCoreV1PodResourceClaimStatus>|null $resourceClaimStatuses
     */
    public function setResourceClaimStatuses(?array $resourceClaimStatuses): self
    {
        $this->initialized['resourceClaimStatuses'] = true;
        $this->resourceClaimStatuses = $resourceClaimStatuses;

        return $this;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function getStartTime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    /**
     * Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
     */
    public function setStartTime(?\DateTimeInterface $startTime): self
    {
        $this->initialized['startTime'] = true;
        $this->startTime = $startTime;

        return $this;
    }
}
