<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1NodeSpec
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22.
     *
     * @var IoK8sApiCoreV1NodeConfigSource|null
     */
    protected $configSource;
    /**
     * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966.
     *
     * @var string|null
     */
    protected $externalID;
    /**
     * PodCIDR represents the pod IP range assigned to the node.
     *
     * @var string|null
     */
    protected $podCIDR;
    /**
     * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
     *
     * @var list<string>|null
     */
    protected $podCIDRs;
    /**
     * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>.
     *
     * @var string|null
     */
    protected $providerID;
    /**
     * If specified, the node's taints.
     *
     * @var list<IoK8sApiCoreV1Taint>|null
     */
    protected $taints;
    /**
     * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
     *
     * @var bool|null
     */
    protected $unschedulable;

    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22.
     */
    public function getConfigSource(): ?IoK8sApiCoreV1NodeConfigSource
    {
        return $this->configSource;
    }

    /**
     * NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil. This API is deprecated since 1.22.
     */
    public function setConfigSource(?IoK8sApiCoreV1NodeConfigSource $configSource): self
    {
        $this->initialized['configSource'] = true;
        $this->configSource = $configSource;

        return $this;
    }

    /**
     * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966.
     */
    public function getExternalID(): ?string
    {
        return $this->externalID;
    }

    /**
     * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966.
     */
    public function setExternalID(?string $externalID): self
    {
        $this->initialized['externalID'] = true;
        $this->externalID = $externalID;

        return $this;
    }

    /**
     * PodCIDR represents the pod IP range assigned to the node.
     */
    public function getPodCIDR(): ?string
    {
        return $this->podCIDR;
    }

    /**
     * PodCIDR represents the pod IP range assigned to the node.
     */
    public function setPodCIDR(?string $podCIDR): self
    {
        $this->initialized['podCIDR'] = true;
        $this->podCIDR = $podCIDR;

        return $this;
    }

    /**
     * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
     *
     * @return list<string>|null
     */
    public function getPodCIDRs(): ?array
    {
        return $this->podCIDRs;
    }

    /**
     * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
     *
     * @param list<string>|null $podCIDRs
     */
    public function setPodCIDRs(?array $podCIDRs): self
    {
        $this->initialized['podCIDRs'] = true;
        $this->podCIDRs = $podCIDRs;

        return $this;
    }

    /**
     * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>.
     */
    public function getProviderID(): ?string
    {
        return $this->providerID;
    }

    /**
     * ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>.
     */
    public function setProviderID(?string $providerID): self
    {
        $this->initialized['providerID'] = true;
        $this->providerID = $providerID;

        return $this;
    }

    /**
     * If specified, the node's taints.
     *
     * @return list<IoK8sApiCoreV1Taint>|null
     */
    public function getTaints(): ?array
    {
        return $this->taints;
    }

    /**
     * If specified, the node's taints.
     *
     * @param list<IoK8sApiCoreV1Taint>|null $taints
     */
    public function setTaints(?array $taints): self
    {
        $this->initialized['taints'] = true;
        $this->taints = $taints;

        return $this;
    }

    /**
     * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
     */
    public function getUnschedulable(): ?bool
    {
        return $this->unschedulable;
    }

    /**
     * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
     */
    public function setUnschedulable(?bool $unschedulable): self
    {
        $this->initialized['unschedulable'] = true;
        $this->unschedulable = $unschedulable;

        return $this;
    }
}
