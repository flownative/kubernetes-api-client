<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApimachineryPkgApisMetaV1OwnerReference
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * API version of the referent.
     *
     * @var string|null
     */
    protected $apiVersion;
    /**
     * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     *
     * @var bool|null
     */
    protected $blockOwnerDeletion;
    /**
     * If true, this reference points to the managing controller.
     *
     * @var bool|null
     */
    protected $controller;
    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
     *
     * @var string|null
     */
    protected $kind;
    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names.
     *
     * @var string|null
     */
    protected $name;
    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids.
     *
     * @var string|null
     */
    protected $uid;

    /**
     * API version of the referent.
     */
    public function getApiVersion(): ?string
    {
        return $this->apiVersion;
    }

    /**
     * API version of the referent.
     */
    public function setApiVersion(?string $apiVersion): self
    {
        $this->initialized['apiVersion'] = true;
        $this->apiVersion = $apiVersion;

        return $this;
    }

    /**
     * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     */
    public function getBlockOwnerDeletion(): ?bool
    {
        return $this->blockOwnerDeletion;
    }

    /**
     * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     */
    public function setBlockOwnerDeletion(?bool $blockOwnerDeletion): self
    {
        $this->initialized['blockOwnerDeletion'] = true;
        $this->blockOwnerDeletion = $blockOwnerDeletion;

        return $this;
    }

    /**
     * If true, this reference points to the managing controller.
     */
    public function getController(): ?bool
    {
        return $this->controller;
    }

    /**
     * If true, this reference points to the managing controller.
     */
    public function setController(?bool $controller): self
    {
        $this->initialized['controller'] = true;
        $this->controller = $controller;

        return $this;
    }

    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
     */
    public function getKind(): ?string
    {
        return $this->kind;
    }

    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
     */
    public function setKind(?string $kind): self
    {
        $this->initialized['kind'] = true;
        $this->kind = $kind;

        return $this;
    }

    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids.
     */
    public function getUid(): ?string
    {
        return $this->uid;
    }

    /**
     * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids.
     */
    public function setUid(?string $uid): self
    {
        $this->initialized['uid'] = true;
        $this->uid = $uid;

        return $this;
    }
}
