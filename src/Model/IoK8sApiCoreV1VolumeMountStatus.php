<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1VolumeMountStatus
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * MountPath corresponds to the original VolumeMount.
     *
     * @var string|null
     */
    protected $mountPath;
    /**
     * Name corresponds to the name of the original VolumeMount.
     *
     * @var string|null
     */
    protected $name;
    /**
     * ReadOnly corresponds to the original VolumeMount.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
     *
     * @var string|null
     */
    protected $recursiveReadOnly;

    /**
     * MountPath corresponds to the original VolumeMount.
     */
    public function getMountPath(): ?string
    {
        return $this->mountPath;
    }

    /**
     * MountPath corresponds to the original VolumeMount.
     */
    public function setMountPath(?string $mountPath): self
    {
        $this->initialized['mountPath'] = true;
        $this->mountPath = $mountPath;

        return $this;
    }

    /**
     * Name corresponds to the name of the original VolumeMount.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Name corresponds to the name of the original VolumeMount.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * ReadOnly corresponds to the original VolumeMount.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * ReadOnly corresponds to the original VolumeMount.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
     */
    public function getRecursiveReadOnly(): ?string
    {
        return $this->recursiveReadOnly;
    }

    /**
     * RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.
     */
    public function setRecursiveReadOnly(?string $recursiveReadOnly): self
    {
        $this->initialized['recursiveReadOnly'] = true;
        $this->recursiveReadOnly = $recursiveReadOnly;

        return $this;
    }
}
