<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1ScaleIOVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
     *
     * @var string|null
     */
    protected $fsType;
    /**
     * gateway is the host address of the ScaleIO API Gateway.
     *
     * @var string|null
     */
    protected $gateway;
    /**
     * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
     *
     * @var string|null
     */
    protected $protectionDomain;
    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     *
     * @var IoK8sApiCoreV1LocalObjectReference|null
     */
    protected $secretRef;
    /**
     * sslEnabled Flag enable/disable SSL communication with Gateway, default false.
     *
     * @var bool|null
     */
    protected $sslEnabled;
    /**
     * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     *
     * @var string|null
     */
    protected $storageMode;
    /**
     * storagePool is the ScaleIO Storage Pool associated with the protection domain.
     *
     * @var string|null
     */
    protected $storagePool;
    /**
     * system is the name of the storage system as configured in ScaleIO.
     *
     * @var string|null
     */
    protected $system;
    /**
     * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
     *
     * @var string|null
     */
    protected $volumeName;

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
     */
    public function getFsType(): ?string
    {
        return $this->fsType;
    }

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
     */
    public function setFsType(?string $fsType): self
    {
        $this->initialized['fsType'] = true;
        $this->fsType = $fsType;

        return $this;
    }

    /**
     * gateway is the host address of the ScaleIO API Gateway.
     */
    public function getGateway(): ?string
    {
        return $this->gateway;
    }

    /**
     * gateway is the host address of the ScaleIO API Gateway.
     */
    public function setGateway(?string $gateway): self
    {
        $this->initialized['gateway'] = true;
        $this->gateway = $gateway;

        return $this;
    }

    /**
     * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
     */
    public function getProtectionDomain(): ?string
    {
        return $this->protectionDomain;
    }

    /**
     * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
     */
    public function setProtectionDomain(?string $protectionDomain): self
    {
        $this->initialized['protectionDomain'] = true;
        $this->protectionDomain = $protectionDomain;

        return $this;
    }

    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function getSecretRef(): ?IoK8sApiCoreV1LocalObjectReference
    {
        return $this->secretRef;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function setSecretRef(?IoK8sApiCoreV1LocalObjectReference $secretRef): self
    {
        $this->initialized['secretRef'] = true;
        $this->secretRef = $secretRef;

        return $this;
    }

    /**
     * sslEnabled Flag enable/disable SSL communication with Gateway, default false.
     */
    public function getSslEnabled(): ?bool
    {
        return $this->sslEnabled;
    }

    /**
     * sslEnabled Flag enable/disable SSL communication with Gateway, default false.
     */
    public function setSslEnabled(?bool $sslEnabled): self
    {
        $this->initialized['sslEnabled'] = true;
        $this->sslEnabled = $sslEnabled;

        return $this;
    }

    /**
     * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     */
    public function getStorageMode(): ?string
    {
        return $this->storageMode;
    }

    /**
     * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
     */
    public function setStorageMode(?string $storageMode): self
    {
        $this->initialized['storageMode'] = true;
        $this->storageMode = $storageMode;

        return $this;
    }

    /**
     * storagePool is the ScaleIO Storage Pool associated with the protection domain.
     */
    public function getStoragePool(): ?string
    {
        return $this->storagePool;
    }

    /**
     * storagePool is the ScaleIO Storage Pool associated with the protection domain.
     */
    public function setStoragePool(?string $storagePool): self
    {
        $this->initialized['storagePool'] = true;
        $this->storagePool = $storagePool;

        return $this;
    }

    /**
     * system is the name of the storage system as configured in ScaleIO.
     */
    public function getSystem(): ?string
    {
        return $this->system;
    }

    /**
     * system is the name of the storage system as configured in ScaleIO.
     */
    public function setSystem(?string $system): self
    {
        $this->initialized['system'] = true;
        $this->system = $system;

        return $this;
    }

    /**
     * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
     */
    public function getVolumeName(): ?string
    {
        return $this->volumeName;
    }

    /**
     * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
     */
    public function setVolumeName(?string $volumeName): self
    {
        $this->initialized['volumeName'] = true;
        $this->volumeName = $volumeName;

        return $this;
    }
}
