<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1PodSecurityContext
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     *
     * @var IoK8sApiCoreV1AppArmorProfile|null
     */
    protected $appArmorProfile;
    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     *
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
     *
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var int|null
     */
    protected $fsGroup;
    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var string|null
     */
    protected $fsGroupChangePolicy;
    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var int|null
     */
    protected $runAsGroup;
    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     *
     * @var bool|null
     */
    protected $runAsNonRoot;
    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var int|null
     */
    protected $runAsUser;
    /**
     * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are "MountOption" and "Recursive".
     *
     * "Recursive" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
     *
     * "MountOption" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
     *
     * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used. If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for all other volumes.
     *
     * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
     *
     * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var string|null
     */
    protected $seLinuxChangePolicy;
    /**
     * SELinuxOptions are the labels to be applied to the container.
     *
     * @var IoK8sApiCoreV1SELinuxOptions|null
     */
    protected $seLinuxOptions;
    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     *
     * @var IoK8sApiCoreV1SeccompProfile|null
     */
    protected $seccompProfile;
    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var list<int>|null
     */
    protected $supplementalGroups;
    /**
     * Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var string|null
     */
    protected $supplementalGroupsPolicy;
    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     *
     * @var list<IoK8sApiCoreV1Sysctl>|null
     */
    protected $sysctls;
    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     *
     * @var IoK8sApiCoreV1WindowsSecurityContextOptions|null
     */
    protected $windowsOptions;

    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    public function getAppArmorProfile(): ?IoK8sApiCoreV1AppArmorProfile
    {
        return $this->appArmorProfile;
    }

    /**
     * AppArmorProfile defines a pod or container's AppArmor settings.
     */
    public function setAppArmorProfile(?IoK8sApiCoreV1AppArmorProfile $appArmorProfile): self
    {
        $this->initialized['appArmorProfile'] = true;
        $this->appArmorProfile = $appArmorProfile;

        return $this;
    }

    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     *
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
     *
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getFsGroup(): ?int
    {
        return $this->fsGroup;
    }

    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     *
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
     *
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setFsGroup(?int $fsGroup): self
    {
        $this->initialized['fsGroup'] = true;
        $this->fsGroup = $fsGroup;

        return $this;
    }

    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getFsGroupChangePolicy(): ?string
    {
        return $this->fsGroupChangePolicy;
    }

    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setFsGroupChangePolicy(?string $fsGroupChangePolicy): self
    {
        $this->initialized['fsGroupChangePolicy'] = true;
        $this->fsGroupChangePolicy = $fsGroupChangePolicy;

        return $this;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getRunAsGroup(): ?int
    {
        return $this->runAsGroup;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setRunAsGroup(?int $runAsGroup): self
    {
        $this->initialized['runAsGroup'] = true;
        $this->runAsGroup = $runAsGroup;

        return $this;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    public function getRunAsNonRoot(): ?bool
    {
        return $this->runAsNonRoot;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     */
    public function setRunAsNonRoot(?bool $runAsNonRoot): self
    {
        $this->initialized['runAsNonRoot'] = true;
        $this->runAsNonRoot = $runAsNonRoot;

        return $this;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getRunAsUser(): ?int
    {
        return $this->runAsUser;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setRunAsUser(?int $runAsUser): self
    {
        $this->initialized['runAsUser'] = true;
        $this->runAsUser = $runAsUser;

        return $this;
    }

    /**
     * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are "MountOption" and "Recursive".
     *
     * "Recursive" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
     *
     * "MountOption" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
     *
     * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used. If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for all other volumes.
     *
     * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
     *
     * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getSeLinuxChangePolicy(): ?string
    {
        return $this->seLinuxChangePolicy;
    }

    /**
     * seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod. It has no effect on nodes that do not support SELinux or to volumes does not support SELinux. Valid values are "MountOption" and "Recursive".
     *
     * "Recursive" means relabeling of all files on all Pod volumes by the container runtime. This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
     *
     * "MountOption" mounts all eligible Pod volumes with `-o context` mount option. This requires all Pods that share the same volume to use the same SELinux label. It is not possible to share the same volume among privileged and unprivileged Pods. Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their CSIDriver instance. Other volumes are always re-labelled recursively. "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
     *
     * If not specified and SELinuxMount feature gate is enabled, "MountOption" is used. If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes and "Recursive" for all other volumes.
     *
     * This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
     *
     * All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setSeLinuxChangePolicy(?string $seLinuxChangePolicy): self
    {
        $this->initialized['seLinuxChangePolicy'] = true;
        $this->seLinuxChangePolicy = $seLinuxChangePolicy;

        return $this;
    }

    /**
     * SELinuxOptions are the labels to be applied to the container.
     */
    public function getSeLinuxOptions(): ?IoK8sApiCoreV1SELinuxOptions
    {
        return $this->seLinuxOptions;
    }

    /**
     * SELinuxOptions are the labels to be applied to the container.
     */
    public function setSeLinuxOptions(?IoK8sApiCoreV1SELinuxOptions $seLinuxOptions): self
    {
        $this->initialized['seLinuxOptions'] = true;
        $this->seLinuxOptions = $seLinuxOptions;

        return $this;
    }

    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    public function getSeccompProfile(): ?IoK8sApiCoreV1SeccompProfile
    {
        return $this->seccompProfile;
    }

    /**
     * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
     */
    public function setSeccompProfile(?IoK8sApiCoreV1SeccompProfile $seccompProfile): self
    {
        $this->initialized['seccompProfile'] = true;
        $this->seccompProfile = $seccompProfile;

        return $this;
    }

    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
     *
     * @return list<int>|null
     */
    public function getSupplementalGroups(): ?array
    {
        return $this->supplementalGroups;
    }

    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID and fsGroup (if specified).  If the SupplementalGroupsPolicy feature is enabled, the supplementalGroupsPolicy field determines whether these are in addition to or instead of any group memberships defined in the container image. If unspecified, no additional groups are added, though group memberships defined in the container image may still be used, depending on the supplementalGroupsPolicy field. Note that this field cannot be set when spec.os.name is windows.
     *
     * @param list<int>|null $supplementalGroups
     */
    public function setSupplementalGroups(?array $supplementalGroups): self
    {
        $this->initialized['supplementalGroups'] = true;
        $this->supplementalGroups = $supplementalGroups;

        return $this;
    }

    /**
     * Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
     */
    public function getSupplementalGroupsPolicy(): ?string
    {
        return $this->supplementalGroupsPolicy;
    }

    /**
     * Defines how supplemental groups of the first container processes are calculated. Valid values are "Merge" and "Strict". If not specified, "Merge" is used. (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled and the container runtime must implement support for this feature. Note that this field cannot be set when spec.os.name is windows.
     */
    public function setSupplementalGroupsPolicy(?string $supplementalGroupsPolicy): self
    {
        $this->initialized['supplementalGroupsPolicy'] = true;
        $this->supplementalGroupsPolicy = $supplementalGroupsPolicy;

        return $this;
    }

    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     *
     * @return list<IoK8sApiCoreV1Sysctl>|null
     */
    public function getSysctls(): ?array
    {
        return $this->sysctls;
    }

    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     *
     * @param list<IoK8sApiCoreV1Sysctl>|null $sysctls
     */
    public function setSysctls(?array $sysctls): self
    {
        $this->initialized['sysctls'] = true;
        $this->sysctls = $sysctls;

        return $this;
    }

    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    public function getWindowsOptions(): ?IoK8sApiCoreV1WindowsSecurityContextOptions
    {
        return $this->windowsOptions;
    }

    /**
     * WindowsSecurityContextOptions contain Windows-specific options and credentials.
     */
    public function setWindowsOptions(?IoK8sApiCoreV1WindowsSecurityContextOptions $windowsOptions): self
    {
        $this->initialized['windowsOptions'] = true;
        $this->windowsOptions = $windowsOptions;

        return $this;
    }
}
