<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1FCVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     *
     * @var string|null
     */
    protected $fsType;
    /**
     * lun is Optional: FC target lun number.
     *
     * @var int|null
     */
    protected $lun;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * targetWWNs is Optional: FC target worldwide names (WWNs).
     *
     * @var list<string>|null
     */
    protected $targetWWNs;
    /**
     * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     *
     * @var list<string>|null
     */
    protected $wwids;

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    public function getFsType(): ?string
    {
        return $this->fsType;
    }

    /**
     * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     */
    public function setFsType(?string $fsType): self
    {
        $this->initialized['fsType'] = true;
        $this->fsType = $fsType;

        return $this;
    }

    /**
     * lun is Optional: FC target lun number.
     */
    public function getLun(): ?int
    {
        return $this->lun;
    }

    /**
     * lun is Optional: FC target lun number.
     */
    public function setLun(?int $lun): self
    {
        $this->initialized['lun'] = true;
        $this->lun = $lun;

        return $this;
    }

    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * targetWWNs is Optional: FC target worldwide names (WWNs).
     *
     * @return list<string>|null
     */
    public function getTargetWWNs(): ?array
    {
        return $this->targetWWNs;
    }

    /**
     * targetWWNs is Optional: FC target worldwide names (WWNs).
     *
     * @param list<string>|null $targetWWNs
     */
    public function setTargetWWNs(?array $targetWWNs): self
    {
        $this->initialized['targetWWNs'] = true;
        $this->targetWWNs = $targetWWNs;

        return $this;
    }

    /**
     * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     *
     * @return list<string>|null
     */
    public function getWwids(): ?array
    {
        return $this->wwids;
    }

    /**
     * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     *
     * @param list<string>|null $wwids
     */
    public function setWwids(?array $wwids): self
    {
        $this->initialized['wwids'] = true;
        $this->wwids = $wwids;

        return $this;
    }
}
