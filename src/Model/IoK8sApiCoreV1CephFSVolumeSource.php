<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Kubernetes\Api\Model;

class IoK8sApiCoreV1CephFSVolumeSource
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @var list<string>|null
     */
    protected $monitors;
    /**
     * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /.
     *
     * @var string|null
     */
    protected $path;
    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @var bool|null
     */
    protected $readOnly;
    /**
     * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @var string|null
     */
    protected $secretFile;
    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     *
     * @var IoK8sApiCoreV1LocalObjectReference|null
     */
    protected $secretRef;
    /**
     * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @var string|null
     */
    protected $user;

    /**
     * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @return list<string>|null
     */
    public function getMonitors(): ?array
    {
        return $this->monitors;
    }

    /**
     * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     *
     * @param list<string>|null $monitors
     */
    public function setMonitors(?array $monitors): self
    {
        $this->initialized['monitors'] = true;
        $this->monitors = $monitors;

        return $this;
    }

    /**
     * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /.
     */
    public function getPath(): ?string
    {
        return $this->path;
    }

    /**
     * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /.
     */
    public function setPath(?string $path): self
    {
        $this->initialized['path'] = true;
        $this->path = $path;

        return $this;
    }

    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function getReadOnly(): ?bool
    {
        return $this->readOnly;
    }

    /**
     * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function setReadOnly(?bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function getSecretFile(): ?string
    {
        return $this->secretFile;
    }

    /**
     * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function setSecretFile(?string $secretFile): self
    {
        $this->initialized['secretFile'] = true;
        $this->secretFile = $secretFile;

        return $this;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function getSecretRef(): ?IoK8sApiCoreV1LocalObjectReference
    {
        return $this->secretRef;
    }

    /**
     * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
     */
    public function setSecretRef(?IoK8sApiCoreV1LocalObjectReference $secretRef): self
    {
        $this->initialized['secretRef'] = true;
        $this->secretRef = $secretRef;

        return $this;
    }

    /**
     * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function getUser(): ?string
    {
        return $this->user;
    }

    /**
     * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
     */
    public function setUser(?string $user): self
    {
        $this->initialized['user'] = true;
        $this->user = $user;

        return $this;
    }
}
